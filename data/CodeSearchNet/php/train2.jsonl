{"repo": "flarum/core", "path": "src/Discussion/DiscussionRepository.php", "func_name": "DiscussionRepository.findOrFail", "original_string": "public function findOrFail($id, User $user = null)\n    {\n        $query = Discussion::where('id', $id);\n\n        return $this->scopeVisibleTo($query, $user)->firstOrFail();\n    }", "language": "php", "code": "public function findOrFail($id, User $user = null)\n    {\n        $query = Discussion::where('id', $id);\n\n        return $this->scopeVisibleTo($query, $user)->firstOrFail();\n    }", "code_tokens": ["public", "function", "findOrFail", "(", "$", "id", ",", "User", "$", "user", "=", "null", ")", "{", "$", "query", "=", "Discussion", "::", "where", "(", "'id'", ",", "$", "id", ")", ";", "return", "$", "this", "->", "scopeVisibleTo", "(", "$", "query", ",", "$", "user", ")", "->", "firstOrFail", "(", ")", ";", "}"], "docstring": "Find a discussion by ID, optionally making sure it is visible to a\ncertain user, or throw an exception.\n\n@param int $id\n@param User $user\n@return \\Flarum\\Discussion\\Discussion", "docstring_tokens": ["Find", "a", "discussion", "by", "ID", "optionally", "making", "sure", "it", "is", "visible", "to", "a", "certain", "user", "or", "throw", "an", "exception", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Discussion/DiscussionRepository.php#L37-L42", "partition": "train"}
{"repo": "flarum/core", "path": "src/Discussion/DiscussionRepository.php", "func_name": "DiscussionRepository.getReadIds", "original_string": "public function getReadIds(User $user)\n    {\n        return Discussion::leftJoin('discussion_user', 'discussion_user.discussion_id', '=', 'discussions.id')\n            ->where('discussion_user.user_id', $user->id)\n            ->whereColumn('last_read_post_number', '>=', 'last_post_number')\n            ->pluck('id')\n            ->all();\n    }", "language": "php", "code": "public function getReadIds(User $user)\n    {\n        return Discussion::leftJoin('discussion_user', 'discussion_user.discussion_id', '=', 'discussions.id')\n            ->where('discussion_user.user_id', $user->id)\n            ->whereColumn('last_read_post_number', '>=', 'last_post_number')\n            ->pluck('id')\n            ->all();\n    }", "code_tokens": ["public", "function", "getReadIds", "(", "User", "$", "user", ")", "{", "return", "Discussion", "::", "leftJoin", "(", "'discussion_user'", ",", "'discussion_user.discussion_id'", ",", "'='", ",", "'discussions.id'", ")", "->", "where", "(", "'discussion_user.user_id'", ",", "$", "user", "->", "id", ")", "->", "whereColumn", "(", "'last_read_post_number'", ",", "'>='", ",", "'last_post_number'", ")", "->", "pluck", "(", "'id'", ")", "->", "all", "(", ")", ";", "}"], "docstring": "Get the IDs of discussions which a user has read completely.\n\n@param User $user\n@return array", "docstring_tokens": ["Get", "the", "IDs", "of", "discussions", "which", "a", "user", "has", "read", "completely", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Discussion/DiscussionRepository.php#L50-L57", "partition": "train"}
{"repo": "flarum/core", "path": "src/Http/UrlGenerator.php", "func_name": "UrlGenerator.addCollection", "original_string": "public function addCollection($key, RouteCollection $routes, $prefix = null)\n    {\n        $this->routes[$key] = new RouteCollectionUrlGenerator(\n            $this->app->url($prefix),\n            $routes\n        );\n\n        return $this;\n    }", "language": "php", "code": "public function addCollection($key, RouteCollection $routes, $prefix = null)\n    {\n        $this->routes[$key] = new RouteCollectionUrlGenerator(\n            $this->app->url($prefix),\n            $routes\n        );\n\n        return $this;\n    }", "code_tokens": ["public", "function", "addCollection", "(", "$", "key", ",", "RouteCollection", "$", "routes", ",", "$", "prefix", "=", "null", ")", "{", "$", "this", "->", "routes", "[", "$", "key", "]", "=", "new", "RouteCollectionUrlGenerator", "(", "$", "this", "->", "app", "->", "url", "(", "$", "prefix", ")", ",", "$", "routes", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Register a named route collection for URL generation.\n\n@param string $key\n@param RouteCollection $routes\n@param string $prefix\n@return static", "docstring_tokens": ["Register", "a", "named", "route", "collection", "for", "URL", "generation", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Http/UrlGenerator.php#L39-L47", "partition": "train"}
{"repo": "flarum/core", "path": "src/Foundation/DispatchEventsTrait.php", "func_name": "DispatchEventsTrait.dispatchEventsFor", "original_string": "public function dispatchEventsFor($entity, User $actor = null)\n    {\n        foreach ($entity->releaseEvents() as $event) {\n            $event->actor = $actor;\n\n            $this->events->dispatch($event);\n        }\n    }", "language": "php", "code": "public function dispatchEventsFor($entity, User $actor = null)\n    {\n        foreach ($entity->releaseEvents() as $event) {\n            $event->actor = $actor;\n\n            $this->events->dispatch($event);\n        }\n    }", "code_tokens": ["public", "function", "dispatchEventsFor", "(", "$", "entity", ",", "User", "$", "actor", "=", "null", ")", "{", "foreach", "(", "$", "entity", "->", "releaseEvents", "(", ")", "as", "$", "event", ")", "{", "$", "event", "->", "actor", "=", "$", "actor", ";", "$", "this", "->", "events", "->", "dispatch", "(", "$", "event", ")", ";", "}", "}"], "docstring": "Dispatch all events for an entity.\n\n@param object $entity\n@param User $actor", "docstring_tokens": ["Dispatch", "all", "events", "for", "an", "entity", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Foundation/DispatchEventsTrait.php#L30-L37", "partition": "train"}
{"repo": "flarum/core", "path": "src/Notification/NotificationSyncer.php", "func_name": "NotificationSyncer.sync", "original_string": "public function sync(Blueprint\\BlueprintInterface $blueprint, array $users)\n    {\n        $attributes = $this->getAttributes($blueprint);\n\n        // Find all existing notification records in the database matching this\n        // blueprint. We will begin by assuming that they all need to be\n        // deleted in order to match the provided list of users.\n        $toDelete = Notification::where($attributes)->get();\n        $toUndelete = [];\n        $newRecipients = [];\n\n        // For each of the provided users, check to see if they already have\n        // a notification record in the database. If they do, we will make sure\n        // it isn't marked as deleted. If they don't, we will want to create a\n        // new record for them.\n        foreach ($users as $user) {\n            if (! ($user instanceof User)) {\n                continue;\n            }\n\n            $existing = $toDelete->first(function ($notification, $i) use ($user) {\n                return $notification->user_id === $user->id;\n            });\n\n            if ($existing) {\n                $toUndelete[] = $existing->id;\n                $toDelete->forget($toDelete->search($existing));\n            } elseif (! static::$onePerUser || ! in_array($user->id, static::$sentTo)) {\n                $newRecipients[] = $user;\n                static::$sentTo[] = $user->id;\n            }\n        }\n\n        // Delete all of the remaining notification records which weren't\n        // removed from this collection by the above loop. Un-delete the\n        // existing records that we want to keep.\n        if (count($toDelete)) {\n            $this->setDeleted($toDelete->pluck('id')->all(), true);\n        }\n\n        if (count($toUndelete)) {\n            $this->setDeleted($toUndelete, false);\n        }\n\n        // Create a notification record, and send an email, for all users\n        // receiving this notification for the first time (we know because they\n        // didn't have a record in the database).\n        if (count($newRecipients)) {\n            $this->sendNotifications($blueprint, $newRecipients);\n        }\n    }", "language": "php", "code": "public function sync(Blueprint\\BlueprintInterface $blueprint, array $users)\n    {\n        $attributes = $this->getAttributes($blueprint);\n\n        // Find all existing notification records in the database matching this\n        // blueprint. We will begin by assuming that they all need to be\n        // deleted in order to match the provided list of users.\n        $toDelete = Notification::where($attributes)->get();\n        $toUndelete = [];\n        $newRecipients = [];\n\n        // For each of the provided users, check to see if they already have\n        // a notification record in the database. If they do, we will make sure\n        // it isn't marked as deleted. If they don't, we will want to create a\n        // new record for them.\n        foreach ($users as $user) {\n            if (! ($user instanceof User)) {\n                continue;\n            }\n\n            $existing = $toDelete->first(function ($notification, $i) use ($user) {\n                return $notification->user_id === $user->id;\n            });\n\n            if ($existing) {\n                $toUndelete[] = $existing->id;\n                $toDelete->forget($toDelete->search($existing));\n            } elseif (! static::$onePerUser || ! in_array($user->id, static::$sentTo)) {\n                $newRecipients[] = $user;\n                static::$sentTo[] = $user->id;\n            }\n        }\n\n        // Delete all of the remaining notification records which weren't\n        // removed from this collection by the above loop. Un-delete the\n        // existing records that we want to keep.\n        if (count($toDelete)) {\n            $this->setDeleted($toDelete->pluck('id')->all(), true);\n        }\n\n        if (count($toUndelete)) {\n            $this->setDeleted($toUndelete, false);\n        }\n\n        // Create a notification record, and send an email, for all users\n        // receiving this notification for the first time (we know because they\n        // didn't have a record in the database).\n        if (count($newRecipients)) {\n            $this->sendNotifications($blueprint, $newRecipients);\n        }\n    }", "code_tokens": ["public", "function", "sync", "(", "Blueprint", "\\", "BlueprintInterface", "$", "blueprint", ",", "array", "$", "users", ")", "{", "$", "attributes", "=", "$", "this", "->", "getAttributes", "(", "$", "blueprint", ")", ";", "$", "toDelete", "=", "Notification", "::", "where", "(", "$", "attributes", ")", "->", "get", "(", ")", ";", "$", "toUndelete", "=", "[", "]", ";", "$", "newRecipients", "=", "[", "]", ";", "foreach", "(", "$", "users", "as", "$", "user", ")", "{", "if", "(", "!", "(", "$", "user", "instanceof", "User", ")", ")", "{", "continue", ";", "}", "$", "existing", "=", "$", "toDelete", "->", "first", "(", "function", "(", "$", "notification", ",", "$", "i", ")", "use", "(", "$", "user", ")", "{", "return", "$", "notification", "->", "user_id", "===", "$", "user", "->", "id", ";", "}", ")", ";", "if", "(", "$", "existing", ")", "{", "$", "toUndelete", "[", "]", "=", "$", "existing", "->", "id", ";", "$", "toDelete", "->", "forget", "(", "$", "toDelete", "->", "search", "(", "$", "existing", ")", ")", ";", "}", "elseif", "(", "!", "static", "::", "$", "onePerUser", "||", "!", "in_array", "(", "$", "user", "->", "id", ",", "static", "::", "$", "sentTo", ")", ")", "{", "$", "newRecipients", "[", "]", "=", "$", "user", ";", "static", "::", "$", "sentTo", "[", "]", "=", "$", "user", "->", "id", ";", "}", "}", "if", "(", "count", "(", "$", "toDelete", ")", ")", "{", "$", "this", "->", "setDeleted", "(", "$", "toDelete", "->", "pluck", "(", "'id'", ")", "->", "all", "(", ")", ",", "true", ")", ";", "}", "if", "(", "count", "(", "$", "toUndelete", ")", ")", "{", "$", "this", "->", "setDeleted", "(", "$", "toUndelete", ",", "false", ")", ";", "}", "if", "(", "count", "(", "$", "newRecipients", ")", ")", "{", "$", "this", "->", "sendNotifications", "(", "$", "blueprint", ",", "$", "newRecipients", ")", ";", "}", "}"], "docstring": "Sync a notification so that it is visible to the specified users, and not\nvisible to anyone else. If it is being made visible for the first time,\nattempt to send the user an email.\n\n@param \\Flarum\\Notification\\Blueprint\\BlueprintInterface $blueprint\n@param User[] $users\n@return void", "docstring_tokens": ["Sync", "a", "notification", "so", "that", "it", "is", "visible", "to", "the", "specified", "users", "and", "not", "visible", "to", "anyone", "else", ".", "If", "it", "is", "being", "made", "visible", "for", "the", "first", "time", "attempt", "to", "send", "the", "user", "an", "email", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Notification/NotificationSyncer.php#L72-L122", "partition": "train"}
{"repo": "flarum/core", "path": "src/Notification/NotificationSyncer.php", "func_name": "NotificationSyncer.delete", "original_string": "public function delete(BlueprintInterface $blueprint)\n    {\n        Notification::where($this->getAttributes($blueprint))->update(['is_deleted' => true]);\n    }", "language": "php", "code": "public function delete(BlueprintInterface $blueprint)\n    {\n        Notification::where($this->getAttributes($blueprint))->update(['is_deleted' => true]);\n    }", "code_tokens": ["public", "function", "delete", "(", "BlueprintInterface", "$", "blueprint", ")", "{", "Notification", "::", "where", "(", "$", "this", "->", "getAttributes", "(", "$", "blueprint", ")", ")", "->", "update", "(", "[", "'is_deleted'", "=>", "true", "]", ")", ";", "}"], "docstring": "Delete a notification for all users.\n\n@param \\Flarum\\Notification\\Blueprint\\BlueprintInterface $blueprint\n@return void", "docstring_tokens": ["Delete", "a", "notification", "for", "all", "users", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Notification/NotificationSyncer.php#L130-L133", "partition": "train"}
{"repo": "flarum/core", "path": "src/Notification/NotificationSyncer.php", "func_name": "NotificationSyncer.restore", "original_string": "public function restore(BlueprintInterface $blueprint)\n    {\n        Notification::where($this->getAttributes($blueprint))->update(['is_deleted' => false]);\n    }", "language": "php", "code": "public function restore(BlueprintInterface $blueprint)\n    {\n        Notification::where($this->getAttributes($blueprint))->update(['is_deleted' => false]);\n    }", "code_tokens": ["public", "function", "restore", "(", "BlueprintInterface", "$", "blueprint", ")", "{", "Notification", "::", "where", "(", "$", "this", "->", "getAttributes", "(", "$", "blueprint", ")", ")", "->", "update", "(", "[", "'is_deleted'", "=>", "false", "]", ")", ";", "}"], "docstring": "Restore a notification for all users.\n\n@param BlueprintInterface $blueprint\n@return void", "docstring_tokens": ["Restore", "a", "notification", "for", "all", "users", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Notification/NotificationSyncer.php#L141-L144", "partition": "train"}
{"repo": "flarum/core", "path": "src/Notification/NotificationSyncer.php", "func_name": "NotificationSyncer.mailNotifications", "original_string": "protected function mailNotifications(MailableInterface $blueprint, array $recipients)\n    {\n        foreach ($recipients as $user) {\n            if ($user->shouldEmail($blueprint::getType())) {\n                $this->mailer->send($blueprint, $user);\n            }\n        }\n    }", "language": "php", "code": "protected function mailNotifications(MailableInterface $blueprint, array $recipients)\n    {\n        foreach ($recipients as $user) {\n            if ($user->shouldEmail($blueprint::getType())) {\n                $this->mailer->send($blueprint, $user);\n            }\n        }\n    }", "code_tokens": ["protected", "function", "mailNotifications", "(", "MailableInterface", "$", "blueprint", ",", "array", "$", "recipients", ")", "{", "foreach", "(", "$", "recipients", "as", "$", "user", ")", "{", "if", "(", "$", "user", "->", "shouldEmail", "(", "$", "blueprint", "::", "getType", "(", ")", ")", ")", "{", "$", "this", "->", "mailer", "->", "send", "(", "$", "blueprint", ",", "$", "user", ")", ";", "}", "}", "}"], "docstring": "Mail a notification to a list of users.\n\n@param MailableInterface $blueprint\n@param User[] $recipients", "docstring_tokens": ["Mail", "a", "notification", "to", "a", "list", "of", "users", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Notification/NotificationSyncer.php#L198-L205", "partition": "train"}
{"repo": "flarum/core", "path": "src/Notification/NotificationSyncer.php", "func_name": "NotificationSyncer.getAttributes", "original_string": "protected function getAttributes(Blueprint\\BlueprintInterface $blueprint)\n    {\n        return [\n            'type' => $blueprint::getType(),\n            'from_user_id' => ($fromUser = $blueprint->getFromUser()) ? $fromUser->id : null,\n            'subject_id' => ($subject = $blueprint->getSubject()) ? $subject->id : null,\n            'data' => ($data = $blueprint->getData()) ? json_encode($data) : null\n        ];\n    }", "language": "php", "code": "protected function getAttributes(Blueprint\\BlueprintInterface $blueprint)\n    {\n        return [\n            'type' => $blueprint::getType(),\n            'from_user_id' => ($fromUser = $blueprint->getFromUser()) ? $fromUser->id : null,\n            'subject_id' => ($subject = $blueprint->getSubject()) ? $subject->id : null,\n            'data' => ($data = $blueprint->getData()) ? json_encode($data) : null\n        ];\n    }", "code_tokens": ["protected", "function", "getAttributes", "(", "Blueprint", "\\", "BlueprintInterface", "$", "blueprint", ")", "{", "return", "[", "'type'", "=>", "$", "blueprint", "::", "getType", "(", ")", ",", "'from_user_id'", "=>", "(", "$", "fromUser", "=", "$", "blueprint", "->", "getFromUser", "(", ")", ")", "?", "$", "fromUser", "->", "id", ":", "null", ",", "'subject_id'", "=>", "(", "$", "subject", "=", "$", "blueprint", "->", "getSubject", "(", ")", ")", "?", "$", "subject", "->", "id", ":", "null", ",", "'data'", "=>", "(", "$", "data", "=", "$", "blueprint", "->", "getData", "(", ")", ")", "?", "json_encode", "(", "$", "data", ")", ":", "null", "]", ";", "}"], "docstring": "Construct an array of attributes to be stored in a notification record in\nthe database, given a notification blueprint.\n\n@param \\Flarum\\Notification\\Blueprint\\BlueprintInterface $blueprint\n@return array", "docstring_tokens": ["Construct", "an", "array", "of", "attributes", "to", "be", "stored", "in", "a", "notification", "record", "in", "the", "database", "given", "a", "notification", "blueprint", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Notification/NotificationSyncer.php#L225-L233", "partition": "train"}
{"repo": "flarum/core", "path": "src/Extension/ExtensionManager.php", "func_name": "ExtensionManager.enable", "original_string": "public function enable($name)\n    {\n        if ($this->isEnabled($name)) {\n            return;\n        }\n\n        $extension = $this->getExtension($name);\n\n        $this->dispatcher->dispatch(new Enabling($extension));\n\n        $enabled = $this->getEnabled();\n\n        $enabled[] = $name;\n\n        $this->migrate($extension);\n\n        $this->publishAssets($extension);\n\n        $this->setEnabled($enabled);\n\n        $extension->enable($this->app);\n\n        $this->dispatcher->dispatch(new Enabled($extension));\n    }", "language": "php", "code": "public function enable($name)\n    {\n        if ($this->isEnabled($name)) {\n            return;\n        }\n\n        $extension = $this->getExtension($name);\n\n        $this->dispatcher->dispatch(new Enabling($extension));\n\n        $enabled = $this->getEnabled();\n\n        $enabled[] = $name;\n\n        $this->migrate($extension);\n\n        $this->publishAssets($extension);\n\n        $this->setEnabled($enabled);\n\n        $extension->enable($this->app);\n\n        $this->dispatcher->dispatch(new Enabled($extension));\n    }", "code_tokens": ["public", "function", "enable", "(", "$", "name", ")", "{", "if", "(", "$", "this", "->", "isEnabled", "(", "$", "name", ")", ")", "{", "return", ";", "}", "$", "extension", "=", "$", "this", "->", "getExtension", "(", "$", "name", ")", ";", "$", "this", "->", "dispatcher", "->", "dispatch", "(", "new", "Enabling", "(", "$", "extension", ")", ")", ";", "$", "enabled", "=", "$", "this", "->", "getEnabled", "(", ")", ";", "$", "enabled", "[", "]", "=", "$", "name", ";", "$", "this", "->", "migrate", "(", "$", "extension", ")", ";", "$", "this", "->", "publishAssets", "(", "$", "extension", ")", ";", "$", "this", "->", "setEnabled", "(", "$", "enabled", ")", ";", "$", "extension", "->", "enable", "(", "$", "this", "->", "app", ")", ";", "$", "this", "->", "dispatcher", "->", "dispatch", "(", "new", "Enabled", "(", "$", "extension", ")", ")", ";", "}"], "docstring": "Enables the extension.\n\n@param string $name", "docstring_tokens": ["Enables", "the", "extension", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Extension/ExtensionManager.php#L113-L136", "partition": "train"}
{"repo": "flarum/core", "path": "src/Extension/ExtensionManager.php", "func_name": "ExtensionManager.disable", "original_string": "public function disable($name)\n    {\n        $enabled = $this->getEnabled();\n\n        if (($k = array_search($name, $enabled)) === false) {\n            return;\n        }\n\n        $extension = $this->getExtension($name);\n\n        $this->dispatcher->dispatch(new Disabling($extension));\n\n        unset($enabled[$k]);\n\n        $this->setEnabled($enabled);\n\n        $extension->disable($this->app);\n\n        $this->dispatcher->dispatch(new Disabled($extension));\n    }", "language": "php", "code": "public function disable($name)\n    {\n        $enabled = $this->getEnabled();\n\n        if (($k = array_search($name, $enabled)) === false) {\n            return;\n        }\n\n        $extension = $this->getExtension($name);\n\n        $this->dispatcher->dispatch(new Disabling($extension));\n\n        unset($enabled[$k]);\n\n        $this->setEnabled($enabled);\n\n        $extension->disable($this->app);\n\n        $this->dispatcher->dispatch(new Disabled($extension));\n    }", "code_tokens": ["public", "function", "disable", "(", "$", "name", ")", "{", "$", "enabled", "=", "$", "this", "->", "getEnabled", "(", ")", ";", "if", "(", "(", "$", "k", "=", "array_search", "(", "$", "name", ",", "$", "enabled", ")", ")", "===", "false", ")", "{", "return", ";", "}", "$", "extension", "=", "$", "this", "->", "getExtension", "(", "$", "name", ")", ";", "$", "this", "->", "dispatcher", "->", "dispatch", "(", "new", "Disabling", "(", "$", "extension", ")", ")", ";", "unset", "(", "$", "enabled", "[", "$", "k", "]", ")", ";", "$", "this", "->", "setEnabled", "(", "$", "enabled", ")", ";", "$", "extension", "->", "disable", "(", "$", "this", "->", "app", ")", ";", "$", "this", "->", "dispatcher", "->", "dispatch", "(", "new", "Disabled", "(", "$", "extension", ")", ")", ";", "}"], "docstring": "Disables an extension.\n\n@param string $name", "docstring_tokens": ["Disables", "an", "extension", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Extension/ExtensionManager.php#L143-L162", "partition": "train"}
{"repo": "flarum/core", "path": "src/Extension/ExtensionManager.php", "func_name": "ExtensionManager.uninstall", "original_string": "public function uninstall($name)\n    {\n        $extension = $this->getExtension($name);\n\n        $this->disable($name);\n\n        $this->migrateDown($extension);\n\n        $this->unpublishAssets($extension);\n\n        $extension->setInstalled(false);\n\n        $this->dispatcher->dispatch(new Uninstalled($extension));\n    }", "language": "php", "code": "public function uninstall($name)\n    {\n        $extension = $this->getExtension($name);\n\n        $this->disable($name);\n\n        $this->migrateDown($extension);\n\n        $this->unpublishAssets($extension);\n\n        $extension->setInstalled(false);\n\n        $this->dispatcher->dispatch(new Uninstalled($extension));\n    }", "code_tokens": ["public", "function", "uninstall", "(", "$", "name", ")", "{", "$", "extension", "=", "$", "this", "->", "getExtension", "(", "$", "name", ")", ";", "$", "this", "->", "disable", "(", "$", "name", ")", ";", "$", "this", "->", "migrateDown", "(", "$", "extension", ")", ";", "$", "this", "->", "unpublishAssets", "(", "$", "extension", ")", ";", "$", "extension", "->", "setInstalled", "(", "false", ")", ";", "$", "this", "->", "dispatcher", "->", "dispatch", "(", "new", "Uninstalled", "(", "$", "extension", ")", ")", ";", "}"], "docstring": "Uninstalls an extension.\n\n@param string $name", "docstring_tokens": ["Uninstalls", "an", "extension", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Extension/ExtensionManager.php#L169-L182", "partition": "train"}
{"repo": "flarum/core", "path": "src/Extension/ExtensionManager.php", "func_name": "ExtensionManager.publishAssets", "original_string": "protected function publishAssets(Extension $extension)\n    {\n        if ($extension->hasAssets()) {\n            $this->filesystem->copyDirectory(\n                $extension->getPath().'/assets',\n                $this->app->publicPath().'/assets/extensions/'.$extension->getId()\n            );\n        }\n    }", "language": "php", "code": "protected function publishAssets(Extension $extension)\n    {\n        if ($extension->hasAssets()) {\n            $this->filesystem->copyDirectory(\n                $extension->getPath().'/assets',\n                $this->app->publicPath().'/assets/extensions/'.$extension->getId()\n            );\n        }\n    }", "code_tokens": ["protected", "function", "publishAssets", "(", "Extension", "$", "extension", ")", "{", "if", "(", "$", "extension", "->", "hasAssets", "(", ")", ")", "{", "$", "this", "->", "filesystem", "->", "copyDirectory", "(", "$", "extension", "->", "getPath", "(", ")", ".", "'/assets'", ",", "$", "this", "->", "app", "->", "publicPath", "(", ")", ".", "'/assets/extensions/'", ".", "$", "extension", "->", "getId", "(", ")", ")", ";", "}", "}"], "docstring": "Copy the assets from an extension's assets directory into public view.\n\n@param Extension $extension", "docstring_tokens": ["Copy", "the", "assets", "from", "an", "extension", "s", "assets", "directory", "into", "public", "view", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Extension/ExtensionManager.php#L189-L197", "partition": "train"}
{"repo": "flarum/core", "path": "src/Extension/ExtensionManager.php", "func_name": "ExtensionManager.unpublishAssets", "original_string": "protected function unpublishAssets(Extension $extension)\n    {\n        $this->filesystem->deleteDirectory($this->app->publicPath().'/assets/extensions/'.$extension->getId());\n    }", "language": "php", "code": "protected function unpublishAssets(Extension $extension)\n    {\n        $this->filesystem->deleteDirectory($this->app->publicPath().'/assets/extensions/'.$extension->getId());\n    }", "code_tokens": ["protected", "function", "unpublishAssets", "(", "Extension", "$", "extension", ")", "{", "$", "this", "->", "filesystem", "->", "deleteDirectory", "(", "$", "this", "->", "app", "->", "publicPath", "(", ")", ".", "'/assets/extensions/'", ".", "$", "extension", "->", "getId", "(", ")", ")", ";", "}"], "docstring": "Delete an extension's assets from public view.\n\n@param Extension $extension", "docstring_tokens": ["Delete", "an", "extension", "s", "assets", "from", "public", "view", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Extension/ExtensionManager.php#L204-L207", "partition": "train"}
{"repo": "flarum/core", "path": "src/Extension/ExtensionManager.php", "func_name": "ExtensionManager.getAsset", "original_string": "public function getAsset(Extension $extension, $path)\n    {\n        return $this->app->publicPath().'/assets/extensions/'.$extension->getId().$path;\n    }", "language": "php", "code": "public function getAsset(Extension $extension, $path)\n    {\n        return $this->app->publicPath().'/assets/extensions/'.$extension->getId().$path;\n    }", "code_tokens": ["public", "function", "getAsset", "(", "Extension", "$", "extension", ",", "$", "path", ")", "{", "return", "$", "this", "->", "app", "->", "publicPath", "(", ")", ".", "'/assets/extensions/'", ".", "$", "extension", "->", "getId", "(", ")", ".", "$", "path", ";", "}"], "docstring": "Get the path to an extension's published asset.\n\n@param Extension $extension\n@param string    $path\n@return string", "docstring_tokens": ["Get", "the", "path", "to", "an", "extension", "s", "published", "asset", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Extension/ExtensionManager.php#L216-L219", "partition": "train"}
{"repo": "flarum/core", "path": "src/Extension/ExtensionManager.php", "func_name": "ExtensionManager.migrate", "original_string": "public function migrate(Extension $extension, $direction = 'up')\n    {\n        $this->app->bind('Illuminate\\Database\\Schema\\Builder', function ($container) {\n            return $container->make('Illuminate\\Database\\ConnectionInterface')->getSchemaBuilder();\n        });\n\n        $extension->migrate($this->migrator, $direction);\n    }", "language": "php", "code": "public function migrate(Extension $extension, $direction = 'up')\n    {\n        $this->app->bind('Illuminate\\Database\\Schema\\Builder', function ($container) {\n            return $container->make('Illuminate\\Database\\ConnectionInterface')->getSchemaBuilder();\n        });\n\n        $extension->migrate($this->migrator, $direction);\n    }", "code_tokens": ["public", "function", "migrate", "(", "Extension", "$", "extension", ",", "$", "direction", "=", "'up'", ")", "{", "$", "this", "->", "app", "->", "bind", "(", "'Illuminate\\Database\\Schema\\Builder'", ",", "function", "(", "$", "container", ")", "{", "return", "$", "container", "->", "make", "(", "'Illuminate\\Database\\ConnectionInterface'", ")", "->", "getSchemaBuilder", "(", ")", ";", "}", ")", ";", "$", "extension", "->", "migrate", "(", "$", "this", "->", "migrator", ",", "$", "direction", ")", ";", "}"], "docstring": "Runs the database migrations for the extension.\n\n@param Extension $extension\n@param string $direction\n@return void", "docstring_tokens": ["Runs", "the", "database", "migrations", "for", "the", "extension", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Extension/ExtensionManager.php#L228-L235", "partition": "train"}
{"repo": "flarum/core", "path": "src/Extension/ExtensionManager.php", "func_name": "ExtensionManager.getEnabledExtensions", "original_string": "public function getEnabledExtensions()\n    {\n        $enabled = [];\n        $extensions = $this->getExtensions();\n\n        foreach ($this->getEnabled() as $id) {\n            if (isset($extensions[$id])) {\n                $enabled[$id] = $extensions[$id];\n            }\n        }\n\n        return $enabled;\n    }", "language": "php", "code": "public function getEnabledExtensions()\n    {\n        $enabled = [];\n        $extensions = $this->getExtensions();\n\n        foreach ($this->getEnabled() as $id) {\n            if (isset($extensions[$id])) {\n                $enabled[$id] = $extensions[$id];\n            }\n        }\n\n        return $enabled;\n    }", "code_tokens": ["public", "function", "getEnabledExtensions", "(", ")", "{", "$", "enabled", "=", "[", "]", ";", "$", "extensions", "=", "$", "this", "->", "getExtensions", "(", ")", ";", "foreach", "(", "$", "this", "->", "getEnabled", "(", ")", "as", "$", "id", ")", "{", "if", "(", "isset", "(", "$", "extensions", "[", "$", "id", "]", ")", ")", "{", "$", "enabled", "[", "$", "id", "]", "=", "$", "extensions", "[", "$", "id", "]", ";", "}", "}", "return", "$", "enabled", ";", "}"], "docstring": "Get only enabled extensions.\n\n@return array", "docstring_tokens": ["Get", "only", "enabled", "extensions", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Extension/ExtensionManager.php#L263-L275", "partition": "train"}
{"repo": "flarum/core", "path": "src/Extension/ExtensionManager.php", "func_name": "ExtensionManager.extend", "original_string": "public function extend(Container $app)\n    {\n        foreach ($this->getEnabledExtensions() as $extension) {\n            $extension->extend($app);\n        }\n    }", "language": "php", "code": "public function extend(Container $app)\n    {\n        foreach ($this->getEnabledExtensions() as $extension) {\n            $extension->extend($app);\n        }\n    }", "code_tokens": ["public", "function", "extend", "(", "Container", "$", "app", ")", "{", "foreach", "(", "$", "this", "->", "getEnabledExtensions", "(", ")", "as", "$", "extension", ")", "{", "$", "extension", "->", "extend", "(", "$", "app", ")", ";", "}", "}"], "docstring": "Call on all enabled extensions to extend the Flarum application.\n\n@param Container $app", "docstring_tokens": ["Call", "on", "all", "enabled", "extensions", "to", "extend", "the", "Flarum", "application", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Extension/ExtensionManager.php#L282-L287", "partition": "train"}
{"repo": "flarum/core", "path": "src/Extension/ExtensionManager.php", "func_name": "ExtensionManager.setEnabled", "original_string": "protected function setEnabled(array $enabled)\n    {\n        $enabled = array_values(array_unique($enabled));\n\n        $this->config->set('extensions_enabled', json_encode($enabled));\n    }", "language": "php", "code": "protected function setEnabled(array $enabled)\n    {\n        $enabled = array_values(array_unique($enabled));\n\n        $this->config->set('extensions_enabled', json_encode($enabled));\n    }", "code_tokens": ["protected", "function", "setEnabled", "(", "array", "$", "enabled", ")", "{", "$", "enabled", "=", "array_values", "(", "array_unique", "(", "$", "enabled", ")", ")", ";", "$", "this", "->", "config", "->", "set", "(", "'extensions_enabled'", ",", "json_encode", "(", "$", "enabled", ")", ")", ";", "}"], "docstring": "Persist the currently enabled extensions.\n\n@param array $enabled", "docstring_tokens": ["Persist", "the", "currently", "enabled", "extensions", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Extension/ExtensionManager.php#L304-L309", "partition": "train"}
{"repo": "flarum/core", "path": "src/Event/ConfigureLocales.php", "func_name": "ConfigureLocales.loadLanguagePackFrom", "original_string": "public function loadLanguagePackFrom($directory)\n    {\n        $name = $title = basename($directory);\n\n        if (file_exists($manifest = $directory.'/composer.json')) {\n            $json = json_decode(file_get_contents($manifest), true);\n\n            if (empty($json)) {\n                throw new RuntimeException(\"Error parsing composer.json in $name: \".json_last_error_msg());\n            }\n\n            $locale = array_get($json, 'extra.flarum-locale.code');\n            $title = array_get($json, 'extra.flarum-locale.title', $title);\n        }\n\n        if (! isset($locale)) {\n            throw new RuntimeException(\"Language pack $name must define \\\"extra.flarum-locale.code\\\" in composer.json.\");\n        }\n\n        $this->locales->addLocale($locale, $title);\n\n        if (! is_dir($localeDir = $directory.'/locale')) {\n            throw new RuntimeException(\"Language pack $name must have a \\\"locale\\\" subdirectory.\");\n        }\n\n        if (file_exists($file = $localeDir.'/config.js')) {\n            $this->locales->addJsFile($locale, $file);\n        }\n\n        if (file_exists($file = $localeDir.'/config.css')) {\n            $this->locales->addCssFile($locale, $file);\n        }\n\n        foreach (new DirectoryIterator($localeDir) as $file) {\n            if ($file->isFile() && in_array($file->getExtension(), ['yml', 'yaml'])) {\n                $this->locales->addTranslations($locale, $file->getPathname());\n            }\n        }\n    }", "language": "php", "code": "public function loadLanguagePackFrom($directory)\n    {\n        $name = $title = basename($directory);\n\n        if (file_exists($manifest = $directory.'/composer.json')) {\n            $json = json_decode(file_get_contents($manifest), true);\n\n            if (empty($json)) {\n                throw new RuntimeException(\"Error parsing composer.json in $name: \".json_last_error_msg());\n            }\n\n            $locale = array_get($json, 'extra.flarum-locale.code');\n            $title = array_get($json, 'extra.flarum-locale.title', $title);\n        }\n\n        if (! isset($locale)) {\n            throw new RuntimeException(\"Language pack $name must define \\\"extra.flarum-locale.code\\\" in composer.json.\");\n        }\n\n        $this->locales->addLocale($locale, $title);\n\n        if (! is_dir($localeDir = $directory.'/locale')) {\n            throw new RuntimeException(\"Language pack $name must have a \\\"locale\\\" subdirectory.\");\n        }\n\n        if (file_exists($file = $localeDir.'/config.js')) {\n            $this->locales->addJsFile($locale, $file);\n        }\n\n        if (file_exists($file = $localeDir.'/config.css')) {\n            $this->locales->addCssFile($locale, $file);\n        }\n\n        foreach (new DirectoryIterator($localeDir) as $file) {\n            if ($file->isFile() && in_array($file->getExtension(), ['yml', 'yaml'])) {\n                $this->locales->addTranslations($locale, $file->getPathname());\n            }\n        }\n    }", "code_tokens": ["public", "function", "loadLanguagePackFrom", "(", "$", "directory", ")", "{", "$", "name", "=", "$", "title", "=", "basename", "(", "$", "directory", ")", ";", "if", "(", "file_exists", "(", "$", "manifest", "=", "$", "directory", ".", "'/composer.json'", ")", ")", "{", "$", "json", "=", "json_decode", "(", "file_get_contents", "(", "$", "manifest", ")", ",", "true", ")", ";", "if", "(", "empty", "(", "$", "json", ")", ")", "{", "throw", "new", "RuntimeException", "(", "\"Error parsing composer.json in $name: \"", ".", "json_last_error_msg", "(", ")", ")", ";", "}", "$", "locale", "=", "array_get", "(", "$", "json", ",", "'extra.flarum-locale.code'", ")", ";", "$", "title", "=", "array_get", "(", "$", "json", ",", "'extra.flarum-locale.title'", ",", "$", "title", ")", ";", "}", "if", "(", "!", "isset", "(", "$", "locale", ")", ")", "{", "throw", "new", "RuntimeException", "(", "\"Language pack $name must define \\\"extra.flarum-locale.code\\\" in composer.json.\"", ")", ";", "}", "$", "this", "->", "locales", "->", "addLocale", "(", "$", "locale", ",", "$", "title", ")", ";", "if", "(", "!", "is_dir", "(", "$", "localeDir", "=", "$", "directory", ".", "'/locale'", ")", ")", "{", "throw", "new", "RuntimeException", "(", "\"Language pack $name must have a \\\"locale\\\" subdirectory.\"", ")", ";", "}", "if", "(", "file_exists", "(", "$", "file", "=", "$", "localeDir", ".", "'/config.js'", ")", ")", "{", "$", "this", "->", "locales", "->", "addJsFile", "(", "$", "locale", ",", "$", "file", ")", ";", "}", "if", "(", "file_exists", "(", "$", "file", "=", "$", "localeDir", ".", "'/config.css'", ")", ")", "{", "$", "this", "->", "locales", "->", "addCssFile", "(", "$", "locale", ",", "$", "file", ")", ";", "}", "foreach", "(", "new", "DirectoryIterator", "(", "$", "localeDir", ")", "as", "$", "file", ")", "{", "if", "(", "$", "file", "->", "isFile", "(", ")", "&&", "in_array", "(", "$", "file", "->", "getExtension", "(", ")", ",", "[", "'yml'", ",", "'yaml'", "]", ")", ")", "{", "$", "this", "->", "locales", "->", "addTranslations", "(", "$", "locale", ",", "$", "file", "->", "getPathname", "(", ")", ")", ";", "}", "}", "}"], "docstring": "Load language pack resources from the given directory.\n\n@param string $directory", "docstring_tokens": ["Load", "language", "pack", "resources", "from", "the", "given", "directory", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Event/ConfigureLocales.php#L41-L79", "partition": "train"}
{"repo": "flarum/core", "path": "src/Console/Event/Configuring.php", "func_name": "Configuring.addCommand", "original_string": "public function addCommand($command)\n    {\n        if (is_string($command)) {\n            $command = $this->app->make($command);\n        }\n\n        if ($command instanceof Command) {\n            $command->setLaravel($this->app);\n        }\n\n        $this->console->add($command);\n    }", "language": "php", "code": "public function addCommand($command)\n    {\n        if (is_string($command)) {\n            $command = $this->app->make($command);\n        }\n\n        if ($command instanceof Command) {\n            $command->setLaravel($this->app);\n        }\n\n        $this->console->add($command);\n    }", "code_tokens": ["public", "function", "addCommand", "(", "$", "command", ")", "{", "if", "(", "is_string", "(", "$", "command", ")", ")", "{", "$", "command", "=", "$", "this", "->", "app", "->", "make", "(", "$", "command", ")", ";", "}", "if", "(", "$", "command", "instanceof", "Command", ")", "{", "$", "command", "->", "setLaravel", "(", "$", "this", "->", "app", ")", ";", "}", "$", "this", "->", "console", "->", "add", "(", "$", "command", ")", ";", "}"], "docstring": "Add a console command to the flarum binary.\n\n@param Command|string $command", "docstring_tokens": ["Add", "a", "console", "command", "to", "the", "flarum", "binary", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Console/Event/Configuring.php#L50-L61", "partition": "train"}
{"repo": "flarum/core", "path": "src/Discussion/Discussion.php", "func_name": "Discussion.start", "original_string": "public static function start($title, User $user)\n    {\n        $discussion = new static;\n\n        $discussion->title = $title;\n        $discussion->created_at = Carbon::now();\n        $discussion->user_id = $user->id;\n\n        $discussion->setRelation('user', $user);\n\n        $discussion->raise(new Started($discussion));\n\n        return $discussion;\n    }", "language": "php", "code": "public static function start($title, User $user)\n    {\n        $discussion = new static;\n\n        $discussion->title = $title;\n        $discussion->created_at = Carbon::now();\n        $discussion->user_id = $user->id;\n\n        $discussion->setRelation('user', $user);\n\n        $discussion->raise(new Started($discussion));\n\n        return $discussion;\n    }", "code_tokens": ["public", "static", "function", "start", "(", "$", "title", ",", "User", "$", "user", ")", "{", "$", "discussion", "=", "new", "static", ";", "$", "discussion", "->", "title", "=", "$", "title", ";", "$", "discussion", "->", "created_at", "=", "Carbon", "::", "now", "(", ")", ";", "$", "discussion", "->", "user_id", "=", "$", "user", "->", "id", ";", "$", "discussion", "->", "setRelation", "(", "'user'", ",", "$", "user", ")", ";", "$", "discussion", "->", "raise", "(", "new", "Started", "(", "$", "discussion", ")", ")", ";", "return", "$", "discussion", ";", "}"], "docstring": "Start a new discussion. Raises the DiscussionWasStarted event.\n\n@param string $title\n@param User $user\n@return static", "docstring_tokens": ["Start", "a", "new", "discussion", ".", "Raises", "the", "DiscussionWasStarted", "event", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Discussion/Discussion.php#L129-L142", "partition": "train"}
{"repo": "flarum/core", "path": "src/Discussion/Discussion.php", "func_name": "Discussion.rename", "original_string": "public function rename($title)\n    {\n        if ($this->title !== $title) {\n            $oldTitle = $this->title;\n            $this->title = $title;\n\n            $this->raise(new Renamed($this, $oldTitle));\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function rename($title)\n    {\n        if ($this->title !== $title) {\n            $oldTitle = $this->title;\n            $this->title = $title;\n\n            $this->raise(new Renamed($this, $oldTitle));\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "rename", "(", "$", "title", ")", "{", "if", "(", "$", "this", "->", "title", "!==", "$", "title", ")", "{", "$", "oldTitle", "=", "$", "this", "->", "title", ";", "$", "this", "->", "title", "=", "$", "title", ";", "$", "this", "->", "raise", "(", "new", "Renamed", "(", "$", "this", ",", "$", "oldTitle", ")", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Rename the discussion. Raises the DiscussionWasRenamed event.\n\n@param string $title\n@return $this", "docstring_tokens": ["Rename", "the", "discussion", ".", "Raises", "the", "DiscussionWasRenamed", "event", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Discussion/Discussion.php#L150-L160", "partition": "train"}
{"repo": "flarum/core", "path": "src/Discussion/Discussion.php", "func_name": "Discussion.hide", "original_string": "public function hide(User $actor = null)\n    {\n        if (! $this->hidden_at) {\n            $this->hidden_at = Carbon::now();\n            $this->hidden_user_id = $actor ? $actor->id : null;\n\n            $this->raise(new Hidden($this));\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function hide(User $actor = null)\n    {\n        if (! $this->hidden_at) {\n            $this->hidden_at = Carbon::now();\n            $this->hidden_user_id = $actor ? $actor->id : null;\n\n            $this->raise(new Hidden($this));\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "hide", "(", "User", "$", "actor", "=", "null", ")", "{", "if", "(", "!", "$", "this", "->", "hidden_at", ")", "{", "$", "this", "->", "hidden_at", "=", "Carbon", "::", "now", "(", ")", ";", "$", "this", "->", "hidden_user_id", "=", "$", "actor", "?", "$", "actor", "->", "id", ":", "null", ";", "$", "this", "->", "raise", "(", "new", "Hidden", "(", "$", "this", ")", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Hide the discussion.\n\n@param User $actor\n@return $this", "docstring_tokens": ["Hide", "the", "discussion", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Discussion/Discussion.php#L168-L178", "partition": "train"}
{"repo": "flarum/core", "path": "src/Discussion/Discussion.php", "func_name": "Discussion.restore", "original_string": "public function restore()\n    {\n        if ($this->hidden_at !== null) {\n            $this->hidden_at = null;\n            $this->hidden_user_id = null;\n\n            $this->raise(new Restored($this));\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function restore()\n    {\n        if ($this->hidden_at !== null) {\n            $this->hidden_at = null;\n            $this->hidden_user_id = null;\n\n            $this->raise(new Restored($this));\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "restore", "(", ")", "{", "if", "(", "$", "this", "->", "hidden_at", "!==", "null", ")", "{", "$", "this", "->", "hidden_at", "=", "null", ";", "$", "this", "->", "hidden_user_id", "=", "null", ";", "$", "this", "->", "raise", "(", "new", "Restored", "(", "$", "this", ")", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Restore the discussion.\n\n@return $this", "docstring_tokens": ["Restore", "the", "discussion", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Discussion/Discussion.php#L185-L195", "partition": "train"}
{"repo": "flarum/core", "path": "src/Discussion/Discussion.php", "func_name": "Discussion.setFirstPost", "original_string": "public function setFirstPost(Post $post)\n    {\n        $this->created_at = $post->created_at;\n        $this->user_id = $post->user_id;\n        $this->first_post_id = $post->id;\n\n        return $this;\n    }", "language": "php", "code": "public function setFirstPost(Post $post)\n    {\n        $this->created_at = $post->created_at;\n        $this->user_id = $post->user_id;\n        $this->first_post_id = $post->id;\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setFirstPost", "(", "Post", "$", "post", ")", "{", "$", "this", "->", "created_at", "=", "$", "post", "->", "created_at", ";", "$", "this", "->", "user_id", "=", "$", "post", "->", "user_id", ";", "$", "this", "->", "first_post_id", "=", "$", "post", "->", "id", ";", "return", "$", "this", ";", "}"], "docstring": "Set the discussion's first post details.\n\n@param Post $post\n@return $this", "docstring_tokens": ["Set", "the", "discussion", "s", "first", "post", "details", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Discussion/Discussion.php#L203-L210", "partition": "train"}
{"repo": "flarum/core", "path": "src/Discussion/Discussion.php", "func_name": "Discussion.setLastPost", "original_string": "public function setLastPost(Post $post)\n    {\n        $this->last_posted_at = $post->created_at;\n        $this->last_posted_user_id = $post->user_id;\n        $this->last_post_id = $post->id;\n        $this->last_post_number = $post->number;\n\n        return $this;\n    }", "language": "php", "code": "public function setLastPost(Post $post)\n    {\n        $this->last_posted_at = $post->created_at;\n        $this->last_posted_user_id = $post->user_id;\n        $this->last_post_id = $post->id;\n        $this->last_post_number = $post->number;\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setLastPost", "(", "Post", "$", "post", ")", "{", "$", "this", "->", "last_posted_at", "=", "$", "post", "->", "created_at", ";", "$", "this", "->", "last_posted_user_id", "=", "$", "post", "->", "user_id", ";", "$", "this", "->", "last_post_id", "=", "$", "post", "->", "id", ";", "$", "this", "->", "last_post_number", "=", "$", "post", "->", "number", ";", "return", "$", "this", ";", "}"], "docstring": "Set the discussion's last post details.\n\n@param Post $post\n@return $this", "docstring_tokens": ["Set", "the", "discussion", "s", "last", "post", "details", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Discussion/Discussion.php#L218-L226", "partition": "train"}
{"repo": "flarum/core", "path": "src/Discussion/Discussion.php", "func_name": "Discussion.refreshLastPost", "original_string": "public function refreshLastPost()\n    {\n        /** @var Post $lastPost */\n        if ($lastPost = $this->comments()->latest()->first()) {\n            $this->setLastPost($lastPost);\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function refreshLastPost()\n    {\n        /** @var Post $lastPost */\n        if ($lastPost = $this->comments()->latest()->first()) {\n            $this->setLastPost($lastPost);\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "refreshLastPost", "(", ")", "{", "if", "(", "$", "lastPost", "=", "$", "this", "->", "comments", "(", ")", "->", "latest", "(", ")", "->", "first", "(", ")", ")", "{", "$", "this", "->", "setLastPost", "(", "$", "lastPost", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Refresh a discussion's last post details.\n\n@return $this", "docstring_tokens": ["Refresh", "a", "discussion", "s", "last", "post", "details", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Discussion/Discussion.php#L233-L241", "partition": "train"}
{"repo": "flarum/core", "path": "src/Discussion/Discussion.php", "func_name": "Discussion.mergePost", "original_string": "public function mergePost(MergeableInterface $post)\n    {\n        $lastPost = $this->posts()->latest()->first();\n\n        $post = $post->saveAfter($lastPost);\n\n        return $this->modifiedPosts[] = $post;\n    }", "language": "php", "code": "public function mergePost(MergeableInterface $post)\n    {\n        $lastPost = $this->posts()->latest()->first();\n\n        $post = $post->saveAfter($lastPost);\n\n        return $this->modifiedPosts[] = $post;\n    }", "code_tokens": ["public", "function", "mergePost", "(", "MergeableInterface", "$", "post", ")", "{", "$", "lastPost", "=", "$", "this", "->", "posts", "(", ")", "->", "latest", "(", ")", "->", "first", "(", ")", ";", "$", "post", "=", "$", "post", "->", "saveAfter", "(", "$", "lastPost", ")", ";", "return", "$", "this", "->", "modifiedPosts", "[", "]", "=", "$", "post", ";", "}"], "docstring": "Save a post, attempting to merge it with the discussion's last post.\n\nThe merge logic is delegated to the new post. (As an example, a\nDiscussionRenamedPost will merge if adjacent to another\nDiscussionRenamedPost, and delete if the title has been reverted\ncompletely.)\n\n@param \\Flarum\\Post\\MergeableInterface $post The post to save.\n@return Post The resulting post. It may or may not be the same post as\nwas originally intended to be saved. It also may not exist, if the\nmerge logic resulted in deletion.", "docstring_tokens": ["Save", "a", "post", "attempting", "to", "merge", "it", "with", "the", "discussion", "s", "last", "post", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Discussion/Discussion.php#L280-L287", "partition": "train"}
{"repo": "flarum/core", "path": "src/Discussion/Discussion.php", "func_name": "Discussion.state", "original_string": "public function state(User $user = null)\n    {\n        $user = $user ?: static::$stateUser;\n\n        return $this->hasOne(UserState::class)->where('user_id', $user ? $user->id : null);\n    }", "language": "php", "code": "public function state(User $user = null)\n    {\n        $user = $user ?: static::$stateUser;\n\n        return $this->hasOne(UserState::class)->where('user_id', $user ? $user->id : null);\n    }", "code_tokens": ["public", "function", "state", "(", "User", "$", "user", "=", "null", ")", "{", "$", "user", "=", "$", "user", "?", ":", "static", "::", "$", "stateUser", ";", "return", "$", "this", "->", "hasOne", "(", "UserState", "::", "class", ")", "->", "where", "(", "'user_id'", ",", "$", "user", "?", "$", "user", "->", "id", ":", "null", ")", ";", "}"], "docstring": "Define the relationship with the discussion's state for a particular\nuser.\n\nIf no user is passed (i.e. in the case of eager loading the 'state'\nrelation), then the static `$stateUser` property is used.\n\n@see Discussion::setStateUser()\n\n@param User|null $user\n@return \\Illuminate\\Database\\Eloquent\\Relations\\HasOne", "docstring_tokens": ["Define", "the", "relationship", "with", "the", "discussion", "s", "state", "for", "a", "particular", "user", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Discussion/Discussion.php#L410-L415", "partition": "train"}
{"repo": "flarum/core", "path": "src/Discussion/Discussion.php", "func_name": "Discussion.setTitleAttribute", "original_string": "protected function setTitleAttribute($title)\n    {\n        $this->attributes['title'] = $title;\n        $this->slug = Str::slug($title);\n    }", "language": "php", "code": "protected function setTitleAttribute($title)\n    {\n        $this->attributes['title'] = $title;\n        $this->slug = Str::slug($title);\n    }", "code_tokens": ["protected", "function", "setTitleAttribute", "(", "$", "title", ")", "{", "$", "this", "->", "attributes", "[", "'title'", "]", "=", "$", "title", ";", "$", "this", "->", "slug", "=", "Str", "::", "slug", "(", "$", "title", ")", ";", "}"], "docstring": "Set the discussion title.\n\nThis automatically creates a matching slug for the discussion.\n\n@param string $title", "docstring_tokens": ["Set", "the", "discussion", "title", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Discussion/Discussion.php#L454-L458", "partition": "train"}
{"repo": "flarum/core", "path": "src/Database/AbstractModel.php", "func_name": "AbstractModel.getAttribute", "original_string": "public function getAttribute($key)\n    {\n        if (! is_null($value = parent::getAttribute($key))) {\n            return $value;\n        }\n\n        // If a custom relation with this key has been set up, then we will load\n        // and return results from the query and hydrate the relationship's\n        // value on the \"relationships\" array.\n        if (! $this->relationLoaded($key) && ($relation = $this->getCustomRelation($key))) {\n            if (! $relation instanceof Relation) {\n                throw new LogicException(\n                    'Relationship method must return an object of type '.Relation::class\n                );\n            }\n\n            return $this->relations[$key] = $relation->getResults();\n        }\n    }", "language": "php", "code": "public function getAttribute($key)\n    {\n        if (! is_null($value = parent::getAttribute($key))) {\n            return $value;\n        }\n\n        // If a custom relation with this key has been set up, then we will load\n        // and return results from the query and hydrate the relationship's\n        // value on the \"relationships\" array.\n        if (! $this->relationLoaded($key) && ($relation = $this->getCustomRelation($key))) {\n            if (! $relation instanceof Relation) {\n                throw new LogicException(\n                    'Relationship method must return an object of type '.Relation::class\n                );\n            }\n\n            return $this->relations[$key] = $relation->getResults();\n        }\n    }", "code_tokens": ["public", "function", "getAttribute", "(", "$", "key", ")", "{", "if", "(", "!", "is_null", "(", "$", "value", "=", "parent", "::", "getAttribute", "(", "$", "key", ")", ")", ")", "{", "return", "$", "value", ";", "}", "if", "(", "!", "$", "this", "->", "relationLoaded", "(", "$", "key", ")", "&&", "(", "$", "relation", "=", "$", "this", "->", "getCustomRelation", "(", "$", "key", ")", ")", ")", "{", "if", "(", "!", "$", "relation", "instanceof", "Relation", ")", "{", "throw", "new", "LogicException", "(", "'Relationship method must return an object of type '", ".", "Relation", "::", "class", ")", ";", "}", "return", "$", "this", "->", "relations", "[", "$", "key", "]", "=", "$", "relation", "->", "getResults", "(", ")", ";", "}", "}"], "docstring": "Get an attribute from the model. If nothing is found, attempt to load\na custom relation method with this key.\n\n@param string $key\n@return mixed", "docstring_tokens": ["Get", "an", "attribute", "from", "the", "model", ".", "If", "nothing", "is", "found", "attempt", "to", "load", "a", "custom", "relation", "method", "with", "this", "key", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Database/AbstractModel.php#L116-L134", "partition": "train"}
{"repo": "flarum/core", "path": "src/Database/MigrationCreator.php", "func_name": "MigrationCreator.create", "original_string": "public function create($name, $extension = null, $table = null, $create = false)\n    {\n        $migrationPath = $this->getMigrationPath($extension);\n\n        $path = $this->getPath($name, $migrationPath);\n\n        $stub = $this->getStub($table, $create);\n\n        $this->files->put($path, $this->populateStub($stub, $table));\n\n        return $path;\n    }", "language": "php", "code": "public function create($name, $extension = null, $table = null, $create = false)\n    {\n        $migrationPath = $this->getMigrationPath($extension);\n\n        $path = $this->getPath($name, $migrationPath);\n\n        $stub = $this->getStub($table, $create);\n\n        $this->files->put($path, $this->populateStub($stub, $table));\n\n        return $path;\n    }", "code_tokens": ["public", "function", "create", "(", "$", "name", ",", "$", "extension", "=", "null", ",", "$", "table", "=", "null", ",", "$", "create", "=", "false", ")", "{", "$", "migrationPath", "=", "$", "this", "->", "getMigrationPath", "(", "$", "extension", ")", ";", "$", "path", "=", "$", "this", "->", "getPath", "(", "$", "name", ",", "$", "migrationPath", ")", ";", "$", "stub", "=", "$", "this", "->", "getStub", "(", "$", "table", ",", "$", "create", ")", ";", "$", "this", "->", "files", "->", "put", "(", "$", "path", ",", "$", "this", "->", "populateStub", "(", "$", "stub", ",", "$", "table", ")", ")", ";", "return", "$", "path", ";", "}"], "docstring": "Create a new migration for the given extension.\n\n@param string $name\n@param Extension $extension\n@param string $table\n@param bool $create\n@return string", "docstring_tokens": ["Create", "a", "new", "migration", "for", "the", "given", "extension", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Database/MigrationCreator.php#L52-L63", "partition": "train"}
{"repo": "flarum/core", "path": "src/Console/AbstractCommand.php", "func_name": "AbstractCommand.error", "original_string": "protected function error($message)\n    {\n        if ($this->output instanceof ConsoleOutputInterface) {\n            $this->output->getErrorOutput()->writeln(\"<error>$message</error>\");\n        } else {\n            $this->output->writeln(\"<error>$message</error>\");\n        }\n    }", "language": "php", "code": "protected function error($message)\n    {\n        if ($this->output instanceof ConsoleOutputInterface) {\n            $this->output->getErrorOutput()->writeln(\"<error>$message</error>\");\n        } else {\n            $this->output->writeln(\"<error>$message</error>\");\n        }\n    }", "code_tokens": ["protected", "function", "error", "(", "$", "message", ")", "{", "if", "(", "$", "this", "->", "output", "instanceof", "ConsoleOutputInterface", ")", "{", "$", "this", "->", "output", "->", "getErrorOutput", "(", ")", "->", "writeln", "(", "\"<error>$message</error>\"", ")", ";", "}", "else", "{", "$", "this", "->", "output", "->", "writeln", "(", "\"<error>$message</error>\"", ")", ";", "}", "}"], "docstring": "Send an error or warning message to the user.\n\nIf possible, this will send the message via STDERR.\n\n@param string $message", "docstring_tokens": ["Send", "an", "error", "or", "warning", "message", "to", "the", "user", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Console/AbstractCommand.php#L75-L82", "partition": "train"}
{"repo": "flarum/core", "path": "src/Post/Post.php", "func_name": "Post.isVisibleTo", "original_string": "public function isVisibleTo(User $user)\n    {\n        return (bool) $this->newQuery()->whereVisibleTo($user)->find($this->id);\n    }", "language": "php", "code": "public function isVisibleTo(User $user)\n    {\n        return (bool) $this->newQuery()->whereVisibleTo($user)->find($this->id);\n    }", "code_tokens": ["public", "function", "isVisibleTo", "(", "User", "$", "user", ")", "{", "return", "(", "bool", ")", "$", "this", "->", "newQuery", "(", ")", "->", "whereVisibleTo", "(", "$", "user", ")", "->", "find", "(", "$", "this", "->", "id", ")", ";", "}"], "docstring": "Determine whether or not this post is visible to the given user.\n\n@param User $user\n@return bool", "docstring_tokens": ["Determine", "whether", "or", "not", "this", "post", "is", "visible", "to", "the", "given", "user", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Post/Post.php#L122-L125", "partition": "train"}
{"repo": "flarum/core", "path": "src/Post/Post.php", "func_name": "Post.newFromBuilder", "original_string": "public function newFromBuilder($attributes = [], $connection = null)\n    {\n        $attributes = (array) $attributes;\n\n        if (! empty($attributes['type'])\n            && isset(static::$models[$attributes['type']])\n            && class_exists($class = static::$models[$attributes['type']])\n        ) {\n            /** @var Post $instance */\n            $instance = new $class;\n            $instance->exists = true;\n            $instance->setRawAttributes($attributes, true);\n            $instance->setConnection($connection ?: $this->connection);\n\n            return $instance;\n        }\n\n        return parent::newFromBuilder($attributes, $connection);\n    }", "language": "php", "code": "public function newFromBuilder($attributes = [], $connection = null)\n    {\n        $attributes = (array) $attributes;\n\n        if (! empty($attributes['type'])\n            && isset(static::$models[$attributes['type']])\n            && class_exists($class = static::$models[$attributes['type']])\n        ) {\n            /** @var Post $instance */\n            $instance = new $class;\n            $instance->exists = true;\n            $instance->setRawAttributes($attributes, true);\n            $instance->setConnection($connection ?: $this->connection);\n\n            return $instance;\n        }\n\n        return parent::newFromBuilder($attributes, $connection);\n    }", "code_tokens": ["public", "function", "newFromBuilder", "(", "$", "attributes", "=", "[", "]", ",", "$", "connection", "=", "null", ")", "{", "$", "attributes", "=", "(", "array", ")", "$", "attributes", ";", "if", "(", "!", "empty", "(", "$", "attributes", "[", "'type'", "]", ")", "&&", "isset", "(", "static", "::", "$", "models", "[", "$", "attributes", "[", "'type'", "]", "]", ")", "&&", "class_exists", "(", "$", "class", "=", "static", "::", "$", "models", "[", "$", "attributes", "[", "'type'", "]", "]", ")", ")", "{", "$", "instance", "=", "new", "$", "class", ";", "$", "instance", "->", "exists", "=", "true", ";", "$", "instance", "->", "setRawAttributes", "(", "$", "attributes", ",", "true", ")", ";", "$", "instance", "->", "setConnection", "(", "$", "connection", "?", ":", "$", "this", "->", "connection", ")", ";", "return", "$", "instance", ";", "}", "return", "parent", "::", "newFromBuilder", "(", "$", "attributes", ",", "$", "connection", ")", ";", "}"], "docstring": "Create a new model instance according to the post's type.\n\n@param array $attributes\n@param string|null $connection\n@return static|object", "docstring_tokens": ["Create", "a", "new", "model", "instance", "according", "to", "the", "post", "s", "type", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Post/Post.php#L186-L204", "partition": "train"}
{"repo": "flarum/core", "path": "src/Extension/Extension.php", "func_name": "Extension.assignId", "original_string": "protected function assignId()\n    {\n        list($vendor, $package) = explode('/', $this->name);\n        $package = str_replace(['flarum-ext-', 'flarum-'], '', $package);\n        $this->id = \"$vendor-$package\";\n    }", "language": "php", "code": "protected function assignId()\n    {\n        list($vendor, $package) = explode('/', $this->name);\n        $package = str_replace(['flarum-ext-', 'flarum-'], '', $package);\n        $this->id = \"$vendor-$package\";\n    }", "code_tokens": ["protected", "function", "assignId", "(", ")", "{", "list", "(", "$", "vendor", ",", "$", "package", ")", "=", "explode", "(", "'/'", ",", "$", "this", "->", "name", ")", ";", "$", "package", "=", "str_replace", "(", "[", "'flarum-ext-'", ",", "'flarum-'", "]", ",", "''", ",", "$", "package", ")", ";", "$", "this", "->", "id", "=", "\"$vendor-$package\"", ";", "}"], "docstring": "Assigns the id for the extension used globally.", "docstring_tokens": ["Assigns", "the", "id", "for", "the", "extension", "used", "globally", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Extension/Extension.php#L107-L112", "partition": "train"}
{"repo": "flarum/core", "path": "src/Extension/Extension.php", "func_name": "Extension.getIcon", "original_string": "public function getIcon()\n    {\n        $icon = $this->composerJsonAttribute('extra.flarum-extension.icon');\n        $file = Arr::get($icon, 'image');\n\n        if (is_null($icon) || is_null($file)) {\n            return $icon;\n        }\n\n        $file = $this->path.'/'.$file;\n\n        if (file_exists($file)) {\n            $extension = pathinfo($file, PATHINFO_EXTENSION);\n            if (! array_key_exists($extension, self::LOGO_MIMETYPES)) {\n                throw new \\RuntimeException('Invalid image type');\n            }\n\n            $mimetype = self::LOGO_MIMETYPES[$extension];\n            $data = base64_encode(file_get_contents($file));\n\n            $icon['backgroundImage'] = \"url('data:$mimetype;base64,$data')\";\n        }\n\n        return $icon;\n    }", "language": "php", "code": "public function getIcon()\n    {\n        $icon = $this->composerJsonAttribute('extra.flarum-extension.icon');\n        $file = Arr::get($icon, 'image');\n\n        if (is_null($icon) || is_null($file)) {\n            return $icon;\n        }\n\n        $file = $this->path.'/'.$file;\n\n        if (file_exists($file)) {\n            $extension = pathinfo($file, PATHINFO_EXTENSION);\n            if (! array_key_exists($extension, self::LOGO_MIMETYPES)) {\n                throw new \\RuntimeException('Invalid image type');\n            }\n\n            $mimetype = self::LOGO_MIMETYPES[$extension];\n            $data = base64_encode(file_get_contents($file));\n\n            $icon['backgroundImage'] = \"url('data:$mimetype;base64,$data')\";\n        }\n\n        return $icon;\n    }", "code_tokens": ["public", "function", "getIcon", "(", ")", "{", "$", "icon", "=", "$", "this", "->", "composerJsonAttribute", "(", "'extra.flarum-extension.icon'", ")", ";", "$", "file", "=", "Arr", "::", "get", "(", "$", "icon", ",", "'image'", ")", ";", "if", "(", "is_null", "(", "$", "icon", ")", "||", "is_null", "(", "$", "file", ")", ")", "{", "return", "$", "icon", ";", "}", "$", "file", "=", "$", "this", "->", "path", ".", "'/'", ".", "$", "file", ";", "if", "(", "file_exists", "(", "$", "file", ")", ")", "{", "$", "extension", "=", "pathinfo", "(", "$", "file", ",", "PATHINFO_EXTENSION", ")", ";", "if", "(", "!", "array_key_exists", "(", "$", "extension", ",", "self", "::", "LOGO_MIMETYPES", ")", ")", "{", "throw", "new", "\\", "RuntimeException", "(", "'Invalid image type'", ")", ";", "}", "$", "mimetype", "=", "self", "::", "LOGO_MIMETYPES", "[", "$", "extension", "]", ";", "$", "data", "=", "base64_encode", "(", "file_get_contents", "(", "$", "file", ")", ")", ";", "$", "icon", "[", "'backgroundImage'", "]", "=", "\"url('data:$mimetype;base64,$data')\"", ";", "}", "return", "$", "icon", ";", "}"], "docstring": "Loads the icon information from the composer.json.\n\n@return array|null", "docstring_tokens": ["Loads", "the", "icon", "information", "from", "the", "composer", ".", "json", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Extension/Extension.php#L200-L224", "partition": "train"}
{"repo": "flarum/core", "path": "src/Extension/Extension.php", "func_name": "Extension.toArray", "original_string": "public function toArray()\n    {\n        return (array) array_merge([\n            'id'            => $this->getId(),\n            'version'       => $this->getVersion(),\n            'path'          => $this->path,\n            'icon'          => $this->getIcon(),\n            'hasAssets'     => $this->hasAssets(),\n            'hasMigrations' => $this->hasMigrations(),\n        ], $this->composerJson);\n    }", "language": "php", "code": "public function toArray()\n    {\n        return (array) array_merge([\n            'id'            => $this->getId(),\n            'version'       => $this->getVersion(),\n            'path'          => $this->path,\n            'icon'          => $this->getIcon(),\n            'hasAssets'     => $this->hasAssets(),\n            'hasMigrations' => $this->hasMigrations(),\n        ], $this->composerJson);\n    }", "code_tokens": ["public", "function", "toArray", "(", ")", "{", "return", "(", "array", ")", "array_merge", "(", "[", "'id'", "=>", "$", "this", "->", "getId", "(", ")", ",", "'version'", "=>", "$", "this", "->", "getVersion", "(", ")", ",", "'path'", "=>", "$", "this", "->", "path", ",", "'icon'", "=>", "$", "this", "->", "getIcon", "(", ")", ",", "'hasAssets'", "=>", "$", "this", "->", "hasAssets", "(", ")", ",", "'hasMigrations'", "=>", "$", "this", "->", "hasMigrations", "(", ")", ",", "]", ",", "$", "this", "->", "composerJson", ")", ";", "}"], "docstring": "Generates an array result for the object.\n\n@return array", "docstring_tokens": ["Generates", "an", "array", "result", "for", "the", "object", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Extension/Extension.php#L363-L373", "partition": "train"}
{"repo": "flarum/core", "path": "src/User/EmailConfirmationMailer.php", "func_name": "EmailConfirmationMailer.getEmailData", "original_string": "protected function getEmailData(User $user, $email)\n    {\n        $token = $this->generateToken($user, $email);\n\n        return [\n            '{username}' => $user->display_name,\n            '{url}' => $this->url->to('forum')->route('confirmEmail', ['token' => $token->token]),\n            '{forum}' => $this->settings->get('forum_title')\n        ];\n    }", "language": "php", "code": "protected function getEmailData(User $user, $email)\n    {\n        $token = $this->generateToken($user, $email);\n\n        return [\n            '{username}' => $user->display_name,\n            '{url}' => $this->url->to('forum')->route('confirmEmail', ['token' => $token->token]),\n            '{forum}' => $this->settings->get('forum_title')\n        ];\n    }", "code_tokens": ["protected", "function", "getEmailData", "(", "User", "$", "user", ",", "$", "email", ")", "{", "$", "token", "=", "$", "this", "->", "generateToken", "(", "$", "user", ",", "$", "email", ")", ";", "return", "[", "'{username}'", "=>", "$", "user", "->", "display_name", ",", "'{url}'", "=>", "$", "this", "->", "url", "->", "to", "(", "'forum'", ")", "->", "route", "(", "'confirmEmail'", ",", "[", "'token'", "=>", "$", "token", "->", "token", "]", ")", ",", "'{forum}'", "=>", "$", "this", "->", "settings", "->", "get", "(", "'forum_title'", ")", "]", ";", "}"], "docstring": "Get the data that should be made available to email templates.\n\n@param User $user\n@param string $email\n@return array", "docstring_tokens": ["Get", "the", "data", "that", "should", "be", "made", "available", "to", "email", "templates", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/User/EmailConfirmationMailer.php#L84-L93", "partition": "train"}
{"repo": "flarum/core", "path": "src/Group/Permission.php", "func_name": "Permission.map", "original_string": "public static function map()\n    {\n        $permissions = [];\n\n        foreach (static::get() as $permission) {\n            $permissions[$permission->permission][] = (string) $permission->group_id;\n        }\n\n        return $permissions;\n    }", "language": "php", "code": "public static function map()\n    {\n        $permissions = [];\n\n        foreach (static::get() as $permission) {\n            $permissions[$permission->permission][] = (string) $permission->group_id;\n        }\n\n        return $permissions;\n    }", "code_tokens": ["public", "static", "function", "map", "(", ")", "{", "$", "permissions", "=", "[", "]", ";", "foreach", "(", "static", "::", "get", "(", ")", "as", "$", "permission", ")", "{", "$", "permissions", "[", "$", "permission", "->", "permission", "]", "[", "]", "=", "(", "string", ")", "$", "permission", "->", "group_id", ";", "}", "return", "$", "permissions", ";", "}"], "docstring": "Get a map of permissions to the group IDs that have them.\n\n@return array[]", "docstring_tokens": ["Get", "a", "map", "of", "permissions", "to", "the", "group", "IDs", "that", "have", "them", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Group/Permission.php#L57-L66", "partition": "train"}
{"repo": "flarum/core", "path": "src/Forum/ForumServiceProvider.php", "func_name": "ForumServiceProvider.populateRoutes", "original_string": "protected function populateRoutes(RouteCollection $routes)\n    {\n        $factory = $this->app->make(RouteHandlerFactory::class);\n\n        $callback = include __DIR__.'/routes.php';\n        $callback($routes, $factory);\n\n        $this->app->make('events')->fire(\n            new ConfigureForumRoutes($routes, $factory)\n        );\n\n        $defaultRoute = $this->app->make('flarum.settings')->get('default_route');\n\n        if (isset($routes->getRouteData()[0]['GET'][$defaultRoute])) {\n            $toDefaultController = $routes->getRouteData()[0]['GET'][$defaultRoute];\n        } else {\n            $toDefaultController = $factory->toForum(Content\\Index::class);\n        }\n\n        $routes->get(\n            '/',\n            'default',\n            $toDefaultController\n        );\n    }", "language": "php", "code": "protected function populateRoutes(RouteCollection $routes)\n    {\n        $factory = $this->app->make(RouteHandlerFactory::class);\n\n        $callback = include __DIR__.'/routes.php';\n        $callback($routes, $factory);\n\n        $this->app->make('events')->fire(\n            new ConfigureForumRoutes($routes, $factory)\n        );\n\n        $defaultRoute = $this->app->make('flarum.settings')->get('default_route');\n\n        if (isset($routes->getRouteData()[0]['GET'][$defaultRoute])) {\n            $toDefaultController = $routes->getRouteData()[0]['GET'][$defaultRoute];\n        } else {\n            $toDefaultController = $factory->toForum(Content\\Index::class);\n        }\n\n        $routes->get(\n            '/',\n            'default',\n            $toDefaultController\n        );\n    }", "code_tokens": ["protected", "function", "populateRoutes", "(", "RouteCollection", "$", "routes", ")", "{", "$", "factory", "=", "$", "this", "->", "app", "->", "make", "(", "RouteHandlerFactory", "::", "class", ")", ";", "$", "callback", "=", "include", "__DIR__", ".", "'/routes.php'", ";", "$", "callback", "(", "$", "routes", ",", "$", "factory", ")", ";", "$", "this", "->", "app", "->", "make", "(", "'events'", ")", "->", "fire", "(", "new", "ConfigureForumRoutes", "(", "$", "routes", ",", "$", "factory", ")", ")", ";", "$", "defaultRoute", "=", "$", "this", "->", "app", "->", "make", "(", "'flarum.settings'", ")", "->", "get", "(", "'default_route'", ")", ";", "if", "(", "isset", "(", "$", "routes", "->", "getRouteData", "(", ")", "[", "0", "]", "[", "'GET'", "]", "[", "$", "defaultRoute", "]", ")", ")", "{", "$", "toDefaultController", "=", "$", "routes", "->", "getRouteData", "(", ")", "[", "0", "]", "[", "'GET'", "]", "[", "$", "defaultRoute", "]", ";", "}", "else", "{", "$", "toDefaultController", "=", "$", "factory", "->", "toForum", "(", "Content", "\\", "Index", "::", "class", ")", ";", "}", "$", "routes", "->", "get", "(", "'/'", ",", "'default'", ",", "$", "toDefaultController", ")", ";", "}"], "docstring": "Populate the forum client routes.\n\n@param RouteCollection $routes", "docstring_tokens": ["Populate", "the", "forum", "client", "routes", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Forum/ForumServiceProvider.php#L173-L197", "partition": "train"}
{"repo": "flarum/core", "path": "src/Notification/Notification.php", "func_name": "Notification.scopeWhereSubjectVisibleTo", "original_string": "public function scopeWhereSubjectVisibleTo(Builder $query, User $actor)\n    {\n        $query->where(function ($query) use ($actor) {\n            $classes = [];\n\n            foreach (static::$subjectModels as $type => $class) {\n                $classes[$class][] = $type;\n            }\n\n            foreach ($classes as $class => $types) {\n                $query->orWhere(function ($query) use ($types, $class, $actor) {\n                    $query->whereIn('type', $types)\n                        ->whereExists(function ($query) use ($class, $actor) {\n                            $query->selectRaw(1)\n                                ->from((new $class)->getTable())\n                                ->whereColumn('id', 'subject_id');\n\n                            static::$dispatcher->dispatch(\n                                new ScopeModelVisibility($class::query()->setQuery($query), $actor, 'view')\n                            );\n                        });\n                });\n            }\n        });\n    }", "language": "php", "code": "public function scopeWhereSubjectVisibleTo(Builder $query, User $actor)\n    {\n        $query->where(function ($query) use ($actor) {\n            $classes = [];\n\n            foreach (static::$subjectModels as $type => $class) {\n                $classes[$class][] = $type;\n            }\n\n            foreach ($classes as $class => $types) {\n                $query->orWhere(function ($query) use ($types, $class, $actor) {\n                    $query->whereIn('type', $types)\n                        ->whereExists(function ($query) use ($class, $actor) {\n                            $query->selectRaw(1)\n                                ->from((new $class)->getTable())\n                                ->whereColumn('id', 'subject_id');\n\n                            static::$dispatcher->dispatch(\n                                new ScopeModelVisibility($class::query()->setQuery($query), $actor, 'view')\n                            );\n                        });\n                });\n            }\n        });\n    }", "code_tokens": ["public", "function", "scopeWhereSubjectVisibleTo", "(", "Builder", "$", "query", ",", "User", "$", "actor", ")", "{", "$", "query", "->", "where", "(", "function", "(", "$", "query", ")", "use", "(", "$", "actor", ")", "{", "$", "classes", "=", "[", "]", ";", "foreach", "(", "static", "::", "$", "subjectModels", "as", "$", "type", "=>", "$", "class", ")", "{", "$", "classes", "[", "$", "class", "]", "[", "]", "=", "$", "type", ";", "}", "foreach", "(", "$", "classes", "as", "$", "class", "=>", "$", "types", ")", "{", "$", "query", "->", "orWhere", "(", "function", "(", "$", "query", ")", "use", "(", "$", "types", ",", "$", "class", ",", "$", "actor", ")", "{", "$", "query", "->", "whereIn", "(", "'type'", ",", "$", "types", ")", "->", "whereExists", "(", "function", "(", "$", "query", ")", "use", "(", "$", "class", ",", "$", "actor", ")", "{", "$", "query", "->", "selectRaw", "(", "1", ")", "->", "from", "(", "(", "new", "$", "class", ")", "->", "getTable", "(", ")", ")", "->", "whereColumn", "(", "'id'", ",", "'subject_id'", ")", ";", "static", "::", "$", "dispatcher", "->", "dispatch", "(", "new", "ScopeModelVisibility", "(", "$", "class", "::", "query", "(", ")", "->", "setQuery", "(", "$", "query", ")", ",", "$", "actor", ",", "'view'", ")", ")", ";", "}", ")", ";", "}", ")", ";", "}", "}", ")", ";", "}"], "docstring": "Scope the query to include only notifications whose subjects are visible\nto the given user.\n\n@param Builder $query", "docstring_tokens": ["Scope", "the", "query", "to", "include", "only", "notifications", "whose", "subjects", "are", "visible", "to", "the", "given", "user", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Notification/Notification.php#L146-L170", "partition": "train"}
{"repo": "flarum/core", "path": "src/Notification/Notification.php", "func_name": "Notification.scopeWhereSubject", "original_string": "public function scopeWhereSubject(Builder $query, $model)\n    {\n        $query->whereSubjectModel(get_class($model))\n            ->where('subject_id', $model->id);\n    }", "language": "php", "code": "public function scopeWhereSubject(Builder $query, $model)\n    {\n        $query->whereSubjectModel(get_class($model))\n            ->where('subject_id', $model->id);\n    }", "code_tokens": ["public", "function", "scopeWhereSubject", "(", "Builder", "$", "query", ",", "$", "model", ")", "{", "$", "query", "->", "whereSubjectModel", "(", "get_class", "(", "$", "model", ")", ")", "->", "where", "(", "'subject_id'", ",", "$", "model", "->", "id", ")", ";", "}"], "docstring": "Scope the query to include only notifications that have the given\nsubject.\n\n@param Builder $query\n@param object $model", "docstring_tokens": ["Scope", "the", "query", "to", "include", "only", "notifications", "that", "have", "the", "given", "subject", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Notification/Notification.php#L179-L183", "partition": "train"}
{"repo": "flarum/core", "path": "src/Notification/Notification.php", "func_name": "Notification.scopeWhereSubjectModel", "original_string": "public function scopeWhereSubjectModel(Builder $query, string $class)\n    {\n        $notificationTypes = array_filter(self::getSubjectModels(), function ($modelClass) use ($class) {\n            return $modelClass === $class or is_subclass_of($class, $modelClass);\n        });\n\n        $query->whereIn('type', array_keys($notificationTypes));\n    }", "language": "php", "code": "public function scopeWhereSubjectModel(Builder $query, string $class)\n    {\n        $notificationTypes = array_filter(self::getSubjectModels(), function ($modelClass) use ($class) {\n            return $modelClass === $class or is_subclass_of($class, $modelClass);\n        });\n\n        $query->whereIn('type', array_keys($notificationTypes));\n    }", "code_tokens": ["public", "function", "scopeWhereSubjectModel", "(", "Builder", "$", "query", ",", "string", "$", "class", ")", "{", "$", "notificationTypes", "=", "array_filter", "(", "self", "::", "getSubjectModels", "(", ")", ",", "function", "(", "$", "modelClass", ")", "use", "(", "$", "class", ")", "{", "return", "$", "modelClass", "===", "$", "class", "or", "is_subclass_of", "(", "$", "class", ",", "$", "modelClass", ")", ";", "}", ")", ";", "$", "query", "->", "whereIn", "(", "'type'", ",", "array_keys", "(", "$", "notificationTypes", ")", ")", ";", "}"], "docstring": "Scope the query to include only notification types that use the given\nsubject model.\n\n@param Builder $query\n@param string $class", "docstring_tokens": ["Scope", "the", "query", "to", "include", "only", "notification", "types", "that", "use", "the", "given", "subject", "model", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Notification/Notification.php#L192-L199", "partition": "train"}
{"repo": "flarum/core", "path": "src/User/EmailToken.php", "func_name": "EmailToken.generate", "original_string": "public static function generate($email, $userId)\n    {\n        $token = new static;\n\n        $token->token = str_random(40);\n        $token->user_id = $userId;\n        $token->email = $email;\n        $token->created_at = Carbon::now();\n\n        return $token;\n    }", "language": "php", "code": "public static function generate($email, $userId)\n    {\n        $token = new static;\n\n        $token->token = str_random(40);\n        $token->user_id = $userId;\n        $token->email = $email;\n        $token->created_at = Carbon::now();\n\n        return $token;\n    }", "code_tokens": ["public", "static", "function", "generate", "(", "$", "email", ",", "$", "userId", ")", "{", "$", "token", "=", "new", "static", ";", "$", "token", "->", "token", "=", "str_random", "(", "40", ")", ";", "$", "token", "->", "user_id", "=", "$", "userId", ";", "$", "token", "->", "email", "=", "$", "email", ";", "$", "token", "->", "created_at", "=", "Carbon", "::", "now", "(", ")", ";", "return", "$", "token", ";", "}"], "docstring": "Generate an email token for the specified user.\n\n@param string $email\n@param int $userId\n\n@return static", "docstring_tokens": ["Generate", "an", "email", "token", "for", "the", "specified", "user", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/User/EmailToken.php#L53-L63", "partition": "train"}
{"repo": "flarum/core", "path": "src/Database/Migration.php", "func_name": "Migration.addColumns", "original_string": "public static function addColumns($tableName, array $columnDefinitions)\n    {\n        return [\n            'up' => function (Builder $schema) use ($tableName, $columnDefinitions) {\n                $schema->table($tableName, function (Blueprint $table) use ($schema, $columnDefinitions) {\n                    foreach ($columnDefinitions as $columnName => $options) {\n                        $type = array_shift($options);\n                        $table->addColumn($type, $columnName, $options);\n                    }\n                });\n            },\n            'down' => function (Builder $schema) use ($tableName, $columnDefinitions) {\n                $schema->table($tableName, function (Blueprint $table) use ($columnDefinitions) {\n                    $table->dropColumn(array_keys($columnDefinitions));\n                });\n            }\n        ];\n    }", "language": "php", "code": "public static function addColumns($tableName, array $columnDefinitions)\n    {\n        return [\n            'up' => function (Builder $schema) use ($tableName, $columnDefinitions) {\n                $schema->table($tableName, function (Blueprint $table) use ($schema, $columnDefinitions) {\n                    foreach ($columnDefinitions as $columnName => $options) {\n                        $type = array_shift($options);\n                        $table->addColumn($type, $columnName, $options);\n                    }\n                });\n            },\n            'down' => function (Builder $schema) use ($tableName, $columnDefinitions) {\n                $schema->table($tableName, function (Blueprint $table) use ($columnDefinitions) {\n                    $table->dropColumn(array_keys($columnDefinitions));\n                });\n            }\n        ];\n    }", "code_tokens": ["public", "static", "function", "addColumns", "(", "$", "tableName", ",", "array", "$", "columnDefinitions", ")", "{", "return", "[", "'up'", "=>", "function", "(", "Builder", "$", "schema", ")", "use", "(", "$", "tableName", ",", "$", "columnDefinitions", ")", "{", "$", "schema", "->", "table", "(", "$", "tableName", ",", "function", "(", "Blueprint", "$", "table", ")", "use", "(", "$", "schema", ",", "$", "columnDefinitions", ")", "{", "foreach", "(", "$", "columnDefinitions", "as", "$", "columnName", "=>", "$", "options", ")", "{", "$", "type", "=", "array_shift", "(", "$", "options", ")", ";", "$", "table", "->", "addColumn", "(", "$", "type", ",", "$", "columnName", ",", "$", "options", ")", ";", "}", "}", ")", ";", "}", ",", "'down'", "=>", "function", "(", "Builder", "$", "schema", ")", "use", "(", "$", "tableName", ",", "$", "columnDefinitions", ")", "{", "$", "schema", "->", "table", "(", "$", "tableName", ",", "function", "(", "Blueprint", "$", "table", ")", "use", "(", "$", "columnDefinitions", ")", "{", "$", "table", "->", "dropColumn", "(", "array_keys", "(", "$", "columnDefinitions", ")", ")", ";", "}", ")", ";", "}", "]", ";", "}"], "docstring": "Add columns to a table.", "docstring_tokens": ["Add", "columns", "to", "a", "table", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Database/Migration.php#L60-L77", "partition": "train"}
{"repo": "flarum/core", "path": "src/Database/Migration.php", "func_name": "Migration.renameColumns", "original_string": "public static function renameColumns($tableName, array $columnNames)\n    {\n        return [\n            'up' => function (Builder $schema) use ($tableName, $columnNames) {\n                $schema->table($tableName, function (Blueprint $table) use ($columnNames) {\n                    foreach ($columnNames as $from => $to) {\n                        $table->renameColumn($from, $to);\n                    }\n                });\n            },\n            'down' => function (Builder $schema) use ($tableName, $columnNames) {\n                $schema->table($tableName, function (Blueprint $table) use ($columnNames) {\n                    foreach ($columnNames as $to => $from) {\n                        $table->renameColumn($from, $to);\n                    }\n                });\n            }\n        ];\n    }", "language": "php", "code": "public static function renameColumns($tableName, array $columnNames)\n    {\n        return [\n            'up' => function (Builder $schema) use ($tableName, $columnNames) {\n                $schema->table($tableName, function (Blueprint $table) use ($columnNames) {\n                    foreach ($columnNames as $from => $to) {\n                        $table->renameColumn($from, $to);\n                    }\n                });\n            },\n            'down' => function (Builder $schema) use ($tableName, $columnNames) {\n                $schema->table($tableName, function (Blueprint $table) use ($columnNames) {\n                    foreach ($columnNames as $to => $from) {\n                        $table->renameColumn($from, $to);\n                    }\n                });\n            }\n        ];\n    }", "code_tokens": ["public", "static", "function", "renameColumns", "(", "$", "tableName", ",", "array", "$", "columnNames", ")", "{", "return", "[", "'up'", "=>", "function", "(", "Builder", "$", "schema", ")", "use", "(", "$", "tableName", ",", "$", "columnNames", ")", "{", "$", "schema", "->", "table", "(", "$", "tableName", ",", "function", "(", "Blueprint", "$", "table", ")", "use", "(", "$", "columnNames", ")", "{", "foreach", "(", "$", "columnNames", "as", "$", "from", "=>", "$", "to", ")", "{", "$", "table", "->", "renameColumn", "(", "$", "from", ",", "$", "to", ")", ";", "}", "}", ")", ";", "}", ",", "'down'", "=>", "function", "(", "Builder", "$", "schema", ")", "use", "(", "$", "tableName", ",", "$", "columnNames", ")", "{", "$", "schema", "->", "table", "(", "$", "tableName", ",", "function", "(", "Blueprint", "$", "table", ")", "use", "(", "$", "columnNames", ")", "{", "foreach", "(", "$", "columnNames", "as", "$", "to", "=>", "$", "from", ")", "{", "$", "table", "->", "renameColumn", "(", "$", "from", ",", "$", "to", ")", ";", "}", "}", ")", ";", "}", "]", ";", "}"], "docstring": "Rename multiple columns.", "docstring_tokens": ["Rename", "multiple", "columns", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Database/Migration.php#L103-L121", "partition": "train"}
{"repo": "flarum/core", "path": "src/Database/Migration.php", "func_name": "Migration.addSettings", "original_string": "public static function addSettings(array $defaults)\n    {\n        return [\n            'up' => function (Builder $schema) use ($defaults) {\n                $settings = new DatabaseSettingsRepository(\n                    $schema->getConnection()\n                );\n\n                foreach ($defaults as $key => $value) {\n                    $settings->set($key, $value);\n                }\n            },\n            'down' => function (Builder $schema) use ($defaults) {\n                $settings = new DatabaseSettingsRepository(\n                    $schema->getConnection()\n                );\n\n                foreach (array_keys($defaults) as $key) {\n                    $settings->delete($key);\n                }\n            }\n        ];\n    }", "language": "php", "code": "public static function addSettings(array $defaults)\n    {\n        return [\n            'up' => function (Builder $schema) use ($defaults) {\n                $settings = new DatabaseSettingsRepository(\n                    $schema->getConnection()\n                );\n\n                foreach ($defaults as $key => $value) {\n                    $settings->set($key, $value);\n                }\n            },\n            'down' => function (Builder $schema) use ($defaults) {\n                $settings = new DatabaseSettingsRepository(\n                    $schema->getConnection()\n                );\n\n                foreach (array_keys($defaults) as $key) {\n                    $settings->delete($key);\n                }\n            }\n        ];\n    }", "code_tokens": ["public", "static", "function", "addSettings", "(", "array", "$", "defaults", ")", "{", "return", "[", "'up'", "=>", "function", "(", "Builder", "$", "schema", ")", "use", "(", "$", "defaults", ")", "{", "$", "settings", "=", "new", "DatabaseSettingsRepository", "(", "$", "schema", "->", "getConnection", "(", ")", ")", ";", "foreach", "(", "$", "defaults", "as", "$", "key", "=>", "$", "value", ")", "{", "$", "settings", "->", "set", "(", "$", "key", ",", "$", "value", ")", ";", "}", "}", ",", "'down'", "=>", "function", "(", "Builder", "$", "schema", ")", "use", "(", "$", "defaults", ")", "{", "$", "settings", "=", "new", "DatabaseSettingsRepository", "(", "$", "schema", "->", "getConnection", "(", ")", ")", ";", "foreach", "(", "array_keys", "(", "$", "defaults", ")", "as", "$", "key", ")", "{", "$", "settings", "->", "delete", "(", "$", "key", ")", ";", "}", "}", "]", ";", "}"], "docstring": "Add default values for config values.", "docstring_tokens": ["Add", "default", "values", "for", "config", "values", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Database/Migration.php#L126-L148", "partition": "train"}
{"repo": "flarum/core", "path": "src/Database/Migration.php", "func_name": "Migration.addPermissions", "original_string": "public static function addPermissions(array $permissions)\n    {\n        $rows = [];\n\n        foreach ($permissions as $permission => $groups) {\n            foreach ((array) $groups as $group) {\n                $rows[] = [\n                    'group_id' => $group,\n                    'permission' => $permission,\n                ];\n            }\n        }\n\n        return [\n            'up' => function (Builder $schema) use ($rows) {\n                $db = $schema->getConnection();\n\n                foreach ($rows as $row) {\n                    if ($db->table('group_permission')->where($row)->exists()) {\n                        continue;\n                    }\n\n                    if ($db->table('groups')->where('id', $row['group_id'])->doesntExist()) {\n                        continue;\n                    }\n\n                    $db->table('group_permission')->insert($row);\n                }\n            },\n\n            'down' => function (Builder $schema) use ($rows) {\n                $db = $schema->getConnection();\n\n                foreach ($rows as $row) {\n                    $db->table('group_permission')->where($row)->delete();\n                }\n            }\n        ];\n    }", "language": "php", "code": "public static function addPermissions(array $permissions)\n    {\n        $rows = [];\n\n        foreach ($permissions as $permission => $groups) {\n            foreach ((array) $groups as $group) {\n                $rows[] = [\n                    'group_id' => $group,\n                    'permission' => $permission,\n                ];\n            }\n        }\n\n        return [\n            'up' => function (Builder $schema) use ($rows) {\n                $db = $schema->getConnection();\n\n                foreach ($rows as $row) {\n                    if ($db->table('group_permission')->where($row)->exists()) {\n                        continue;\n                    }\n\n                    if ($db->table('groups')->where('id', $row['group_id'])->doesntExist()) {\n                        continue;\n                    }\n\n                    $db->table('group_permission')->insert($row);\n                }\n            },\n\n            'down' => function (Builder $schema) use ($rows) {\n                $db = $schema->getConnection();\n\n                foreach ($rows as $row) {\n                    $db->table('group_permission')->where($row)->delete();\n                }\n            }\n        ];\n    }", "code_tokens": ["public", "static", "function", "addPermissions", "(", "array", "$", "permissions", ")", "{", "$", "rows", "=", "[", "]", ";", "foreach", "(", "$", "permissions", "as", "$", "permission", "=>", "$", "groups", ")", "{", "foreach", "(", "(", "array", ")", "$", "groups", "as", "$", "group", ")", "{", "$", "rows", "[", "]", "=", "[", "'group_id'", "=>", "$", "group", ",", "'permission'", "=>", "$", "permission", ",", "]", ";", "}", "}", "return", "[", "'up'", "=>", "function", "(", "Builder", "$", "schema", ")", "use", "(", "$", "rows", ")", "{", "$", "db", "=", "$", "schema", "->", "getConnection", "(", ")", ";", "foreach", "(", "$", "rows", "as", "$", "row", ")", "{", "if", "(", "$", "db", "->", "table", "(", "'group_permission'", ")", "->", "where", "(", "$", "row", ")", "->", "exists", "(", ")", ")", "{", "continue", ";", "}", "if", "(", "$", "db", "->", "table", "(", "'groups'", ")", "->", "where", "(", "'id'", ",", "$", "row", "[", "'group_id'", "]", ")", "->", "doesntExist", "(", ")", ")", "{", "continue", ";", "}", "$", "db", "->", "table", "(", "'group_permission'", ")", "->", "insert", "(", "$", "row", ")", ";", "}", "}", ",", "'down'", "=>", "function", "(", "Builder", "$", "schema", ")", "use", "(", "$", "rows", ")", "{", "$", "db", "=", "$", "schema", "->", "getConnection", "(", ")", ";", "foreach", "(", "$", "rows", "as", "$", "row", ")", "{", "$", "db", "->", "table", "(", "'group_permission'", ")", "->", "where", "(", "$", "row", ")", "->", "delete", "(", ")", ";", "}", "}", "]", ";", "}"], "docstring": "Add default permissions.", "docstring_tokens": ["Add", "default", "permissions", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Database/Migration.php#L153-L191", "partition": "train"}
{"repo": "flarum/core", "path": "src/Formatter/Formatter.php", "func_name": "Formatter.parse", "original_string": "public function parse($text, $context = null)\n    {\n        $parser = $this->getParser($context);\n\n        $this->events->dispatch(new Parsing($parser, $context, $text));\n\n        return $parser->parse($text);\n    }", "language": "php", "code": "public function parse($text, $context = null)\n    {\n        $parser = $this->getParser($context);\n\n        $this->events->dispatch(new Parsing($parser, $context, $text));\n\n        return $parser->parse($text);\n    }", "code_tokens": ["public", "function", "parse", "(", "$", "text", ",", "$", "context", "=", "null", ")", "{", "$", "parser", "=", "$", "this", "->", "getParser", "(", "$", "context", ")", ";", "$", "this", "->", "events", "->", "dispatch", "(", "new", "Parsing", "(", "$", "parser", ",", "$", "context", ",", "$", "text", ")", ")", ";", "return", "$", "parser", "->", "parse", "(", "$", "text", ")", ";", "}"], "docstring": "Parse text.\n\n@param string $text\n@param mixed $context\n@return string", "docstring_tokens": ["Parse", "text", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Formatter/Formatter.php#L59-L66", "partition": "train"}
{"repo": "flarum/core", "path": "src/Formatter/Formatter.php", "func_name": "Formatter.render", "original_string": "public function render($xml, $context = null, ServerRequestInterface $request = null)\n    {\n        $renderer = $this->getRenderer();\n\n        $this->events->dispatch(new Rendering($renderer, $context, $xml, $request));\n\n        return $renderer->render($xml);\n    }", "language": "php", "code": "public function render($xml, $context = null, ServerRequestInterface $request = null)\n    {\n        $renderer = $this->getRenderer();\n\n        $this->events->dispatch(new Rendering($renderer, $context, $xml, $request));\n\n        return $renderer->render($xml);\n    }", "code_tokens": ["public", "function", "render", "(", "$", "xml", ",", "$", "context", "=", "null", ",", "ServerRequestInterface", "$", "request", "=", "null", ")", "{", "$", "renderer", "=", "$", "this", "->", "getRenderer", "(", ")", ";", "$", "this", "->", "events", "->", "dispatch", "(", "new", "Rendering", "(", "$", "renderer", ",", "$", "context", ",", "$", "xml", ",", "$", "request", ")", ")", ";", "return", "$", "renderer", "->", "render", "(", "$", "xml", ")", ";", "}"], "docstring": "Render parsed XML.\n\n@param string $xml\n@param mixed $context\n@param ServerRequestInterface|null $request\n@return string", "docstring_tokens": ["Render", "parsed", "XML", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Formatter/Formatter.php#L76-L83", "partition": "train"}
{"repo": "flarum/core", "path": "src/Formatter/Formatter.php", "func_name": "Formatter.getComponent", "original_string": "protected function getComponent($name)\n    {\n        $formatter = $this->cache->rememberForever('flarum.formatter', function () {\n            return $this->getConfigurator()->finalize();\n        });\n\n        return $formatter[$name];\n    }", "language": "php", "code": "protected function getComponent($name)\n    {\n        $formatter = $this->cache->rememberForever('flarum.formatter', function () {\n            return $this->getConfigurator()->finalize();\n        });\n\n        return $formatter[$name];\n    }", "code_tokens": ["protected", "function", "getComponent", "(", "$", "name", ")", "{", "$", "formatter", "=", "$", "this", "->", "cache", "->", "rememberForever", "(", "'flarum.formatter'", ",", "function", "(", ")", "{", "return", "$", "this", "->", "getConfigurator", "(", ")", "->", "finalize", "(", ")", ";", "}", ")", ";", "return", "$", "formatter", "[", "$", "name", "]", ";", "}"], "docstring": "Get a TextFormatter component.\n\n@param string $name \"renderer\" or \"parser\" or \"js\"\n@return mixed", "docstring_tokens": ["Get", "a", "TextFormatter", "component", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Formatter/Formatter.php#L155-L162", "partition": "train"}
{"repo": "flarum/core", "path": "src/Api/Serializer/AbstractSerializer.php", "func_name": "AbstractSerializer.getCustomRelationship", "original_string": "protected function getCustomRelationship($model, $name)\n    {\n        $relationship = static::$dispatcher->until(\n            new GetApiRelationship($this, $name, $model)\n        );\n\n        if ($relationship && ! ($relationship instanceof Relationship)) {\n            throw new LogicException(\n                'GetApiRelationship handler must return an instance of '.Relationship::class\n            );\n        }\n\n        return $relationship;\n    }", "language": "php", "code": "protected function getCustomRelationship($model, $name)\n    {\n        $relationship = static::$dispatcher->until(\n            new GetApiRelationship($this, $name, $model)\n        );\n\n        if ($relationship && ! ($relationship instanceof Relationship)) {\n            throw new LogicException(\n                'GetApiRelationship handler must return an instance of '.Relationship::class\n            );\n        }\n\n        return $relationship;\n    }", "code_tokens": ["protected", "function", "getCustomRelationship", "(", "$", "model", ",", "$", "name", ")", "{", "$", "relationship", "=", "static", "::", "$", "dispatcher", "->", "until", "(", "new", "GetApiRelationship", "(", "$", "this", ",", "$", "name", ",", "$", "model", ")", ")", ";", "if", "(", "$", "relationship", "&&", "!", "(", "$", "relationship", "instanceof", "Relationship", ")", ")", "{", "throw", "new", "LogicException", "(", "'GetApiRelationship handler must return an instance of '", ".", "Relationship", "::", "class", ")", ";", "}", "return", "$", "relationship", ";", "}"], "docstring": "Get a custom relationship.\n\n@param mixed $model\n@param string $name\n@return Relationship|null", "docstring_tokens": ["Get", "a", "custom", "relationship", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Api/Serializer/AbstractSerializer.php#L133-L146", "partition": "train"}
{"repo": "flarum/core", "path": "src/Api/Serializer/AbstractSerializer.php", "func_name": "AbstractSerializer.hasOne", "original_string": "public function hasOne($model, $serializer, $relation = null)\n    {\n        return $this->buildRelationship($model, $serializer, $relation);\n    }", "language": "php", "code": "public function hasOne($model, $serializer, $relation = null)\n    {\n        return $this->buildRelationship($model, $serializer, $relation);\n    }", "code_tokens": ["public", "function", "hasOne", "(", "$", "model", ",", "$", "serializer", ",", "$", "relation", "=", "null", ")", "{", "return", "$", "this", "->", "buildRelationship", "(", "$", "model", ",", "$", "serializer", ",", "$", "relation", ")", ";", "}"], "docstring": "Get a relationship builder for a has-one relationship.\n\n@param mixed $model\n@param string|Closure|\\Tobscure\\JsonApi\\SerializerInterface $serializer\n@param string|Closure|null $relation\n@return Relationship", "docstring_tokens": ["Get", "a", "relationship", "builder", "for", "a", "has", "-", "one", "relationship", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Api/Serializer/AbstractSerializer.php#L156-L159", "partition": "train"}
{"repo": "flarum/core", "path": "src/Api/Serializer/AbstractSerializer.php", "func_name": "AbstractSerializer.hasMany", "original_string": "public function hasMany($model, $serializer, $relation = null)\n    {\n        return $this->buildRelationship($model, $serializer, $relation, true);\n    }", "language": "php", "code": "public function hasMany($model, $serializer, $relation = null)\n    {\n        return $this->buildRelationship($model, $serializer, $relation, true);\n    }", "code_tokens": ["public", "function", "hasMany", "(", "$", "model", ",", "$", "serializer", ",", "$", "relation", "=", "null", ")", "{", "return", "$", "this", "->", "buildRelationship", "(", "$", "model", ",", "$", "serializer", ",", "$", "relation", ",", "true", ")", ";", "}"], "docstring": "Get a relationship builder for a has-many relationship.\n\n@param mixed $model\n@param string|Closure|\\Tobscure\\JsonApi\\SerializerInterface $serializer\n@param string|null $relation\n@return Relationship", "docstring_tokens": ["Get", "a", "relationship", "builder", "for", "a", "has", "-", "many", "relationship", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Api/Serializer/AbstractSerializer.php#L169-L172", "partition": "train"}
{"repo": "flarum/core", "path": "src/Search/ApplySearchParametersTrait.php", "func_name": "ApplySearchParametersTrait.applySort", "original_string": "protected function applySort(AbstractSearch $search, array $sort = null)\n    {\n        $sort = $sort ?: $search->getDefaultSort();\n\n        if (is_callable($sort)) {\n            $sort($search->getQuery());\n        } else {\n            foreach ($sort as $field => $order) {\n                if (is_array($order)) {\n                    foreach ($order as $value) {\n                        $search->getQuery()->orderByRaw(snake_case($field).' != ?', [$value]);\n                    }\n                } else {\n                    $search->getQuery()->orderBy(snake_case($field), $order);\n                }\n            }\n        }\n    }", "language": "php", "code": "protected function applySort(AbstractSearch $search, array $sort = null)\n    {\n        $sort = $sort ?: $search->getDefaultSort();\n\n        if (is_callable($sort)) {\n            $sort($search->getQuery());\n        } else {\n            foreach ($sort as $field => $order) {\n                if (is_array($order)) {\n                    foreach ($order as $value) {\n                        $search->getQuery()->orderByRaw(snake_case($field).' != ?', [$value]);\n                    }\n                } else {\n                    $search->getQuery()->orderBy(snake_case($field), $order);\n                }\n            }\n        }\n    }", "code_tokens": ["protected", "function", "applySort", "(", "AbstractSearch", "$", "search", ",", "array", "$", "sort", "=", "null", ")", "{", "$", "sort", "=", "$", "sort", "?", ":", "$", "search", "->", "getDefaultSort", "(", ")", ";", "if", "(", "is_callable", "(", "$", "sort", ")", ")", "{", "$", "sort", "(", "$", "search", "->", "getQuery", "(", ")", ")", ";", "}", "else", "{", "foreach", "(", "$", "sort", "as", "$", "field", "=>", "$", "order", ")", "{", "if", "(", "is_array", "(", "$", "order", ")", ")", "{", "foreach", "(", "$", "order", "as", "$", "value", ")", "{", "$", "search", "->", "getQuery", "(", ")", "->", "orderByRaw", "(", "snake_case", "(", "$", "field", ")", ".", "' != ?'", ",", "[", "$", "value", "]", ")", ";", "}", "}", "else", "{", "$", "search", "->", "getQuery", "(", ")", "->", "orderBy", "(", "snake_case", "(", "$", "field", ")", ",", "$", "order", ")", ";", "}", "}", "}", "}"], "docstring": "Apply sort criteria to a discussion search.\n\n@param AbstractSearch $search\n@param array $sort", "docstring_tokens": ["Apply", "sort", "criteria", "to", "a", "discussion", "search", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Search/ApplySearchParametersTrait.php#L22-L39", "partition": "train"}
{"repo": "flarum/core", "path": "src/Post/CommentPost.php", "func_name": "CommentPost.revise", "original_string": "public function revise($content, User $actor)\n    {\n        if ($this->content !== $content) {\n            $this->content = $content;\n\n            $this->edited_at = Carbon::now();\n            $this->edited_user_id = $actor->id;\n\n            $this->raise(new Revised($this));\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function revise($content, User $actor)\n    {\n        if ($this->content !== $content) {\n            $this->content = $content;\n\n            $this->edited_at = Carbon::now();\n            $this->edited_user_id = $actor->id;\n\n            $this->raise(new Revised($this));\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "revise", "(", "$", "content", ",", "User", "$", "actor", ")", "{", "if", "(", "$", "this", "->", "content", "!==", "$", "content", ")", "{", "$", "this", "->", "content", "=", "$", "content", ";", "$", "this", "->", "edited_at", "=", "Carbon", "::", "now", "(", ")", ";", "$", "this", "->", "edited_user_id", "=", "$", "actor", "->", "id", ";", "$", "this", "->", "raise", "(", "new", "Revised", "(", "$", "this", ")", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Revise the post's content.\n\n@param string $content\n@param User $actor\n@return $this", "docstring_tokens": ["Revise", "the", "post", "s", "content", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Post/CommentPost.php#L76-L88", "partition": "train"}
{"repo": "flarum/core", "path": "src/Post/CommentPost.php", "func_name": "CommentPost.setContentAttribute", "original_string": "public function setContentAttribute($value)\n    {\n        $this->attributes['content'] = $value ? static::$formatter->parse($value, $this) : null;\n    }", "language": "php", "code": "public function setContentAttribute($value)\n    {\n        $this->attributes['content'] = $value ? static::$formatter->parse($value, $this) : null;\n    }", "code_tokens": ["public", "function", "setContentAttribute", "(", "$", "value", ")", "{", "$", "this", "->", "attributes", "[", "'content'", "]", "=", "$", "value", "?", "static", "::", "$", "formatter", "->", "parse", "(", "$", "value", ",", "$", "this", ")", ":", "null", ";", "}"], "docstring": "Parse the content before it is saved to the database.\n\n@param string $value", "docstring_tokens": ["Parse", "the", "content", "before", "it", "is", "saved", "to", "the", "database", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Post/CommentPost.php#L151-L154", "partition": "train"}
{"repo": "flarum/core", "path": "src/Database/Migrator.php", "func_name": "Migrator.runClosureMigration", "original_string": "protected function runClosureMigration($migration, $direction = 'up')\n    {\n        if (is_array($migration) && array_key_exists($direction, $migration)) {\n            call_user_func($migration[$direction], $this->schemaBuilder);\n        } else {\n            throw new Exception('Migration file should contain an array with up/down.');\n        }\n    }", "language": "php", "code": "protected function runClosureMigration($migration, $direction = 'up')\n    {\n        if (is_array($migration) && array_key_exists($direction, $migration)) {\n            call_user_func($migration[$direction], $this->schemaBuilder);\n        } else {\n            throw new Exception('Migration file should contain an array with up/down.');\n        }\n    }", "code_tokens": ["protected", "function", "runClosureMigration", "(", "$", "migration", ",", "$", "direction", "=", "'up'", ")", "{", "if", "(", "is_array", "(", "$", "migration", ")", "&&", "array_key_exists", "(", "$", "direction", ",", "$", "migration", ")", ")", "{", "call_user_func", "(", "$", "migration", "[", "$", "direction", "]", ",", "$", "this", "->", "schemaBuilder", ")", ";", "}", "else", "{", "throw", "new", "Exception", "(", "'Migration file should contain an array with up/down.'", ")", ";", "}", "}"], "docstring": "Runs a closure migration based on the migrate direction.\n\n@param        $migration\n@param string $direction\n@throws Exception", "docstring_tokens": ["Runs", "a", "closure", "migration", "based", "on", "the", "migrate", "direction", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Database/Migrator.php#L196-L203", "partition": "train"}
{"repo": "flarum/core", "path": "src/User/LoginProvider.php", "func_name": "LoginProvider.logIn", "original_string": "public static function logIn(string $provider, string $identifier): ?User\n    {\n        if ($provider = static::where(compact('provider', 'identifier'))->first()) {\n            $provider->touch();\n\n            return $provider->user;\n        }\n\n        return null;\n    }", "language": "php", "code": "public static function logIn(string $provider, string $identifier): ?User\n    {\n        if ($provider = static::where(compact('provider', 'identifier'))->first()) {\n            $provider->touch();\n\n            return $provider->user;\n        }\n\n        return null;\n    }", "code_tokens": ["public", "static", "function", "logIn", "(", "string", "$", "provider", ",", "string", "$", "identifier", ")", ":", "?", "User", "{", "if", "(", "$", "provider", "=", "static", "::", "where", "(", "compact", "(", "'provider'", ",", "'identifier'", ")", ")", "->", "first", "(", ")", ")", "{", "$", "provider", "->", "touch", "(", ")", ";", "return", "$", "provider", "->", "user", ";", "}", "return", "null", ";", "}"], "docstring": "Get the user associated with the provider so that they can be logged in.\n\n@param string $provider\n@param string $identifier\n@return User|null", "docstring_tokens": ["Get", "the", "user", "associated", "with", "the", "provider", "so", "that", "they", "can", "be", "logged", "in", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/User/LoginProvider.php#L50-L59", "partition": "train"}
{"repo": "flarum/core", "path": "src/Api/Client.php", "func_name": "Client.send", "original_string": "public function send($controller, User $actor = null, array $queryParams = [], array $body = []): ResponseInterface\n    {\n        $request = ServerRequestFactory::fromGlobals(null, $queryParams, $body);\n\n        $request = $request->withAttribute('actor', $actor);\n\n        if (is_string($controller)) {\n            $controller = $this->container->make($controller);\n        }\n\n        if (! ($controller instanceof RequestHandlerInterface)) {\n            throw new InvalidArgumentException(\n                'Endpoint must be an instance of '.RequestHandlerInterface::class\n            );\n        }\n\n        try {\n            return $controller->handle($request);\n        } catch (Exception $e) {\n            if (! $this->errorHandler) {\n                throw $e;\n            }\n\n            return $this->errorHandler->handle($e);\n        }\n    }", "language": "php", "code": "public function send($controller, User $actor = null, array $queryParams = [], array $body = []): ResponseInterface\n    {\n        $request = ServerRequestFactory::fromGlobals(null, $queryParams, $body);\n\n        $request = $request->withAttribute('actor', $actor);\n\n        if (is_string($controller)) {\n            $controller = $this->container->make($controller);\n        }\n\n        if (! ($controller instanceof RequestHandlerInterface)) {\n            throw new InvalidArgumentException(\n                'Endpoint must be an instance of '.RequestHandlerInterface::class\n            );\n        }\n\n        try {\n            return $controller->handle($request);\n        } catch (Exception $e) {\n            if (! $this->errorHandler) {\n                throw $e;\n            }\n\n            return $this->errorHandler->handle($e);\n        }\n    }", "code_tokens": ["public", "function", "send", "(", "$", "controller", ",", "User", "$", "actor", "=", "null", ",", "array", "$", "queryParams", "=", "[", "]", ",", "array", "$", "body", "=", "[", "]", ")", ":", "ResponseInterface", "{", "$", "request", "=", "ServerRequestFactory", "::", "fromGlobals", "(", "null", ",", "$", "queryParams", ",", "$", "body", ")", ";", "$", "request", "=", "$", "request", "->", "withAttribute", "(", "'actor'", ",", "$", "actor", ")", ";", "if", "(", "is_string", "(", "$", "controller", ")", ")", "{", "$", "controller", "=", "$", "this", "->", "container", "->", "make", "(", "$", "controller", ")", ";", "}", "if", "(", "!", "(", "$", "controller", "instanceof", "RequestHandlerInterface", ")", ")", "{", "throw", "new", "InvalidArgumentException", "(", "'Endpoint must be an instance of '", ".", "RequestHandlerInterface", "::", "class", ")", ";", "}", "try", "{", "return", "$", "controller", "->", "handle", "(", "$", "request", ")", ";", "}", "catch", "(", "Exception", "$", "e", ")", "{", "if", "(", "!", "$", "this", "->", "errorHandler", ")", "{", "throw", "$", "e", ";", "}", "return", "$", "this", "->", "errorHandler", "->", "handle", "(", "$", "e", ")", ";", "}", "}"], "docstring": "Execute the given API action class, pass the input and return its response.\n\n@param string|RequestHandlerInterface $controller\n@param User|null $actor\n@param array $queryParams\n@param array $body\n@return ResponseInterface\n@throws Exception", "docstring_tokens": ["Execute", "the", "given", "API", "action", "class", "pass", "the", "input", "and", "return", "its", "response", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Api/Client.php#L54-L79", "partition": "train"}
{"repo": "flarum/core", "path": "src/Group/GroupRepository.php", "func_name": "GroupRepository.findOrFail", "original_string": "public function findOrFail($id, User $actor = null)\n    {\n        $query = Group::where('id', $id);\n\n        return $this->scopeVisibleTo($query, $actor)->firstOrFail();\n    }", "language": "php", "code": "public function findOrFail($id, User $actor = null)\n    {\n        $query = Group::where('id', $id);\n\n        return $this->scopeVisibleTo($query, $actor)->firstOrFail();\n    }", "code_tokens": ["public", "function", "findOrFail", "(", "$", "id", ",", "User", "$", "actor", "=", "null", ")", "{", "$", "query", "=", "Group", "::", "where", "(", "'id'", ",", "$", "id", ")", ";", "return", "$", "this", "->", "scopeVisibleTo", "(", "$", "query", ",", "$", "actor", ")", "->", "firstOrFail", "(", ")", ";", "}"], "docstring": "Find a user by ID, optionally making sure it is visible to a certain\nuser, or throw an exception.\n\n@param int $id\n@param User $actor\n@return \\Flarum\\Group\\Group\n\n@throws \\Illuminate\\Database\\Eloquent\\ModelNotFoundException", "docstring_tokens": ["Find", "a", "user", "by", "ID", "optionally", "making", "sure", "it", "is", "visible", "to", "a", "certain", "user", "or", "throw", "an", "exception", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Group/GroupRepository.php#L39-L44", "partition": "train"}
{"repo": "flarum/core", "path": "src/Group/GroupRepository.php", "func_name": "GroupRepository.findByName", "original_string": "public function findByName($name, User $actor = null)\n    {\n        $query = Group::where('name_singular', $name)->orWhere('name_plural', $name);\n\n        return $this->scopeVisibleTo($query, $actor)->first();\n    }", "language": "php", "code": "public function findByName($name, User $actor = null)\n    {\n        $query = Group::where('name_singular', $name)->orWhere('name_plural', $name);\n\n        return $this->scopeVisibleTo($query, $actor)->first();\n    }", "code_tokens": ["public", "function", "findByName", "(", "$", "name", ",", "User", "$", "actor", "=", "null", ")", "{", "$", "query", "=", "Group", "::", "where", "(", "'name_singular'", ",", "$", "name", ")", "->", "orWhere", "(", "'name_plural'", ",", "$", "name", ")", ";", "return", "$", "this", "->", "scopeVisibleTo", "(", "$", "query", ",", "$", "actor", ")", "->", "first", "(", ")", ";", "}"], "docstring": "Find a group by name.\n\n@param string $name\n@return User|null", "docstring_tokens": ["Find", "a", "group", "by", "name", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Group/GroupRepository.php#L52-L57", "partition": "train"}
{"repo": "flarum/core", "path": "src/Util/Str.php", "func_name": "Str.slug", "original_string": "public static function slug($str)\n    {\n        $str = strtolower($str);\n        $str = preg_replace('/[^a-z0-9]/i', '-', $str);\n        $str = preg_replace('/-+/', '-', $str);\n        $str = preg_replace('/-$|^-/', '', $str);\n\n        return $str;\n    }", "language": "php", "code": "public static function slug($str)\n    {\n        $str = strtolower($str);\n        $str = preg_replace('/[^a-z0-9]/i', '-', $str);\n        $str = preg_replace('/-+/', '-', $str);\n        $str = preg_replace('/-$|^-/', '', $str);\n\n        return $str;\n    }", "code_tokens": ["public", "static", "function", "slug", "(", "$", "str", ")", "{", "$", "str", "=", "strtolower", "(", "$", "str", ")", ";", "$", "str", "=", "preg_replace", "(", "'/[^a-z0-9]/i'", ",", "'-'", ",", "$", "str", ")", ";", "$", "str", "=", "preg_replace", "(", "'/-+/'", ",", "'-'", ",", "$", "str", ")", ";", "$", "str", "=", "preg_replace", "(", "'/-$|^-/'", ",", "''", ",", "$", "str", ")", ";", "return", "$", "str", ";", "}"], "docstring": "Create a slug out of the given string.\n\nNon-alphanumeric characters are converted to hyphens.\n\n@param string $str\n@return string", "docstring_tokens": ["Create", "a", "slug", "out", "of", "the", "given", "string", "."], "sha": "99a6066f96899c15145eff80bb3ad3e97ff24c29", "url": "https://github.com/flarum/core/blob/99a6066f96899c15145eff80bb3ad3e97ff24c29/src/Util/Str.php#L24-L32", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Date.php", "func_name": "Date.autoDetectTimeZone", "original_string": "protected function autoDetectTimeZone($object, $originalObject = null)\n    {\n        /** @var CarbonTimeZone $timezone */\n        $timezone = CarbonTimeZone::instance($object);\n        if ($timezone && is_int($originalObject ?: $object)) {\n            $timezone = $timezone->toRegionTimeZone($this);\n        }\n\n        return $timezone;\n    }", "language": "php", "code": "protected function autoDetectTimeZone($object, $originalObject = null)\n    {\n        /** @var CarbonTimeZone $timezone */\n        $timezone = CarbonTimeZone::instance($object);\n        if ($timezone && is_int($originalObject ?: $object)) {\n            $timezone = $timezone->toRegionTimeZone($this);\n        }\n\n        return $timezone;\n    }", "code_tokens": ["protected", "function", "autoDetectTimeZone", "(", "$", "object", ",", "$", "originalObject", "=", "null", ")", "{", "$", "timezone", "=", "CarbonTimeZone", "::", "instance", "(", "$", "object", ")", ";", "if", "(", "$", "timezone", "&&", "is_int", "(", "$", "originalObject", "?", ":", "$", "object", ")", ")", "{", "$", "timezone", "=", "$", "timezone", "->", "toRegionTimeZone", "(", "$", "this", ")", ";", "}", "return", "$", "timezone", ";", "}"], "docstring": "Creates a DateTimeZone from a string, DateTimeZone or integer offset then convert it as region timezone\nif integer.\n\n@param \\DateTimeZone|string|int|null $object\n@param \\DateTimeZone|string|int|null $originalObject if different\n\n@throws \\InvalidArgumentException\n\n@return CarbonTimeZone|false", "docstring_tokens": ["Creates", "a", "DateTimeZone", "from", "a", "string", "DateTimeZone", "or", "integer", "offset", "then", "convert", "it", "as", "region", "timezone", "if", "integer", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Date.php#L608-L617", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Date.php", "func_name": "Date.resolveCarbon", "original_string": "protected function resolveCarbon($date = null)\n    {\n        if (!$date) {\n            return $this->nowWithSameTz();\n        }\n\n        if (is_string($date)) {\n            return static::parse($date, $this->getTimezone());\n        }\n\n        static::expectDateTime($date, ['null', 'string']);\n\n        return $date instanceof self ? $date : static::instance($date);\n    }", "language": "php", "code": "protected function resolveCarbon($date = null)\n    {\n        if (!$date) {\n            return $this->nowWithSameTz();\n        }\n\n        if (is_string($date)) {\n            return static::parse($date, $this->getTimezone());\n        }\n\n        static::expectDateTime($date, ['null', 'string']);\n\n        return $date instanceof self ? $date : static::instance($date);\n    }", "code_tokens": ["protected", "function", "resolveCarbon", "(", "$", "date", "=", "null", ")", "{", "if", "(", "!", "$", "date", ")", "{", "return", "$", "this", "->", "nowWithSameTz", "(", ")", ";", "}", "if", "(", "is_string", "(", "$", "date", ")", ")", "{", "return", "static", "::", "parse", "(", "$", "date", ",", "$", "this", "->", "getTimezone", "(", ")", ")", ";", "}", "static", "::", "expectDateTime", "(", "$", "date", ",", "[", "'null'", ",", "'string'", "]", ")", ";", "return", "$", "date", "instanceof", "self", "?", "$", "date", ":", "static", "::", "instance", "(", "$", "date", ")", ";", "}"], "docstring": "Return the Carbon instance passed through, a now instance in the same timezone\nif null given or parse the input if string given.\n\n@param \\Carbon\\Carbon|\\DateTimeInterface|string|null $date\n\n@return static|CarbonInterface", "docstring_tokens": ["Return", "the", "Carbon", "instance", "passed", "through", "a", "now", "instance", "in", "the", "same", "timezone", "if", "null", "given", "or", "parse", "the", "input", "if", "string", "given", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Date.php#L717-L730", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Date.php", "func_name": "Date.addUnitNoOverflow", "original_string": "public function addUnitNoOverflow($valueUnit, $value, $overflowUnit)\n    {\n        return $this->setUnitNoOverflow($valueUnit, $this->$valueUnit + $value, $overflowUnit);\n    }", "language": "php", "code": "public function addUnitNoOverflow($valueUnit, $value, $overflowUnit)\n    {\n        return $this->setUnitNoOverflow($valueUnit, $this->$valueUnit + $value, $overflowUnit);\n    }", "code_tokens": ["public", "function", "addUnitNoOverflow", "(", "$", "valueUnit", ",", "$", "value", ",", "$", "overflowUnit", ")", "{", "return", "$", "this", "->", "setUnitNoOverflow", "(", "$", "valueUnit", ",", "$", "this", "->", "$", "valueUnit", "+", "$", "value", ",", "$", "overflowUnit", ")", ";", "}"], "docstring": "Add any unit to a new value without overflowing current other unit given.\n\n@param string $valueUnit    unit name to modify\n@param int    $value        amount to add to the input unit\n@param string $overflowUnit unit name to not overflow\n\n@return static|CarbonInterface", "docstring_tokens": ["Add", "any", "unit", "to", "a", "new", "value", "without", "overflowing", "current", "other", "unit", "given", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Date.php#L1299-L1302", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Date.php", "func_name": "Date.subUnitNoOverflow", "original_string": "public function subUnitNoOverflow($valueUnit, $value, $overflowUnit)\n    {\n        return $this->setUnitNoOverflow($valueUnit, $this->$valueUnit - $value, $overflowUnit);\n    }", "language": "php", "code": "public function subUnitNoOverflow($valueUnit, $value, $overflowUnit)\n    {\n        return $this->setUnitNoOverflow($valueUnit, $this->$valueUnit - $value, $overflowUnit);\n    }", "code_tokens": ["public", "function", "subUnitNoOverflow", "(", "$", "valueUnit", ",", "$", "value", ",", "$", "overflowUnit", ")", "{", "return", "$", "this", "->", "setUnitNoOverflow", "(", "$", "valueUnit", ",", "$", "this", "->", "$", "valueUnit", "-", "$", "value", ",", "$", "overflowUnit", ")", ";", "}"], "docstring": "Subtract any unit to a new value without overflowing current other unit given.\n\n@param string $valueUnit    unit name to modify\n@param int    $value        amount to subtract to the input unit\n@param string $overflowUnit unit name to not overflow\n\n@return static|CarbonInterface", "docstring_tokens": ["Subtract", "any", "unit", "to", "a", "new", "value", "without", "overflowing", "current", "other", "unit", "given", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Date.php#L1313-L1316", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonPeriod.php", "func_name": "CarbonPeriod.validateCurrentDate", "original_string": "protected function validateCurrentDate()\n    {\n        if ($this->current === null) {\n            $this->rewind();\n        }\n\n        // Check after the first rewind to avoid repeating the initial validation.\n        if ($this->validationResult !== null) {\n            return $this->validationResult;\n        }\n\n        return $this->validationResult = $this->checkFilters();\n    }", "language": "php", "code": "protected function validateCurrentDate()\n    {\n        if ($this->current === null) {\n            $this->rewind();\n        }\n\n        // Check after the first rewind to avoid repeating the initial validation.\n        if ($this->validationResult !== null) {\n            return $this->validationResult;\n        }\n\n        return $this->validationResult = $this->checkFilters();\n    }", "code_tokens": ["protected", "function", "validateCurrentDate", "(", ")", "{", "if", "(", "$", "this", "->", "current", "===", "null", ")", "{", "$", "this", "->", "rewind", "(", ")", ";", "}", "if", "(", "$", "this", "->", "validationResult", "!==", "null", ")", "{", "return", "$", "this", "->", "validationResult", ";", "}", "return", "$", "this", "->", "validationResult", "=", "$", "this", "->", "checkFilters", "(", ")", ";", "}"], "docstring": "Validate current date and stop iteration when necessary.\n\nReturns true when current date is valid, false if it is not, or static::END_ITERATION\nwhen iteration should be stopped.\n\n@return bool|string", "docstring_tokens": ["Validate", "current", "date", "and", "stop", "iteration", "when", "necessary", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonPeriod.php#L1087-L1099", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonPeriod.php", "func_name": "CarbonPeriod.checkFilters", "original_string": "protected function checkFilters()\n    {\n        $current = $this->prepareForReturn($this->current);\n\n        foreach ($this->filters as $tuple) {\n            $result = call_user_func(\n                $tuple[0],\n                $current->copy(),\n                $this->key,\n                $this\n            );\n\n            if ($result === static::END_ITERATION) {\n                return static::END_ITERATION;\n            }\n\n            if (!$result) {\n                return false;\n            }\n        }\n\n        return true;\n    }", "language": "php", "code": "protected function checkFilters()\n    {\n        $current = $this->prepareForReturn($this->current);\n\n        foreach ($this->filters as $tuple) {\n            $result = call_user_func(\n                $tuple[0],\n                $current->copy(),\n                $this->key,\n                $this\n            );\n\n            if ($result === static::END_ITERATION) {\n                return static::END_ITERATION;\n            }\n\n            if (!$result) {\n                return false;\n            }\n        }\n\n        return true;\n    }", "code_tokens": ["protected", "function", "checkFilters", "(", ")", "{", "$", "current", "=", "$", "this", "->", "prepareForReturn", "(", "$", "this", "->", "current", ")", ";", "foreach", "(", "$", "this", "->", "filters", "as", "$", "tuple", ")", "{", "$", "result", "=", "call_user_func", "(", "$", "tuple", "[", "0", "]", ",", "$", "current", "->", "copy", "(", ")", ",", "$", "this", "->", "key", ",", "$", "this", ")", ";", "if", "(", "$", "result", "===", "static", "::", "END_ITERATION", ")", "{", "return", "static", "::", "END_ITERATION", ";", "}", "if", "(", "!", "$", "result", ")", "{", "return", "false", ";", "}", "}", "return", "true", ";", "}"], "docstring": "Check whether current value and key pass all the filters.\n\n@return bool|string", "docstring_tokens": ["Check", "whether", "current", "value", "and", "key", "pass", "all", "the", "filters", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonPeriod.php#L1106-L1128", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonPeriod.php", "func_name": "CarbonPeriod.prepareForReturn", "original_string": "protected function prepareForReturn(CarbonInterface $date)\n    {\n        $date = call_user_func([$this->dateClass, 'make'], $date);\n\n        if ($this->timezone) {\n            $date = $date->setTimezone($this->timezone);\n        }\n\n        return $date;\n    }", "language": "php", "code": "protected function prepareForReturn(CarbonInterface $date)\n    {\n        $date = call_user_func([$this->dateClass, 'make'], $date);\n\n        if ($this->timezone) {\n            $date = $date->setTimezone($this->timezone);\n        }\n\n        return $date;\n    }", "code_tokens": ["protected", "function", "prepareForReturn", "(", "CarbonInterface", "$", "date", ")", "{", "$", "date", "=", "call_user_func", "(", "[", "$", "this", "->", "dateClass", ",", "'make'", "]", ",", "$", "date", ")", ";", "if", "(", "$", "this", "->", "timezone", ")", "{", "$", "date", "=", "$", "date", "->", "setTimezone", "(", "$", "this", "->", "timezone", ")", ";", "}", "return", "$", "date", ";", "}"], "docstring": "Prepare given date to be returned to the external logic.\n\n@param CarbonInterface $date\n\n@return Carbon", "docstring_tokens": ["Prepare", "given", "date", "to", "be", "returned", "to", "the", "external", "logic", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonPeriod.php#L1137-L1146", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonPeriod.php", "func_name": "CarbonPeriod.next", "original_string": "public function next()\n    {\n        if ($this->current === null) {\n            $this->rewind();\n        }\n\n        if ($this->validationResult !== static::END_ITERATION) {\n            $this->key++;\n\n            $this->incrementCurrentDateUntilValid();\n        }\n    }", "language": "php", "code": "public function next()\n    {\n        if ($this->current === null) {\n            $this->rewind();\n        }\n\n        if ($this->validationResult !== static::END_ITERATION) {\n            $this->key++;\n\n            $this->incrementCurrentDateUntilValid();\n        }\n    }", "code_tokens": ["public", "function", "next", "(", ")", "{", "if", "(", "$", "this", "->", "current", "===", "null", ")", "{", "$", "this", "->", "rewind", "(", ")", ";", "}", "if", "(", "$", "this", "->", "validationResult", "!==", "static", "::", "END_ITERATION", ")", "{", "$", "this", "->", "key", "++", ";", "$", "this", "->", "incrementCurrentDateUntilValid", "(", ")", ";", "}", "}"], "docstring": "Move forward to the next date.\n\n@throws \\RuntimeException\n\n@return void", "docstring_tokens": ["Move", "forward", "to", "the", "next", "date", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonPeriod.php#L1189-L1200", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonPeriod.php", "func_name": "CarbonPeriod.rewind", "original_string": "public function rewind()\n    {\n        $this->key = 0;\n        $this->current = call_user_func([$this->dateClass, 'make'], $this->startDate);\n        $settings = $this->getSettings();\n        $locale = $this->getLocalTranslator()->getLocale();\n        if ($locale) {\n            $settings['locale'] = $locale;\n        }\n        $this->current->settings($settings);\n        $this->timezone = static::intervalHasTime($this->dateInterval) ? $this->current->getTimezone() : null;\n\n        if ($this->timezone) {\n            $this->current = $this->current->utc();\n        }\n\n        $this->validationResult = null;\n\n        if ($this->isStartExcluded() || $this->validateCurrentDate() === false) {\n            $this->incrementCurrentDateUntilValid();\n        }\n    }", "language": "php", "code": "public function rewind()\n    {\n        $this->key = 0;\n        $this->current = call_user_func([$this->dateClass, 'make'], $this->startDate);\n        $settings = $this->getSettings();\n        $locale = $this->getLocalTranslator()->getLocale();\n        if ($locale) {\n            $settings['locale'] = $locale;\n        }\n        $this->current->settings($settings);\n        $this->timezone = static::intervalHasTime($this->dateInterval) ? $this->current->getTimezone() : null;\n\n        if ($this->timezone) {\n            $this->current = $this->current->utc();\n        }\n\n        $this->validationResult = null;\n\n        if ($this->isStartExcluded() || $this->validateCurrentDate() === false) {\n            $this->incrementCurrentDateUntilValid();\n        }\n    }", "code_tokens": ["public", "function", "rewind", "(", ")", "{", "$", "this", "->", "key", "=", "0", ";", "$", "this", "->", "current", "=", "call_user_func", "(", "[", "$", "this", "->", "dateClass", ",", "'make'", "]", ",", "$", "this", "->", "startDate", ")", ";", "$", "settings", "=", "$", "this", "->", "getSettings", "(", ")", ";", "$", "locale", "=", "$", "this", "->", "getLocalTranslator", "(", ")", "->", "getLocale", "(", ")", ";", "if", "(", "$", "locale", ")", "{", "$", "settings", "[", "'locale'", "]", "=", "$", "locale", ";", "}", "$", "this", "->", "current", "->", "settings", "(", "$", "settings", ")", ";", "$", "this", "->", "timezone", "=", "static", "::", "intervalHasTime", "(", "$", "this", "->", "dateInterval", ")", "?", "$", "this", "->", "current", "->", "getTimezone", "(", ")", ":", "null", ";", "if", "(", "$", "this", "->", "timezone", ")", "{", "$", "this", "->", "current", "=", "$", "this", "->", "current", "->", "utc", "(", ")", ";", "}", "$", "this", "->", "validationResult", "=", "null", ";", "if", "(", "$", "this", "->", "isStartExcluded", "(", ")", "||", "$", "this", "->", "validateCurrentDate", "(", ")", "===", "false", ")", "{", "$", "this", "->", "incrementCurrentDateUntilValid", "(", ")", ";", "}", "}"], "docstring": "Rewind to the start date.\n\nIterating over a date in the UTC timezone avoids bug during backward DST change.\n\n@see https://bugs.php.net/bug.php?id=72255\n@see https://bugs.php.net/bug.php?id=74274\n@see https://wiki.php.net/rfc/datetime_and_daylight_saving_time\n\n@throws \\RuntimeException\n\n@return void", "docstring_tokens": ["Rewind", "to", "the", "start", "date", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonPeriod.php#L1215-L1236", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonPeriod.php", "func_name": "CarbonPeriod.incrementCurrentDateUntilValid", "original_string": "protected function incrementCurrentDateUntilValid()\n    {\n        $attempts = 0;\n\n        do {\n            $this->current = $this->current->add($this->dateInterval);\n\n            $this->validationResult = null;\n\n            if (++$attempts > static::NEXT_MAX_ATTEMPTS) {\n                throw new RuntimeException('Could not find next valid date.');\n            }\n        } while ($this->validateCurrentDate() === false);\n    }", "language": "php", "code": "protected function incrementCurrentDateUntilValid()\n    {\n        $attempts = 0;\n\n        do {\n            $this->current = $this->current->add($this->dateInterval);\n\n            $this->validationResult = null;\n\n            if (++$attempts > static::NEXT_MAX_ATTEMPTS) {\n                throw new RuntimeException('Could not find next valid date.');\n            }\n        } while ($this->validateCurrentDate() === false);\n    }", "code_tokens": ["protected", "function", "incrementCurrentDateUntilValid", "(", ")", "{", "$", "attempts", "=", "0", ";", "do", "{", "$", "this", "->", "current", "=", "$", "this", "->", "current", "->", "add", "(", "$", "this", "->", "dateInterval", ")", ";", "$", "this", "->", "validationResult", "=", "null", ";", "if", "(", "++", "$", "attempts", ">", "static", "::", "NEXT_MAX_ATTEMPTS", ")", "{", "throw", "new", "RuntimeException", "(", "'Could not find next valid date.'", ")", ";", "}", "}", "while", "(", "$", "this", "->", "validateCurrentDate", "(", ")", "===", "false", ")", ";", "}"], "docstring": "Keep incrementing the current date until a valid date is found or the iteration is ended.\n\n@throws \\RuntimeException\n\n@return void", "docstring_tokens": ["Keep", "incrementing", "the", "current", "date", "until", "a", "valid", "date", "is", "found", "or", "the", "iteration", "is", "ended", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonPeriod.php#L1261-L1274", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonPeriod.php", "func_name": "CarbonPeriod.toIso8601String", "original_string": "public function toIso8601String()\n    {\n        $parts = [];\n\n        if ($this->recurrences !== null) {\n            $parts[] = 'R'.$this->recurrences;\n        }\n\n        $parts[] = $this->startDate->toIso8601String();\n\n        $parts[] = $this->dateInterval->spec();\n\n        if ($this->endDate !== null) {\n            $parts[] = $this->endDate->toIso8601String();\n        }\n\n        return implode('/', $parts);\n    }", "language": "php", "code": "public function toIso8601String()\n    {\n        $parts = [];\n\n        if ($this->recurrences !== null) {\n            $parts[] = 'R'.$this->recurrences;\n        }\n\n        $parts[] = $this->startDate->toIso8601String();\n\n        $parts[] = $this->dateInterval->spec();\n\n        if ($this->endDate !== null) {\n            $parts[] = $this->endDate->toIso8601String();\n        }\n\n        return implode('/', $parts);\n    }", "code_tokens": ["public", "function", "toIso8601String", "(", ")", "{", "$", "parts", "=", "[", "]", ";", "if", "(", "$", "this", "->", "recurrences", "!==", "null", ")", "{", "$", "parts", "[", "]", "=", "'R'", ".", "$", "this", "->", "recurrences", ";", "}", "$", "parts", "[", "]", "=", "$", "this", "->", "startDate", "->", "toIso8601String", "(", ")", ";", "$", "parts", "[", "]", "=", "$", "this", "->", "dateInterval", "->", "spec", "(", ")", ";", "if", "(", "$", "this", "->", "endDate", "!==", "null", ")", "{", "$", "parts", "[", "]", "=", "$", "this", "->", "endDate", "->", "toIso8601String", "(", ")", ";", "}", "return", "implode", "(", "'/'", ",", "$", "parts", ")", ";", "}"], "docstring": "Format the date period as ISO 8601.\n\n@return string", "docstring_tokens": ["Format", "the", "date", "period", "as", "ISO", "8601", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonPeriod.php#L1281-L1298", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonPeriod.php", "func_name": "CarbonPeriod.toString", "original_string": "public function toString()\n    {\n        $translator = call_user_func([$this->dateClass, 'getTranslator']);\n\n        $parts = [];\n\n        $format = !$this->startDate->isStartOfDay() || $this->endDate && !$this->endDate->isStartOfDay()\n            ? 'Y-m-d H:i:s'\n            : 'Y-m-d';\n\n        if ($this->recurrences !== null) {\n            $parts[] = $this->translate('period_recurrences', [], $this->recurrences, $translator);\n        }\n\n        $parts[] = $this->translate('period_interval', [':interval' => $this->dateInterval->forHumans([\n            'join' => true,\n        ])], null, $translator);\n\n        $parts[] = $this->translate('period_start_date', [':date' => $this->startDate->rawFormat($format)], null, $translator);\n\n        if ($this->endDate !== null) {\n            $parts[] = $this->translate('period_end_date', [':date' => $this->endDate->rawFormat($format)], null, $translator);\n        }\n\n        $result = implode(' ', $parts);\n\n        return mb_strtoupper(mb_substr($result, 0, 1)).mb_substr($result, 1);\n    }", "language": "php", "code": "public function toString()\n    {\n        $translator = call_user_func([$this->dateClass, 'getTranslator']);\n\n        $parts = [];\n\n        $format = !$this->startDate->isStartOfDay() || $this->endDate && !$this->endDate->isStartOfDay()\n            ? 'Y-m-d H:i:s'\n            : 'Y-m-d';\n\n        if ($this->recurrences !== null) {\n            $parts[] = $this->translate('period_recurrences', [], $this->recurrences, $translator);\n        }\n\n        $parts[] = $this->translate('period_interval', [':interval' => $this->dateInterval->forHumans([\n            'join' => true,\n        ])], null, $translator);\n\n        $parts[] = $this->translate('period_start_date', [':date' => $this->startDate->rawFormat($format)], null, $translator);\n\n        if ($this->endDate !== null) {\n            $parts[] = $this->translate('period_end_date', [':date' => $this->endDate->rawFormat($format)], null, $translator);\n        }\n\n        $result = implode(' ', $parts);\n\n        return mb_strtoupper(mb_substr($result, 0, 1)).mb_substr($result, 1);\n    }", "code_tokens": ["public", "function", "toString", "(", ")", "{", "$", "translator", "=", "call_user_func", "(", "[", "$", "this", "->", "dateClass", ",", "'getTranslator'", "]", ")", ";", "$", "parts", "=", "[", "]", ";", "$", "format", "=", "!", "$", "this", "->", "startDate", "->", "isStartOfDay", "(", ")", "||", "$", "this", "->", "endDate", "&&", "!", "$", "this", "->", "endDate", "->", "isStartOfDay", "(", ")", "?", "'Y-m-d H:i:s'", ":", "'Y-m-d'", ";", "if", "(", "$", "this", "->", "recurrences", "!==", "null", ")", "{", "$", "parts", "[", "]", "=", "$", "this", "->", "translate", "(", "'period_recurrences'", ",", "[", "]", ",", "$", "this", "->", "recurrences", ",", "$", "translator", ")", ";", "}", "$", "parts", "[", "]", "=", "$", "this", "->", "translate", "(", "'period_interval'", ",", "[", "':interval'", "=>", "$", "this", "->", "dateInterval", "->", "forHumans", "(", "[", "'join'", "=>", "true", ",", "]", ")", "]", ",", "null", ",", "$", "translator", ")", ";", "$", "parts", "[", "]", "=", "$", "this", "->", "translate", "(", "'period_start_date'", ",", "[", "':date'", "=>", "$", "this", "->", "startDate", "->", "rawFormat", "(", "$", "format", ")", "]", ",", "null", ",", "$", "translator", ")", ";", "if", "(", "$", "this", "->", "endDate", "!==", "null", ")", "{", "$", "parts", "[", "]", "=", "$", "this", "->", "translate", "(", "'period_end_date'", ",", "[", "':date'", "=>", "$", "this", "->", "endDate", "->", "rawFormat", "(", "$", "format", ")", "]", ",", "null", ",", "$", "translator", ")", ";", "}", "$", "result", "=", "implode", "(", "' '", ",", "$", "parts", ")", ";", "return", "mb_strtoupper", "(", "mb_substr", "(", "$", "result", ",", "0", ",", "1", ")", ")", ".", "mb_substr", "(", "$", "result", ",", "1", ")", ";", "}"], "docstring": "Convert the date period into a string.\n\n@return string", "docstring_tokens": ["Convert", "the", "date", "period", "into", "a", "string", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonPeriod.php#L1305-L1332", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonPeriod.php", "func_name": "CarbonPeriod.toArray", "original_string": "public function toArray()\n    {\n        $state = [\n            $this->key,\n            $this->current ? $this->current->copy() : null,\n            $this->validationResult,\n        ];\n\n        $result = iterator_to_array($this);\n\n        [\n            $this->key,\n            $this->current,\n            $this->validationResult\n        ] = $state;\n\n        return $result;\n    }", "language": "php", "code": "public function toArray()\n    {\n        $state = [\n            $this->key,\n            $this->current ? $this->current->copy() : null,\n            $this->validationResult,\n        ];\n\n        $result = iterator_to_array($this);\n\n        [\n            $this->key,\n            $this->current,\n            $this->validationResult\n        ] = $state;\n\n        return $result;\n    }", "code_tokens": ["public", "function", "toArray", "(", ")", "{", "$", "state", "=", "[", "$", "this", "->", "key", ",", "$", "this", "->", "current", "?", "$", "this", "->", "current", "->", "copy", "(", ")", ":", "null", ",", "$", "this", "->", "validationResult", ",", "]", ";", "$", "result", "=", "iterator_to_array", "(", "$", "this", ")", ";", "[", "$", "this", "->", "key", ",", "$", "this", "->", "current", ",", "$", "this", "->", "validationResult", "]", "=", "$", "state", ";", "return", "$", "result", ";", "}"], "docstring": "Convert the date period into an array without changing current iteration state.\n\n@return array", "docstring_tokens": ["Convert", "the", "date", "period", "into", "an", "array", "without", "changing", "current", "iteration", "state", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonPeriod.php#L1349-L1366", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonPeriod.php", "func_name": "CarbonPeriod.callMacro", "original_string": "protected function callMacro($name, $parameters)\n    {\n        $macro = static::$macros[$name];\n\n        if ($macro instanceof Closure) {\n            return call_user_func_array($macro->bindTo($this, static::class), $parameters);\n        }\n\n        return call_user_func_array($macro, $parameters);\n    }", "language": "php", "code": "protected function callMacro($name, $parameters)\n    {\n        $macro = static::$macros[$name];\n\n        if ($macro instanceof Closure) {\n            return call_user_func_array($macro->bindTo($this, static::class), $parameters);\n        }\n\n        return call_user_func_array($macro, $parameters);\n    }", "code_tokens": ["protected", "function", "callMacro", "(", "$", "name", ",", "$", "parameters", ")", "{", "$", "macro", "=", "static", "::", "$", "macros", "[", "$", "name", "]", ";", "if", "(", "$", "macro", "instanceof", "Closure", ")", "{", "return", "call_user_func_array", "(", "$", "macro", "->", "bindTo", "(", "$", "this", ",", "static", "::", "class", ")", ",", "$", "parameters", ")", ";", "}", "return", "call_user_func_array", "(", "$", "macro", ",", "$", "parameters", ")", ";", "}"], "docstring": "Call given macro.\n\n@param string $name\n@param array  $parameters\n\n@return mixed", "docstring_tokens": ["Call", "given", "macro", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonPeriod.php#L1410-L1419", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonInterval.php", "func_name": "CarbonInterval.getCascadeFactors", "original_string": "public static function getCascadeFactors()\n    {\n        return static::$cascadeFactors ?: [\n            'milliseconds' => [Carbon::MICROSECONDS_PER_MILLISECOND, 'microseconds'],\n            'seconds' => [Carbon::MILLISECONDS_PER_SECOND, 'milliseconds'],\n            'minutes' => [Carbon::SECONDS_PER_MINUTE, 'seconds'],\n            'hours' => [Carbon::MINUTES_PER_HOUR, 'minutes'],\n            'dayz' => [Carbon::HOURS_PER_DAY, 'hours'],\n            'months' => [Carbon::DAYS_PER_WEEK * Carbon::WEEKS_PER_MONTH, 'dayz'],\n            'years' => [Carbon::MONTHS_PER_YEAR, 'months'],\n        ];\n    }", "language": "php", "code": "public static function getCascadeFactors()\n    {\n        return static::$cascadeFactors ?: [\n            'milliseconds' => [Carbon::MICROSECONDS_PER_MILLISECOND, 'microseconds'],\n            'seconds' => [Carbon::MILLISECONDS_PER_SECOND, 'milliseconds'],\n            'minutes' => [Carbon::SECONDS_PER_MINUTE, 'seconds'],\n            'hours' => [Carbon::MINUTES_PER_HOUR, 'minutes'],\n            'dayz' => [Carbon::HOURS_PER_DAY, 'hours'],\n            'months' => [Carbon::DAYS_PER_WEEK * Carbon::WEEKS_PER_MONTH, 'dayz'],\n            'years' => [Carbon::MONTHS_PER_YEAR, 'months'],\n        ];\n    }", "code_tokens": ["public", "static", "function", "getCascadeFactors", "(", ")", "{", "return", "static", "::", "$", "cascadeFactors", "?", ":", "[", "'milliseconds'", "=>", "[", "Carbon", "::", "MICROSECONDS_PER_MILLISECOND", ",", "'microseconds'", "]", ",", "'seconds'", "=>", "[", "Carbon", "::", "MILLISECONDS_PER_SECOND", ",", "'milliseconds'", "]", ",", "'minutes'", "=>", "[", "Carbon", "::", "SECONDS_PER_MINUTE", ",", "'seconds'", "]", ",", "'hours'", "=>", "[", "Carbon", "::", "MINUTES_PER_HOUR", ",", "'minutes'", "]", ",", "'dayz'", "=>", "[", "Carbon", "::", "HOURS_PER_DAY", ",", "'hours'", "]", ",", "'months'", "=>", "[", "Carbon", "::", "DAYS_PER_WEEK", "*", "Carbon", "::", "WEEKS_PER_MONTH", ",", "'dayz'", "]", ",", "'years'", "=>", "[", "Carbon", "::", "MONTHS_PER_YEAR", ",", "'months'", "]", ",", "]", ";", "}"], "docstring": "Mapping of units and factors for cascading.\n\nShould only be modified by changing the factors or referenced constants.\n\n@return array", "docstring_tokens": ["Mapping", "of", "units", "and", "factors", "for", "cascading", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonInterval.php#L149-L160", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonInterval.php", "func_name": "CarbonInterval.getFactor", "original_string": "public static function getFactor($source, $target)\n    {\n        $source = self::standardizeUnit($source);\n        $target = self::standardizeUnit($target);\n        $factors = static::getFlipCascadeFactors();\n        if (isset($factors[$source])) {\n            [$to, $factor] = $factors[$source];\n            if ($to === $target) {\n                return $factor;\n            }\n        }\n\n        return null;\n    }", "language": "php", "code": "public static function getFactor($source, $target)\n    {\n        $source = self::standardizeUnit($source);\n        $target = self::standardizeUnit($target);\n        $factors = static::getFlipCascadeFactors();\n        if (isset($factors[$source])) {\n            [$to, $factor] = $factors[$source];\n            if ($to === $target) {\n                return $factor;\n            }\n        }\n\n        return null;\n    }", "code_tokens": ["public", "static", "function", "getFactor", "(", "$", "source", ",", "$", "target", ")", "{", "$", "source", "=", "self", "::", "standardizeUnit", "(", "$", "source", ")", ";", "$", "target", "=", "self", "::", "standardizeUnit", "(", "$", "target", ")", ";", "$", "factors", "=", "static", "::", "getFlipCascadeFactors", "(", ")", ";", "if", "(", "isset", "(", "$", "factors", "[", "$", "source", "]", ")", ")", "{", "[", "$", "to", ",", "$", "factor", "]", "=", "$", "factors", "[", "$", "source", "]", ";", "if", "(", "$", "to", "===", "$", "target", ")", "{", "return", "$", "factor", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Returns the factor for a given source-to-target couple.\n\n@param string $source\n@param string $target\n\n@return int|null", "docstring_tokens": ["Returns", "the", "factor", "for", "a", "given", "source", "-", "to", "-", "target", "couple", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonInterval.php#L254-L267", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonInterval.php", "func_name": "CarbonInterval.make", "original_string": "public static function make($var)\n    {\n        if ($var instanceof DateInterval) {\n            return static::instance($var);\n        }\n\n        if (!is_string($var)) {\n            return null;\n        }\n\n        $var = trim($var);\n\n        if (preg_match('/^P[T0-9]/', $var)) {\n            return new static($var);\n        }\n\n        if (preg_match('/^(?:\\h*\\d+(?:\\.\\d+)?\\h*[a-z]+)+$/i', $var)) {\n            return static::fromString($var);\n        }\n\n        /** @var static $interval */\n        $interval = static::createFromDateString($var);\n\n        return $interval->isEmpty() ? null : $interval;\n    }", "language": "php", "code": "public static function make($var)\n    {\n        if ($var instanceof DateInterval) {\n            return static::instance($var);\n        }\n\n        if (!is_string($var)) {\n            return null;\n        }\n\n        $var = trim($var);\n\n        if (preg_match('/^P[T0-9]/', $var)) {\n            return new static($var);\n        }\n\n        if (preg_match('/^(?:\\h*\\d+(?:\\.\\d+)?\\h*[a-z]+)+$/i', $var)) {\n            return static::fromString($var);\n        }\n\n        /** @var static $interval */\n        $interval = static::createFromDateString($var);\n\n        return $interval->isEmpty() ? null : $interval;\n    }", "code_tokens": ["public", "static", "function", "make", "(", "$", "var", ")", "{", "if", "(", "$", "var", "instanceof", "DateInterval", ")", "{", "return", "static", "::", "instance", "(", "$", "var", ")", ";", "}", "if", "(", "!", "is_string", "(", "$", "var", ")", ")", "{", "return", "null", ";", "}", "$", "var", "=", "trim", "(", "$", "var", ")", ";", "if", "(", "preg_match", "(", "'/^P[T0-9]/'", ",", "$", "var", ")", ")", "{", "return", "new", "static", "(", "$", "var", ")", ";", "}", "if", "(", "preg_match", "(", "'/^(?:\\h*\\d+(?:\\.\\d+)?\\h*[a-z]+)+$/i'", ",", "$", "var", ")", ")", "{", "return", "static", "::", "fromString", "(", "$", "var", ")", ";", "}", "$", "interval", "=", "static", "::", "createFromDateString", "(", "$", "var", ")", ";", "return", "$", "interval", "->", "isEmpty", "(", ")", "?", "null", ":", "$", "interval", ";", "}"], "docstring": "Make a CarbonInterval instance from given variable if possible.\n\nAlways return a new instance. Parse only strings and only these likely to be intervals (skip dates\nand recurrences). Throw an exception for invalid format, but otherwise return null.\n\n@param mixed $var\n\n@return static|null", "docstring_tokens": ["Make", "a", "CarbonInterval", "instance", "from", "given", "variable", "if", "possible", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonInterval.php#L599-L623", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonInterval.php", "func_name": "CarbonInterval.createFromDateString", "original_string": "public static function createFromDateString($time)\n    {\n        $interval = parent::createFromDateString($time);\n        if ($interval instanceof DateInterval && !($interval instanceof static)) {\n            $interval = static::instance($interval);\n        }\n\n        return static::instance($interval);\n    }", "language": "php", "code": "public static function createFromDateString($time)\n    {\n        $interval = parent::createFromDateString($time);\n        if ($interval instanceof DateInterval && !($interval instanceof static)) {\n            $interval = static::instance($interval);\n        }\n\n        return static::instance($interval);\n    }", "code_tokens": ["public", "static", "function", "createFromDateString", "(", "$", "time", ")", "{", "$", "interval", "=", "parent", "::", "createFromDateString", "(", "$", "time", ")", ";", "if", "(", "$", "interval", "instanceof", "DateInterval", "&&", "!", "(", "$", "interval", "instanceof", "static", ")", ")", "{", "$", "interval", "=", "static", "::", "instance", "(", "$", "interval", ")", ";", "}", "return", "static", "::", "instance", "(", "$", "interval", ")", ";", "}"], "docstring": "Sets up a DateInterval from the relative parts of the string.\n\n@param string $time\n\n@return static\n\n@link http://php.net/manual/en/dateinterval.createfromdatestring.php", "docstring_tokens": ["Sets", "up", "a", "DateInterval", "from", "the", "relative", "parts", "of", "the", "string", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonInterval.php#L634-L642", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonInterval.php", "func_name": "CarbonInterval.isEmpty", "original_string": "public function isEmpty()\n    {\n        return $this->years === 0 &&\n            $this->months === 0 &&\n            $this->dayz === 0 &&\n            !$this->days &&\n            $this->hours === 0 &&\n            $this->minutes === 0 &&\n            $this->seconds === 0 &&\n            $this->microseconds === 0;\n    }", "language": "php", "code": "public function isEmpty()\n    {\n        return $this->years === 0 &&\n            $this->months === 0 &&\n            $this->dayz === 0 &&\n            !$this->days &&\n            $this->hours === 0 &&\n            $this->minutes === 0 &&\n            $this->seconds === 0 &&\n            $this->microseconds === 0;\n    }", "code_tokens": ["public", "function", "isEmpty", "(", ")", "{", "return", "$", "this", "->", "years", "===", "0", "&&", "$", "this", "->", "months", "===", "0", "&&", "$", "this", "->", "dayz", "===", "0", "&&", "!", "$", "this", "->", "days", "&&", "$", "this", "->", "hours", "===", "0", "&&", "$", "this", "->", "minutes", "===", "0", "&&", "$", "this", "->", "seconds", "===", "0", "&&", "$", "this", "->", "microseconds", "===", "0", ";", "}"], "docstring": "Returns true if the interval is empty for each unit.\n\n@return bool", "docstring_tokens": ["Returns", "true", "if", "the", "interval", "is", "empty", "for", "each", "unit", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonInterval.php#L783-L793", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonInterval.php", "func_name": "CarbonInterval.sub", "original_string": "public function sub($unit, $value = 1)\n    {\n        if (is_numeric($unit)) {\n            $_unit = $value;\n            $value = $unit;\n            $unit = $_unit;\n            unset($_unit);\n        }\n\n        return $this->add($unit, -floatval($value));\n    }", "language": "php", "code": "public function sub($unit, $value = 1)\n    {\n        if (is_numeric($unit)) {\n            $_unit = $value;\n            $value = $unit;\n            $unit = $_unit;\n            unset($_unit);\n        }\n\n        return $this->add($unit, -floatval($value));\n    }", "code_tokens": ["public", "function", "sub", "(", "$", "unit", ",", "$", "value", "=", "1", ")", "{", "if", "(", "is_numeric", "(", "$", "unit", ")", ")", "{", "$", "_unit", "=", "$", "value", ";", "$", "value", "=", "$", "unit", ";", "$", "unit", "=", "$", "_unit", ";", "unset", "(", "$", "_unit", ")", ";", "}", "return", "$", "this", "->", "add", "(", "$", "unit", ",", "-", "floatval", "(", "$", "value", ")", ")", ";", "}"], "docstring": "Subtract the passed interval to the current instance.\n\n@param string|DateInterval $unit\n@param int                 $value\n\n@return static", "docstring_tokens": ["Subtract", "the", "passed", "interval", "to", "the", "current", "instance", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonInterval.php#L1268-L1278", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonInterval.php", "func_name": "CarbonInterval.times", "original_string": "public function times($factor)\n    {\n        if ($factor < 0) {\n            $this->invert = $this->invert ? 0 : 1;\n            $factor = -$factor;\n        }\n\n        $this->years = (int) round($this->years * $factor);\n        $this->months = (int) round($this->months * $factor);\n        $this->dayz = (int) round($this->dayz * $factor);\n        $this->hours = (int) round($this->hours * $factor);\n        $this->minutes = (int) round($this->minutes * $factor);\n        $this->seconds = (int) round($this->seconds * $factor);\n        $this->microseconds = (int) round($this->microseconds * $factor);\n\n        return $this;\n    }", "language": "php", "code": "public function times($factor)\n    {\n        if ($factor < 0) {\n            $this->invert = $this->invert ? 0 : 1;\n            $factor = -$factor;\n        }\n\n        $this->years = (int) round($this->years * $factor);\n        $this->months = (int) round($this->months * $factor);\n        $this->dayz = (int) round($this->dayz * $factor);\n        $this->hours = (int) round($this->hours * $factor);\n        $this->minutes = (int) round($this->minutes * $factor);\n        $this->seconds = (int) round($this->seconds * $factor);\n        $this->microseconds = (int) round($this->microseconds * $factor);\n\n        return $this;\n    }", "code_tokens": ["public", "function", "times", "(", "$", "factor", ")", "{", "if", "(", "$", "factor", "<", "0", ")", "{", "$", "this", "->", "invert", "=", "$", "this", "->", "invert", "?", "0", ":", "1", ";", "$", "factor", "=", "-", "$", "factor", ";", "}", "$", "this", "->", "years", "=", "(", "int", ")", "round", "(", "$", "this", "->", "years", "*", "$", "factor", ")", ";", "$", "this", "->", "months", "=", "(", "int", ")", "round", "(", "$", "this", "->", "months", "*", "$", "factor", ")", ";", "$", "this", "->", "dayz", "=", "(", "int", ")", "round", "(", "$", "this", "->", "dayz", "*", "$", "factor", ")", ";", "$", "this", "->", "hours", "=", "(", "int", ")", "round", "(", "$", "this", "->", "hours", "*", "$", "factor", ")", ";", "$", "this", "->", "minutes", "=", "(", "int", ")", "round", "(", "$", "this", "->", "minutes", "*", "$", "factor", ")", ";", "$", "this", "->", "seconds", "=", "(", "int", ")", "round", "(", "$", "this", "->", "seconds", "*", "$", "factor", ")", ";", "$", "this", "->", "microseconds", "=", "(", "int", ")", "round", "(", "$", "this", "->", "microseconds", "*", "$", "factor", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Multiply current instance given number of times\n\n@param float|int $factor\n\n@return $this", "docstring_tokens": ["Multiply", "current", "instance", "given", "number", "of", "times"], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonInterval.php#L1300-L1316", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonInterval.php", "func_name": "CarbonInterval.getDateIntervalSpec", "original_string": "public static function getDateIntervalSpec(DateInterval $interval)\n    {\n        $date = array_filter([\n            static::PERIOD_YEARS => abs($interval->y),\n            static::PERIOD_MONTHS => abs($interval->m),\n            static::PERIOD_DAYS => abs($interval->d),\n        ]);\n\n        $time = array_filter([\n            static::PERIOD_HOURS => abs($interval->h),\n            static::PERIOD_MINUTES => abs($interval->i),\n            static::PERIOD_SECONDS => abs($interval->s),\n        ]);\n\n        $specString = static::PERIOD_PREFIX;\n\n        foreach ($date as $key => $value) {\n            $specString .= $value.$key;\n        }\n\n        if (count($time) > 0) {\n            $specString .= static::PERIOD_TIME_PREFIX;\n            foreach ($time as $key => $value) {\n                $specString .= $value.$key;\n            }\n        }\n\n        return $specString === static::PERIOD_PREFIX ? 'PT0S' : $specString;\n    }", "language": "php", "code": "public static function getDateIntervalSpec(DateInterval $interval)\n    {\n        $date = array_filter([\n            static::PERIOD_YEARS => abs($interval->y),\n            static::PERIOD_MONTHS => abs($interval->m),\n            static::PERIOD_DAYS => abs($interval->d),\n        ]);\n\n        $time = array_filter([\n            static::PERIOD_HOURS => abs($interval->h),\n            static::PERIOD_MINUTES => abs($interval->i),\n            static::PERIOD_SECONDS => abs($interval->s),\n        ]);\n\n        $specString = static::PERIOD_PREFIX;\n\n        foreach ($date as $key => $value) {\n            $specString .= $value.$key;\n        }\n\n        if (count($time) > 0) {\n            $specString .= static::PERIOD_TIME_PREFIX;\n            foreach ($time as $key => $value) {\n                $specString .= $value.$key;\n            }\n        }\n\n        return $specString === static::PERIOD_PREFIX ? 'PT0S' : $specString;\n    }", "code_tokens": ["public", "static", "function", "getDateIntervalSpec", "(", "DateInterval", "$", "interval", ")", "{", "$", "date", "=", "array_filter", "(", "[", "static", "::", "PERIOD_YEARS", "=>", "abs", "(", "$", "interval", "->", "y", ")", ",", "static", "::", "PERIOD_MONTHS", "=>", "abs", "(", "$", "interval", "->", "m", ")", ",", "static", "::", "PERIOD_DAYS", "=>", "abs", "(", "$", "interval", "->", "d", ")", ",", "]", ")", ";", "$", "time", "=", "array_filter", "(", "[", "static", "::", "PERIOD_HOURS", "=>", "abs", "(", "$", "interval", "->", "h", ")", ",", "static", "::", "PERIOD_MINUTES", "=>", "abs", "(", "$", "interval", "->", "i", ")", ",", "static", "::", "PERIOD_SECONDS", "=>", "abs", "(", "$", "interval", "->", "s", ")", ",", "]", ")", ";", "$", "specString", "=", "static", "::", "PERIOD_PREFIX", ";", "foreach", "(", "$", "date", "as", "$", "key", "=>", "$", "value", ")", "{", "$", "specString", ".=", "$", "value", ".", "$", "key", ";", "}", "if", "(", "count", "(", "$", "time", ")", ">", "0", ")", "{", "$", "specString", ".=", "static", "::", "PERIOD_TIME_PREFIX", ";", "foreach", "(", "$", "time", "as", "$", "key", "=>", "$", "value", ")", "{", "$", "specString", ".=", "$", "value", ".", "$", "key", ";", "}", "}", "return", "$", "specString", "===", "static", "::", "PERIOD_PREFIX", "?", "'PT0S'", ":", "$", "specString", ";", "}"], "docstring": "Get the interval_spec string of a date interval.\n\n@param DateInterval $interval\n\n@return string", "docstring_tokens": ["Get", "the", "interval_spec", "string", "of", "a", "date", "interval", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonInterval.php#L1325-L1353", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonInterval.php", "func_name": "CarbonInterval.cascade", "original_string": "public function cascade()\n    {\n        foreach (static::getFlipCascadeFactors() as $source => [$target, $factor]) {\n            if ($source === 'dayz' && $target === 'weeks') {\n                continue;\n            }\n\n            $value = $this->$source;\n            $this->$source = $modulo = ($factor + ($value % $factor)) % $factor;\n            $this->$target += ($value - $modulo) / $factor;\n            if ($this->$source > 0 && $this->$target < 0) {\n                $this->$source -= $factor;\n                $this->$target++;\n            }\n        }\n\n        return $this->solveNegativeInterval();\n    }", "language": "php", "code": "public function cascade()\n    {\n        foreach (static::getFlipCascadeFactors() as $source => [$target, $factor]) {\n            if ($source === 'dayz' && $target === 'weeks') {\n                continue;\n            }\n\n            $value = $this->$source;\n            $this->$source = $modulo = ($factor + ($value % $factor)) % $factor;\n            $this->$target += ($value - $modulo) / $factor;\n            if ($this->$source > 0 && $this->$target < 0) {\n                $this->$source -= $factor;\n                $this->$target++;\n            }\n        }\n\n        return $this->solveNegativeInterval();\n    }", "code_tokens": ["public", "function", "cascade", "(", ")", "{", "foreach", "(", "static", "::", "getFlipCascadeFactors", "(", ")", "as", "$", "source", "=>", "[", "$", "target", ",", "$", "factor", "]", ")", "{", "if", "(", "$", "source", "===", "'dayz'", "&&", "$", "target", "===", "'weeks'", ")", "{", "continue", ";", "}", "$", "value", "=", "$", "this", "->", "$", "source", ";", "$", "this", "->", "$", "source", "=", "$", "modulo", "=", "(", "$", "factor", "+", "(", "$", "value", "%", "$", "factor", ")", ")", "%", "$", "factor", ";", "$", "this", "->", "$", "target", "+=", "(", "$", "value", "-", "$", "modulo", ")", "/", "$", "factor", ";", "if", "(", "$", "this", "->", "$", "source", ">", "0", "&&", "$", "this", "->", "$", "target", "<", "0", ")", "{", "$", "this", "->", "$", "source", "-=", "$", "factor", ";", "$", "this", "->", "$", "target", "++", ";", "}", "}", "return", "$", "this", "->", "solveNegativeInterval", "(", ")", ";", "}"], "docstring": "Convert overflowed values into bigger units.\n\n@return $this", "docstring_tokens": ["Convert", "overflowed", "values", "into", "bigger", "units", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonInterval.php#L1406-L1423", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/CarbonInterval.php", "func_name": "CarbonInterval.total", "original_string": "public function total($unit)\n    {\n        $realUnit = $unit = strtolower($unit);\n\n        if (in_array($unit, ['days', 'weeks'])) {\n            $realUnit = 'dayz';\n        } elseif (!in_array($unit, ['microseconds', 'milliseconds', 'seconds', 'minutes', 'hours', 'dayz', 'months', 'years'])) {\n            throw new InvalidArgumentException(\"Unknown unit '$unit'.\");\n        }\n\n        $result = 0;\n        $cumulativeFactor = 0;\n        $unitFound = false;\n        $factors = static::getFlipCascadeFactors();\n\n        foreach ($factors as $source => [$target, $factor]) {\n            if ($source === $realUnit) {\n                $unitFound = true;\n                $value = $this->$source;\n                if ($source === 'microseconds' && isset($factors['milliseconds'])) {\n                    $value %= Carbon::MICROSECONDS_PER_MILLISECOND;\n                }\n                $result += $value;\n                $cumulativeFactor = 1;\n            }\n\n            if ($factor === false) {\n                if ($unitFound) {\n                    break;\n                }\n\n                $result = 0;\n                $cumulativeFactor = 0;\n\n                continue;\n            }\n\n            if ($target === $realUnit) {\n                $unitFound = true;\n            }\n\n            if ($cumulativeFactor) {\n                $cumulativeFactor *= $factor;\n                $result += $this->$target * $cumulativeFactor;\n\n                continue;\n            }\n\n            $value = $this->$source;\n\n            if ($source === 'microseconds' && isset($factors['milliseconds'])) {\n                $value %= Carbon::MICROSECONDS_PER_MILLISECOND;\n            }\n\n            $result = ($result + $value) / $factor;\n        }\n\n        if (isset($target) && !$cumulativeFactor) {\n            $result += $this->$target;\n        }\n\n        if (!$unitFound) {\n            throw new \\InvalidArgumentException(\"Unit $unit have no configuration to get total from other units.\");\n        }\n\n        if ($unit === 'weeks') {\n            return $result / static::getDaysPerWeek();\n        }\n\n        return $result;\n    }", "language": "php", "code": "public function total($unit)\n    {\n        $realUnit = $unit = strtolower($unit);\n\n        if (in_array($unit, ['days', 'weeks'])) {\n            $realUnit = 'dayz';\n        } elseif (!in_array($unit, ['microseconds', 'milliseconds', 'seconds', 'minutes', 'hours', 'dayz', 'months', 'years'])) {\n            throw new InvalidArgumentException(\"Unknown unit '$unit'.\");\n        }\n\n        $result = 0;\n        $cumulativeFactor = 0;\n        $unitFound = false;\n        $factors = static::getFlipCascadeFactors();\n\n        foreach ($factors as $source => [$target, $factor]) {\n            if ($source === $realUnit) {\n                $unitFound = true;\n                $value = $this->$source;\n                if ($source === 'microseconds' && isset($factors['milliseconds'])) {\n                    $value %= Carbon::MICROSECONDS_PER_MILLISECOND;\n                }\n                $result += $value;\n                $cumulativeFactor = 1;\n            }\n\n            if ($factor === false) {\n                if ($unitFound) {\n                    break;\n                }\n\n                $result = 0;\n                $cumulativeFactor = 0;\n\n                continue;\n            }\n\n            if ($target === $realUnit) {\n                $unitFound = true;\n            }\n\n            if ($cumulativeFactor) {\n                $cumulativeFactor *= $factor;\n                $result += $this->$target * $cumulativeFactor;\n\n                continue;\n            }\n\n            $value = $this->$source;\n\n            if ($source === 'microseconds' && isset($factors['milliseconds'])) {\n                $value %= Carbon::MICROSECONDS_PER_MILLISECOND;\n            }\n\n            $result = ($result + $value) / $factor;\n        }\n\n        if (isset($target) && !$cumulativeFactor) {\n            $result += $this->$target;\n        }\n\n        if (!$unitFound) {\n            throw new \\InvalidArgumentException(\"Unit $unit have no configuration to get total from other units.\");\n        }\n\n        if ($unit === 'weeks') {\n            return $result / static::getDaysPerWeek();\n        }\n\n        return $result;\n    }", "code_tokens": ["public", "function", "total", "(", "$", "unit", ")", "{", "$", "realUnit", "=", "$", "unit", "=", "strtolower", "(", "$", "unit", ")", ";", "if", "(", "in_array", "(", "$", "unit", ",", "[", "'days'", ",", "'weeks'", "]", ")", ")", "{", "$", "realUnit", "=", "'dayz'", ";", "}", "elseif", "(", "!", "in_array", "(", "$", "unit", ",", "[", "'microseconds'", ",", "'milliseconds'", ",", "'seconds'", ",", "'minutes'", ",", "'hours'", ",", "'dayz'", ",", "'months'", ",", "'years'", "]", ")", ")", "{", "throw", "new", "InvalidArgumentException", "(", "\"Unknown unit '$unit'.\"", ")", ";", "}", "$", "result", "=", "0", ";", "$", "cumulativeFactor", "=", "0", ";", "$", "unitFound", "=", "false", ";", "$", "factors", "=", "static", "::", "getFlipCascadeFactors", "(", ")", ";", "foreach", "(", "$", "factors", "as", "$", "source", "=>", "[", "$", "target", ",", "$", "factor", "]", ")", "{", "if", "(", "$", "source", "===", "$", "realUnit", ")", "{", "$", "unitFound", "=", "true", ";", "$", "value", "=", "$", "this", "->", "$", "source", ";", "if", "(", "$", "source", "===", "'microseconds'", "&&", "isset", "(", "$", "factors", "[", "'milliseconds'", "]", ")", ")", "{", "$", "value", "%=", "Carbon", "::", "MICROSECONDS_PER_MILLISECOND", ";", "}", "$", "result", "+=", "$", "value", ";", "$", "cumulativeFactor", "=", "1", ";", "}", "if", "(", "$", "factor", "===", "false", ")", "{", "if", "(", "$", "unitFound", ")", "{", "break", ";", "}", "$", "result", "=", "0", ";", "$", "cumulativeFactor", "=", "0", ";", "continue", ";", "}", "if", "(", "$", "target", "===", "$", "realUnit", ")", "{", "$", "unitFound", "=", "true", ";", "}", "if", "(", "$", "cumulativeFactor", ")", "{", "$", "cumulativeFactor", "*=", "$", "factor", ";", "$", "result", "+=", "$", "this", "->", "$", "target", "*", "$", "cumulativeFactor", ";", "continue", ";", "}", "$", "value", "=", "$", "this", "->", "$", "source", ";", "if", "(", "$", "source", "===", "'microseconds'", "&&", "isset", "(", "$", "factors", "[", "'milliseconds'", "]", ")", ")", "{", "$", "value", "%=", "Carbon", "::", "MICROSECONDS_PER_MILLISECOND", ";", "}", "$", "result", "=", "(", "$", "result", "+", "$", "value", ")", "/", "$", "factor", ";", "}", "if", "(", "isset", "(", "$", "target", ")", "&&", "!", "$", "cumulativeFactor", ")", "{", "$", "result", "+=", "$", "this", "->", "$", "target", ";", "}", "if", "(", "!", "$", "unitFound", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "\"Unit $unit have no configuration to get total from other units.\"", ")", ";", "}", "if", "(", "$", "unit", "===", "'weeks'", ")", "{", "return", "$", "result", "/", "static", "::", "getDaysPerWeek", "(", ")", ";", "}", "return", "$", "result", ";", "}"], "docstring": "Get amount of given unit equivalent to the interval.\n\n@param string $unit\n\n@throws \\InvalidArgumentException\n\n@return float", "docstring_tokens": ["Get", "amount", "of", "given", "unit", "equivalent", "to", "the", "interval", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/CarbonInterval.php#L1434-L1504", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Language.php", "func_name": "Language.getNames", "original_string": "public function getNames(): array\n    {\n        if (!$this->names) {\n            $this->names = static::all()[$this->code] ?? [\n                'isoName' => $this->code,\n                'nativeName' => $this->code,\n            ];\n        }\n\n        return $this->names;\n    }", "language": "php", "code": "public function getNames(): array\n    {\n        if (!$this->names) {\n            $this->names = static::all()[$this->code] ?? [\n                'isoName' => $this->code,\n                'nativeName' => $this->code,\n            ];\n        }\n\n        return $this->names;\n    }", "code_tokens": ["public", "function", "getNames", "(", ")", ":", "array", "{", "if", "(", "!", "$", "this", "->", "names", ")", "{", "$", "this", "->", "names", "=", "static", "::", "all", "(", ")", "[", "$", "this", "->", "code", "]", "??", "[", "'isoName'", "=>", "$", "this", "->", "code", ",", "'nativeName'", "=>", "$", "this", "->", "code", ",", "]", ";", "}", "return", "$", "this", "->", "names", ";", "}"], "docstring": "Get both isoName and nativeName as an array.\n\n@return array", "docstring_tokens": ["Get", "both", "isoName", "and", "nativeName", "as", "an", "array", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Language.php#L112-L122", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Language.php", "func_name": "Language.getRegionName", "original_string": "public function getRegionName(): ?string\n    {\n        return $this->region ? (static::regions()[$this->region] ?? $this->region) : null;\n    }", "language": "php", "code": "public function getRegionName(): ?string\n    {\n        return $this->region ? (static::regions()[$this->region] ?? $this->region) : null;\n    }", "code_tokens": ["public", "function", "getRegionName", "(", ")", ":", "?", "string", "{", "return", "$", "this", "->", "region", "?", "(", "static", "::", "regions", "(", ")", "[", "$", "this", "->", "region", "]", "??", "$", "this", "->", "region", ")", ":", "null", ";", "}"], "docstring": "Returns the region name for the current language.\n\n@return string|null", "docstring_tokens": ["Returns", "the", "region", "name", "for", "the", "current", "language", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Language.php#L187-L190", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Language.php", "func_name": "Language.getFullIsoName", "original_string": "public function getFullIsoName(): string\n    {\n        if (!$this->isoName) {\n            $this->isoName = $this->getNames()['isoName'];\n        }\n\n        return $this->isoName;\n    }", "language": "php", "code": "public function getFullIsoName(): string\n    {\n        if (!$this->isoName) {\n            $this->isoName = $this->getNames()['isoName'];\n        }\n\n        return $this->isoName;\n    }", "code_tokens": ["public", "function", "getFullIsoName", "(", ")", ":", "string", "{", "if", "(", "!", "$", "this", "->", "isoName", ")", "{", "$", "this", "->", "isoName", "=", "$", "this", "->", "getNames", "(", ")", "[", "'isoName'", "]", ";", "}", "return", "$", "this", "->", "isoName", ";", "}"], "docstring": "Returns the long ISO language name.\n\n@return string", "docstring_tokens": ["Returns", "the", "long", "ISO", "language", "name", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Language.php#L197-L204", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Language.php", "func_name": "Language.getFullNativeName", "original_string": "public function getFullNativeName(): string\n    {\n        if (!$this->nativeName) {\n            $this->nativeName = $this->getNames()['nativeName'];\n        }\n\n        return $this->nativeName;\n    }", "language": "php", "code": "public function getFullNativeName(): string\n    {\n        if (!$this->nativeName) {\n            $this->nativeName = $this->getNames()['nativeName'];\n        }\n\n        return $this->nativeName;\n    }", "code_tokens": ["public", "function", "getFullNativeName", "(", ")", ":", "string", "{", "if", "(", "!", "$", "this", "->", "nativeName", ")", "{", "$", "this", "->", "nativeName", "=", "$", "this", "->", "getNames", "(", ")", "[", "'nativeName'", "]", ";", "}", "return", "$", "this", "->", "nativeName", ";", "}"], "docstring": "Return the full name of the language in this language.\n\n@return string", "docstring_tokens": ["Return", "the", "full", "name", "of", "the", "language", "in", "this", "language", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Language.php#L223-L230", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Language.php", "func_name": "Language.getIsoName", "original_string": "public function getIsoName(): string\n    {\n        $name = $this->getFullIsoName();\n\n        return trim(strstr($name, ',', true) ?: $name);\n    }", "language": "php", "code": "public function getIsoName(): string\n    {\n        $name = $this->getFullIsoName();\n\n        return trim(strstr($name, ',', true) ?: $name);\n    }", "code_tokens": ["public", "function", "getIsoName", "(", ")", ":", "string", "{", "$", "name", "=", "$", "this", "->", "getFullIsoName", "(", ")", ";", "return", "trim", "(", "strstr", "(", "$", "name", ",", "','", ",", "true", ")", "?", ":", "$", "name", ")", ";", "}"], "docstring": "Returns the short ISO language name.\n\n@return string", "docstring_tokens": ["Returns", "the", "short", "ISO", "language", "name", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Language.php#L249-L254", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Language.php", "func_name": "Language.getNativeName", "original_string": "public function getNativeName(): string\n    {\n        $name = $this->getFullNativeName();\n\n        return trim(strstr($name, ',', true) ?: $name);\n    }", "language": "php", "code": "public function getNativeName(): string\n    {\n        $name = $this->getFullNativeName();\n\n        return trim(strstr($name, ',', true) ?: $name);\n    }", "code_tokens": ["public", "function", "getNativeName", "(", ")", ":", "string", "{", "$", "name", "=", "$", "this", "->", "getFullNativeName", "(", ")", ";", "return", "trim", "(", "strstr", "(", "$", "name", ",", "','", ",", "true", ")", "?", ":", "$", "name", ")", ";", "}"], "docstring": "Get the short name of the language in this language.\n\n@return string", "docstring_tokens": ["Get", "the", "short", "name", "of", "the", "language", "in", "this", "language", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Language.php#L261-L266", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Language.php", "func_name": "Language.getIsoDescription", "original_string": "public function getIsoDescription()\n    {\n        $region = $this->getRegionName();\n        $variant = $this->getVariantName();\n\n        return $this->getIsoName().($region ? ' ('.$region.')' : '').($variant ? ' ('.$variant.')' : '');\n    }", "language": "php", "code": "public function getIsoDescription()\n    {\n        $region = $this->getRegionName();\n        $variant = $this->getVariantName();\n\n        return $this->getIsoName().($region ? ' ('.$region.')' : '').($variant ? ' ('.$variant.')' : '');\n    }", "code_tokens": ["public", "function", "getIsoDescription", "(", ")", "{", "$", "region", "=", "$", "this", "->", "getRegionName", "(", ")", ";", "$", "variant", "=", "$", "this", "->", "getVariantName", "(", ")", ";", "return", "$", "this", "->", "getIsoName", "(", ")", ".", "(", "$", "region", "?", "' ('", ".", "$", "region", ".", "')'", ":", "''", ")", ".", "(", "$", "variant", "?", "' ('", ".", "$", "variant", ".", "')'", ":", "''", ")", ";", "}"], "docstring": "Get a string with short ISO name, region in parentheses if applicable, variant in parentheses if applicable.\n\n@return string", "docstring_tokens": ["Get", "a", "string", "with", "short", "ISO", "name", "region", "in", "parentheses", "if", "applicable", "variant", "in", "parentheses", "if", "applicable", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Language.php#L273-L279", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Language.php", "func_name": "Language.getNativeDescription", "original_string": "public function getNativeDescription()\n    {\n        $region = $this->getRegionName();\n        $variant = $this->getVariantName();\n\n        return $this->getNativeName().($region ? ' ('.$region.')' : '').($variant ? ' ('.$variant.')' : '');\n    }", "language": "php", "code": "public function getNativeDescription()\n    {\n        $region = $this->getRegionName();\n        $variant = $this->getVariantName();\n\n        return $this->getNativeName().($region ? ' ('.$region.')' : '').($variant ? ' ('.$variant.')' : '');\n    }", "code_tokens": ["public", "function", "getNativeDescription", "(", ")", "{", "$", "region", "=", "$", "this", "->", "getRegionName", "(", ")", ";", "$", "variant", "=", "$", "this", "->", "getVariantName", "(", ")", ";", "return", "$", "this", "->", "getNativeName", "(", ")", ".", "(", "$", "region", "?", "' ('", ".", "$", "region", ".", "')'", ":", "''", ")", ".", "(", "$", "variant", "?", "' ('", ".", "$", "variant", ".", "')'", ":", "''", ")", ";", "}"], "docstring": "Get a string with short native name, region in parentheses if applicable, variant in parentheses if applicable.\n\n@return string", "docstring_tokens": ["Get", "a", "string", "with", "short", "native", "name", "region", "in", "parentheses", "if", "applicable", "variant", "in", "parentheses", "if", "applicable", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Language.php#L286-L292", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Language.php", "func_name": "Language.getFullIsoDescription", "original_string": "public function getFullIsoDescription()\n    {\n        $region = $this->getRegionName();\n        $variant = $this->getVariantName();\n\n        return $this->getFullIsoName().($region ? ' ('.$region.')' : '').($variant ? ' ('.$variant.')' : '');\n    }", "language": "php", "code": "public function getFullIsoDescription()\n    {\n        $region = $this->getRegionName();\n        $variant = $this->getVariantName();\n\n        return $this->getFullIsoName().($region ? ' ('.$region.')' : '').($variant ? ' ('.$variant.')' : '');\n    }", "code_tokens": ["public", "function", "getFullIsoDescription", "(", ")", "{", "$", "region", "=", "$", "this", "->", "getRegionName", "(", ")", ";", "$", "variant", "=", "$", "this", "->", "getVariantName", "(", ")", ";", "return", "$", "this", "->", "getFullIsoName", "(", ")", ".", "(", "$", "region", "?", "' ('", ".", "$", "region", ".", "')'", ":", "''", ")", ".", "(", "$", "variant", "?", "' ('", ".", "$", "variant", ".", "')'", ":", "''", ")", ";", "}"], "docstring": "Get a string with long ISO name, region in parentheses if applicable, variant in parentheses if applicable.\n\n@return string", "docstring_tokens": ["Get", "a", "string", "with", "long", "ISO", "name", "region", "in", "parentheses", "if", "applicable", "variant", "in", "parentheses", "if", "applicable", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Language.php#L299-L305", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Language.php", "func_name": "Language.getFullNativeDescription", "original_string": "public function getFullNativeDescription()\n    {\n        $region = $this->getRegionName();\n        $variant = $this->getVariantName();\n\n        return $this->getFullNativeName().($region ? ' ('.$region.')' : '').($variant ? ' ('.$variant.')' : '');\n    }", "language": "php", "code": "public function getFullNativeDescription()\n    {\n        $region = $this->getRegionName();\n        $variant = $this->getVariantName();\n\n        return $this->getFullNativeName().($region ? ' ('.$region.')' : '').($variant ? ' ('.$variant.')' : '');\n    }", "code_tokens": ["public", "function", "getFullNativeDescription", "(", ")", "{", "$", "region", "=", "$", "this", "->", "getRegionName", "(", ")", ";", "$", "variant", "=", "$", "this", "->", "getVariantName", "(", ")", ";", "return", "$", "this", "->", "getFullNativeName", "(", ")", ".", "(", "$", "region", "?", "' ('", ".", "$", "region", ".", "')'", ":", "''", ")", ".", "(", "$", "variant", "?", "' ('", ".", "$", "variant", ".", "')'", ":", "''", ")", ";", "}"], "docstring": "Get a string with long native name, region in parentheses if applicable, variant in parentheses if applicable.\n\n@return string", "docstring_tokens": ["Get", "a", "string", "with", "long", "native", "name", "region", "in", "parentheses", "if", "applicable", "variant", "in", "parentheses", "if", "applicable", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Language.php#L312-L318", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Translator.php", "func_name": "Translator.get", "original_string": "public static function get($locale = null)\n    {\n        $locale = $locale ?: 'en';\n\n        if (!isset(static::$singletons[$locale])) {\n            static::$singletons[$locale] = new static($locale ?: 'en');\n        }\n\n        return static::$singletons[$locale];\n    }", "language": "php", "code": "public static function get($locale = null)\n    {\n        $locale = $locale ?: 'en';\n\n        if (!isset(static::$singletons[$locale])) {\n            static::$singletons[$locale] = new static($locale ?: 'en');\n        }\n\n        return static::$singletons[$locale];\n    }", "code_tokens": ["public", "static", "function", "get", "(", "$", "locale", "=", "null", ")", "{", "$", "locale", "=", "$", "locale", "?", ":", "'en'", ";", "if", "(", "!", "isset", "(", "static", "::", "$", "singletons", "[", "$", "locale", "]", ")", ")", "{", "static", "::", "$", "singletons", "[", "$", "locale", "]", "=", "new", "static", "(", "$", "locale", "?", ":", "'en'", ")", ";", "}", "return", "static", "::", "$", "singletons", "[", "$", "locale", "]", ";", "}"], "docstring": "Return a singleton instance of Translator.\n\n@param string|null $locale optional initial locale (\"en\" - english by default)\n\n@return static", "docstring_tokens": ["Return", "a", "singleton", "instance", "of", "Translator", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Translator.php#L55-L64", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Translator.php", "func_name": "Translator.removeDirectory", "original_string": "public function removeDirectory(string $directory)\n    {\n        $search = rtrim(strtr($directory, '\\\\', '/'), '/');\n\n        return $this->setDirectories(array_filter($this->getDirectories(), function ($item) use ($search) {\n            return rtrim(strtr($item, '\\\\', '/'), '/') !== $search;\n        }));\n    }", "language": "php", "code": "public function removeDirectory(string $directory)\n    {\n        $search = rtrim(strtr($directory, '\\\\', '/'), '/');\n\n        return $this->setDirectories(array_filter($this->getDirectories(), function ($item) use ($search) {\n            return rtrim(strtr($item, '\\\\', '/'), '/') !== $search;\n        }));\n    }", "code_tokens": ["public", "function", "removeDirectory", "(", "string", "$", "directory", ")", "{", "$", "search", "=", "rtrim", "(", "strtr", "(", "$", "directory", ",", "'\\\\'", ",", "'/'", ")", ",", "'/'", ")", ";", "return", "$", "this", "->", "setDirectories", "(", "array_filter", "(", "$", "this", "->", "getDirectories", "(", ")", ",", "function", "(", "$", "item", ")", "use", "(", "$", "search", ")", "{", "return", "rtrim", "(", "strtr", "(", "$", "item", ",", "'\\\\'", ",", "'/'", ")", ",", "'/'", ")", "!==", "$", "search", ";", "}", ")", ")", ";", "}"], "docstring": "Remove a directory from the list translation files are searched in.\n\n@param string $directory directory path\n\n@return $this", "docstring_tokens": ["Remove", "a", "directory", "from", "the", "list", "translation", "files", "are", "searched", "in", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Translator.php#L120-L127", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Translator.php", "func_name": "Translator.loadMessagesFromFile", "original_string": "protected function loadMessagesFromFile($locale)\n    {\n        if (isset($this->messages[$locale])) {\n            return true;\n        }\n\n        return $this->resetMessages($locale);\n    }", "language": "php", "code": "protected function loadMessagesFromFile($locale)\n    {\n        if (isset($this->messages[$locale])) {\n            return true;\n        }\n\n        return $this->resetMessages($locale);\n    }", "code_tokens": ["protected", "function", "loadMessagesFromFile", "(", "$", "locale", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "messages", "[", "$", "locale", "]", ")", ")", "{", "return", "true", ";", "}", "return", "$", "this", "->", "resetMessages", "(", "$", "locale", ")", ";", "}"], "docstring": "Init messages language from matching file in Lang directory.\n\n@param string $locale\n\n@return bool", "docstring_tokens": ["Init", "messages", "language", "from", "matching", "file", "in", "Lang", "directory", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Translator.php#L240-L247", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Translator.php", "func_name": "Translator.setMessages", "original_string": "public function setMessages($locale, $messages)\n    {\n        $this->loadMessagesFromFile($locale);\n        $this->addResource('array', $messages, $locale);\n        $this->messages[$locale] = array_merge(\n            isset($this->messages[$locale]) ? $this->messages[$locale] : [],\n            $messages\n        );\n\n        return $this;\n    }", "language": "php", "code": "public function setMessages($locale, $messages)\n    {\n        $this->loadMessagesFromFile($locale);\n        $this->addResource('array', $messages, $locale);\n        $this->messages[$locale] = array_merge(\n            isset($this->messages[$locale]) ? $this->messages[$locale] : [],\n            $messages\n        );\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setMessages", "(", "$", "locale", ",", "$", "messages", ")", "{", "$", "this", "->", "loadMessagesFromFile", "(", "$", "locale", ")", ";", "$", "this", "->", "addResource", "(", "'array'", ",", "$", "messages", ",", "$", "locale", ")", ";", "$", "this", "->", "messages", "[", "$", "locale", "]", "=", "array_merge", "(", "isset", "(", "$", "this", "->", "messages", "[", "$", "locale", "]", ")", "?", "$", "this", "->", "messages", "[", "$", "locale", "]", ":", "[", "]", ",", "$", "messages", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Set messages of a locale and take file first if present.\n\n@param string $locale\n@param array  $messages\n\n@return $this", "docstring_tokens": ["Set", "messages", "of", "a", "locale", "and", "take", "file", "first", "if", "present", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Translator.php#L257-L267", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Translator.php", "func_name": "Translator.getMessages", "original_string": "public function getMessages($locale = null)\n    {\n        return $locale === null ? $this->messages : $this->messages[$locale];\n    }", "language": "php", "code": "public function getMessages($locale = null)\n    {\n        return $locale === null ? $this->messages : $this->messages[$locale];\n    }", "code_tokens": ["public", "function", "getMessages", "(", "$", "locale", "=", "null", ")", "{", "return", "$", "locale", "===", "null", "?", "$", "this", "->", "messages", ":", "$", "this", "->", "messages", "[", "$", "locale", "]", ";", "}"], "docstring": "Get messages of a locale, if none given, return all the\nlanguages.\n\n@param string|null $locale\n\n@return array", "docstring_tokens": ["Get", "messages", "of", "a", "locale", "if", "none", "given", "return", "all", "the", "languages", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Translator.php#L289-L292", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Options.php", "func_name": "Options.getSettings", "original_string": "public function getSettings()\n    {\n        $settings = [];\n        $map = [\n            'localStrictModeEnabled' => 'strictMode',\n            'localMonthsOverflow' => 'monthOverflow',\n            'localYearsOverflow' => 'yearOverflow',\n            'localHumanDiffOptions' => 'humanDiffOptions',\n            'localToStringFormat' => 'toStringFormat',\n            'localSerializer' => 'toJsonFormat',\n            'localMacros' => 'macros',\n            'localGenericMacros' => 'genericMacros',\n            'locale' => 'locale',\n            'tzName' => 'timezone',\n            'localFormatFunction' => 'formatFunction',\n        ];\n        foreach ($map as $property => $key) {\n            $value = $this->$property ?? null;\n            if ($value !== null) {\n                $settings[$key] = $value;\n            }\n        }\n\n        return $settings;\n    }", "language": "php", "code": "public function getSettings()\n    {\n        $settings = [];\n        $map = [\n            'localStrictModeEnabled' => 'strictMode',\n            'localMonthsOverflow' => 'monthOverflow',\n            'localYearsOverflow' => 'yearOverflow',\n            'localHumanDiffOptions' => 'humanDiffOptions',\n            'localToStringFormat' => 'toStringFormat',\n            'localSerializer' => 'toJsonFormat',\n            'localMacros' => 'macros',\n            'localGenericMacros' => 'genericMacros',\n            'locale' => 'locale',\n            'tzName' => 'timezone',\n            'localFormatFunction' => 'formatFunction',\n        ];\n        foreach ($map as $property => $key) {\n            $value = $this->$property ?? null;\n            if ($value !== null) {\n                $settings[$key] = $value;\n            }\n        }\n\n        return $settings;\n    }", "code_tokens": ["public", "function", "getSettings", "(", ")", "{", "$", "settings", "=", "[", "]", ";", "$", "map", "=", "[", "'localStrictModeEnabled'", "=>", "'strictMode'", ",", "'localMonthsOverflow'", "=>", "'monthOverflow'", ",", "'localYearsOverflow'", "=>", "'yearOverflow'", ",", "'localHumanDiffOptions'", "=>", "'humanDiffOptions'", ",", "'localToStringFormat'", "=>", "'toStringFormat'", ",", "'localSerializer'", "=>", "'toJsonFormat'", ",", "'localMacros'", "=>", "'macros'", ",", "'localGenericMacros'", "=>", "'genericMacros'", ",", "'locale'", "=>", "'locale'", ",", "'tzName'", "=>", "'timezone'", ",", "'localFormatFunction'", "=>", "'formatFunction'", ",", "]", ";", "foreach", "(", "$", "map", "as", "$", "property", "=>", "$", "key", ")", "{", "$", "value", "=", "$", "this", "->", "$", "property", "??", "null", ";", "if", "(", "$", "value", "!==", "null", ")", "{", "$", "settings", "[", "$", "key", "]", "=", "$", "value", ";", "}", "}", "return", "$", "settings", ";", "}"], "docstring": "Returns current local settings.\n\n@return array", "docstring_tokens": ["Returns", "current", "local", "settings", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Options.php#L381-L405", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Macro.php", "func_name": "Macro.genericMacro", "original_string": "public static function genericMacro($macro, $priority = 0)\n    {\n        if (!isset(static::$globalGenericMacros[$priority])) {\n            static::$globalGenericMacros[$priority] = [];\n            krsort(static::$globalGenericMacros, SORT_NUMERIC);\n        }\n\n        static::$globalGenericMacros[$priority][] = $macro;\n    }", "language": "php", "code": "public static function genericMacro($macro, $priority = 0)\n    {\n        if (!isset(static::$globalGenericMacros[$priority])) {\n            static::$globalGenericMacros[$priority] = [];\n            krsort(static::$globalGenericMacros, SORT_NUMERIC);\n        }\n\n        static::$globalGenericMacros[$priority][] = $macro;\n    }", "code_tokens": ["public", "static", "function", "genericMacro", "(", "$", "macro", ",", "$", "priority", "=", "0", ")", "{", "if", "(", "!", "isset", "(", "static", "::", "$", "globalGenericMacros", "[", "$", "priority", "]", ")", ")", "{", "static", "::", "$", "globalGenericMacros", "[", "$", "priority", "]", "=", "[", "]", ";", "krsort", "(", "static", "::", "$", "globalGenericMacros", ",", "SORT_NUMERIC", ")", ";", "}", "static", "::", "$", "globalGenericMacros", "[", "$", "priority", "]", "[", "]", "=", "$", "macro", ";", "}"], "docstring": "Register a custom macro.\n\n@param object|callable $macro\n@param int             $priority marco with higher priority is tried first\n\n@return void", "docstring_tokens": ["Register", "a", "custom", "macro", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Macro.php#L89-L97", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Difference.php", "func_name": "Difference.diffInMonths", "original_string": "public function diffInMonths($date = null, $absolute = true)\n    {\n        $date = $this->resolveCarbon($date);\n\n        return $this->diffInYears($date, $absolute) * static::MONTHS_PER_YEAR + (int) $this->diff($date, $absolute)->format('%r%m');\n    }", "language": "php", "code": "public function diffInMonths($date = null, $absolute = true)\n    {\n        $date = $this->resolveCarbon($date);\n\n        return $this->diffInYears($date, $absolute) * static::MONTHS_PER_YEAR + (int) $this->diff($date, $absolute)->format('%r%m');\n    }", "code_tokens": ["public", "function", "diffInMonths", "(", "$", "date", "=", "null", ",", "$", "absolute", "=", "true", ")", "{", "$", "date", "=", "$", "this", "->", "resolveCarbon", "(", "$", "date", ")", ";", "return", "$", "this", "->", "diffInYears", "(", "$", "date", ",", "$", "absolute", ")", "*", "static", "::", "MONTHS_PER_YEAR", "+", "(", "int", ")", "$", "this", "->", "diff", "(", "$", "date", ",", "$", "absolute", ")", "->", "format", "(", "'%r%m'", ")", ";", "}"], "docstring": "Get the difference in months\n\n@param Carbon|\\DateTimeInterface|string|null $date\n@param bool                                  $absolute Get the absolute of the difference\n\n@return int", "docstring_tokens": ["Get", "the", "difference", "in", "months"], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Difference.php#L133-L138", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Difference.php", "func_name": "Difference.diffInHoursFiltered", "original_string": "public function diffInHoursFiltered(Closure $callback, $date = null, $absolute = true)\n    {\n        return $this->diffFiltered(CarbonInterval::hour(), $callback, $date, $absolute);\n    }", "language": "php", "code": "public function diffInHoursFiltered(Closure $callback, $date = null, $absolute = true)\n    {\n        return $this->diffFiltered(CarbonInterval::hour(), $callback, $date, $absolute);\n    }", "code_tokens": ["public", "function", "diffInHoursFiltered", "(", "Closure", "$", "callback", ",", "$", "date", "=", "null", ",", "$", "absolute", "=", "true", ")", "{", "return", "$", "this", "->", "diffFiltered", "(", "CarbonInterval", "::", "hour", "(", ")", ",", "$", "callback", ",", "$", "date", ",", "$", "absolute", ")", ";", "}"], "docstring": "Get the difference in hours using a filter closure\n\n@param Closure                               $callback\n@param Carbon|\\DateTimeInterface|string|null $date\n@param bool                                  $absolute Get the absolute of the difference\n\n@return int", "docstring_tokens": ["Get", "the", "difference", "in", "hours", "using", "a", "filter", "closure"], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Difference.php#L189-L192", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Difference.php", "func_name": "Difference.diffInWeekdays", "original_string": "public function diffInWeekdays($date = null, $absolute = true)\n    {\n        return $this->diffInDaysFiltered(function (CarbonInterface $date) {\n            return $date->isWeekday();\n        }, $date, $absolute);\n    }", "language": "php", "code": "public function diffInWeekdays($date = null, $absolute = true)\n    {\n        return $this->diffInDaysFiltered(function (CarbonInterface $date) {\n            return $date->isWeekday();\n        }, $date, $absolute);\n    }", "code_tokens": ["public", "function", "diffInWeekdays", "(", "$", "date", "=", "null", ",", "$", "absolute", "=", "true", ")", "{", "return", "$", "this", "->", "diffInDaysFiltered", "(", "function", "(", "CarbonInterface", "$", "date", ")", "{", "return", "$", "date", "->", "isWeekday", "(", ")", ";", "}", ",", "$", "date", ",", "$", "absolute", ")", ";", "}"], "docstring": "Get the difference in weekdays\n\n@param Carbon|\\DateTimeInterface|string|null $date\n@param bool                                  $absolute Get the absolute of the difference\n\n@return int", "docstring_tokens": ["Get", "the", "difference", "in", "weekdays"], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Difference.php#L230-L235", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Difference.php", "func_name": "Difference.diffInWeekendDays", "original_string": "public function diffInWeekendDays($date = null, $absolute = true)\n    {\n        return $this->diffInDaysFiltered(function (CarbonInterface $date) {\n            return $date->isWeekend();\n        }, $date, $absolute);\n    }", "language": "php", "code": "public function diffInWeekendDays($date = null, $absolute = true)\n    {\n        return $this->diffInDaysFiltered(function (CarbonInterface $date) {\n            return $date->isWeekend();\n        }, $date, $absolute);\n    }", "code_tokens": ["public", "function", "diffInWeekendDays", "(", "$", "date", "=", "null", ",", "$", "absolute", "=", "true", ")", "{", "return", "$", "this", "->", "diffInDaysFiltered", "(", "function", "(", "CarbonInterface", "$", "date", ")", "{", "return", "$", "date", "->", "isWeekend", "(", ")", ";", "}", ",", "$", "date", ",", "$", "absolute", ")", ";", "}"], "docstring": "Get the difference in weekend days using a filter\n\n@param Carbon|\\DateTimeInterface|string|null $date\n@param bool                                  $absolute Get the absolute of the difference\n\n@return int", "docstring_tokens": ["Get", "the", "difference", "in", "weekend", "days", "using", "a", "filter"], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Difference.php#L245-L250", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Difference.php", "func_name": "Difference.diffInRealHours", "original_string": "public function diffInRealHours($date = null, $absolute = true)\n    {\n        return (int) ($this->diffInRealSeconds($date, $absolute) / static::SECONDS_PER_MINUTE / static::MINUTES_PER_HOUR);\n    }", "language": "php", "code": "public function diffInRealHours($date = null, $absolute = true)\n    {\n        return (int) ($this->diffInRealSeconds($date, $absolute) / static::SECONDS_PER_MINUTE / static::MINUTES_PER_HOUR);\n    }", "code_tokens": ["public", "function", "diffInRealHours", "(", "$", "date", "=", "null", ",", "$", "absolute", "=", "true", ")", "{", "return", "(", "int", ")", "(", "$", "this", "->", "diffInRealSeconds", "(", "$", "date", ",", "$", "absolute", ")", "/", "static", "::", "SECONDS_PER_MINUTE", "/", "static", "::", "MINUTES_PER_HOUR", ")", ";", "}"], "docstring": "Get the difference in hours using timestamps.\n\n@param Carbon|\\DateTimeInterface|string|null $date\n@param bool                                  $absolute Get the absolute of the difference\n\n@return int", "docstring_tokens": ["Get", "the", "difference", "in", "hours", "using", "timestamps", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Difference.php#L273-L276", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Difference.php", "func_name": "Difference.diffInRealMinutes", "original_string": "public function diffInRealMinutes($date = null, $absolute = true)\n    {\n        return (int) ($this->diffInRealSeconds($date, $absolute) / static::SECONDS_PER_MINUTE);\n    }", "language": "php", "code": "public function diffInRealMinutes($date = null, $absolute = true)\n    {\n        return (int) ($this->diffInRealSeconds($date, $absolute) / static::SECONDS_PER_MINUTE);\n    }", "code_tokens": ["public", "function", "diffInRealMinutes", "(", "$", "date", "=", "null", ",", "$", "absolute", "=", "true", ")", "{", "return", "(", "int", ")", "(", "$", "this", "->", "diffInRealSeconds", "(", "$", "date", ",", "$", "absolute", ")", "/", "static", "::", "SECONDS_PER_MINUTE", ")", ";", "}"], "docstring": "Get the difference in minutes using timestamps.\n\n@param Carbon|\\DateTimeInterface|string|null $date\n@param bool                                  $absolute Get the absolute of the difference\n\n@return int", "docstring_tokens": ["Get", "the", "difference", "in", "minutes", "using", "timestamps", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Difference.php#L299-L302", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Difference.php", "func_name": "Difference.diffInMicroseconds", "original_string": "public function diffInMicroseconds($date = null, $absolute = true)\n    {\n        $diff = $this->diff($this->resolveCarbon($date));\n        $value = (int) round((((($diff->days * static::HOURS_PER_DAY) +\n            $diff->h) * static::MINUTES_PER_HOUR +\n            $diff->i) * static::SECONDS_PER_MINUTE +\n            ($diff->f + $diff->s)) * static::MICROSECONDS_PER_SECOND);\n\n        return $absolute || !$diff->invert ? $value : -$value;\n    }", "language": "php", "code": "public function diffInMicroseconds($date = null, $absolute = true)\n    {\n        $diff = $this->diff($this->resolveCarbon($date));\n        $value = (int) round((((($diff->days * static::HOURS_PER_DAY) +\n            $diff->h) * static::MINUTES_PER_HOUR +\n            $diff->i) * static::SECONDS_PER_MINUTE +\n            ($diff->f + $diff->s)) * static::MICROSECONDS_PER_SECOND);\n\n        return $absolute || !$diff->invert ? $value : -$value;\n    }", "code_tokens": ["public", "function", "diffInMicroseconds", "(", "$", "date", "=", "null", ",", "$", "absolute", "=", "true", ")", "{", "$", "diff", "=", "$", "this", "->", "diff", "(", "$", "this", "->", "resolveCarbon", "(", "$", "date", ")", ")", ";", "$", "value", "=", "(", "int", ")", "round", "(", "(", "(", "(", "(", "$", "diff", "->", "days", "*", "static", "::", "HOURS_PER_DAY", ")", "+", "$", "diff", "->", "h", ")", "*", "static", "::", "MINUTES_PER_HOUR", "+", "$", "diff", "->", "i", ")", "*", "static", "::", "SECONDS_PER_MINUTE", "+", "(", "$", "diff", "->", "f", "+", "$", "diff", "->", "s", ")", ")", "*", "static", "::", "MICROSECONDS_PER_SECOND", ")", ";", "return", "$", "absolute", "||", "!", "$", "diff", "->", "invert", "?", "$", "value", ":", "-", "$", "value", ";", "}"], "docstring": "Get the difference in microseconds.\n\n@param Carbon|\\DateTimeInterface|string|null $date\n@param bool                                  $absolute Get the absolute of the difference\n\n@return int", "docstring_tokens": ["Get", "the", "difference", "in", "microseconds", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Difference.php#L334-L343", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Difference.php", "func_name": "Difference.diffInMilliseconds", "original_string": "public function diffInMilliseconds($date = null, $absolute = true)\n    {\n        return (int) ($this->diffInMicroseconds($date, $absolute) / static::MICROSECONDS_PER_MILLISECOND);\n    }", "language": "php", "code": "public function diffInMilliseconds($date = null, $absolute = true)\n    {\n        return (int) ($this->diffInMicroseconds($date, $absolute) / static::MICROSECONDS_PER_MILLISECOND);\n    }", "code_tokens": ["public", "function", "diffInMilliseconds", "(", "$", "date", "=", "null", ",", "$", "absolute", "=", "true", ")", "{", "return", "(", "int", ")", "(", "$", "this", "->", "diffInMicroseconds", "(", "$", "date", ",", "$", "absolute", ")", "/", "static", "::", "MICROSECONDS_PER_MILLISECOND", ")", ";", "}"], "docstring": "Get the difference in milliseconds.\n\n@param Carbon|\\DateTimeInterface|string|null $date\n@param bool                                  $absolute Get the absolute of the difference\n\n@return int", "docstring_tokens": ["Get", "the", "difference", "in", "milliseconds", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Difference.php#L353-L356", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Difference.php", "func_name": "Difference.diffInRealSeconds", "original_string": "public function diffInRealSeconds($date = null, $absolute = true)\n    {\n        /** @var CarbonInterface $date */\n        $date = $this->resolveCarbon($date);\n        $value = $date->getTimestamp() - $this->getTimestamp();\n\n        return $absolute ? abs($value) : $value;\n    }", "language": "php", "code": "public function diffInRealSeconds($date = null, $absolute = true)\n    {\n        /** @var CarbonInterface $date */\n        $date = $this->resolveCarbon($date);\n        $value = $date->getTimestamp() - $this->getTimestamp();\n\n        return $absolute ? abs($value) : $value;\n    }", "code_tokens": ["public", "function", "diffInRealSeconds", "(", "$", "date", "=", "null", ",", "$", "absolute", "=", "true", ")", "{", "$", "date", "=", "$", "this", "->", "resolveCarbon", "(", "$", "date", ")", ";", "$", "value", "=", "$", "date", "->", "getTimestamp", "(", ")", "-", "$", "this", "->", "getTimestamp", "(", ")", ";", "return", "$", "absolute", "?", "abs", "(", "$", "value", ")", ":", "$", "value", ";", "}"], "docstring": "Get the difference in seconds using timestamps.\n\n@param Carbon|\\DateTimeInterface|string|null $date\n@param bool                                  $absolute Get the absolute of the difference\n\n@return int", "docstring_tokens": ["Get", "the", "difference", "in", "seconds", "using", "timestamps", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Difference.php#L366-L373", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Difference.php", "func_name": "Difference.diffInRealMicroseconds", "original_string": "public function diffInRealMicroseconds($date = null, $absolute = true)\n    {\n        /** @var CarbonInterface $date */\n        $date = $this->resolveCarbon($date);\n        $value = ($date->timestamp - $this->timestamp) * static::MICROSECONDS_PER_SECOND +\n            $date->micro - $this->micro;\n\n        return $absolute ? abs($value) : $value;\n    }", "language": "php", "code": "public function diffInRealMicroseconds($date = null, $absolute = true)\n    {\n        /** @var CarbonInterface $date */\n        $date = $this->resolveCarbon($date);\n        $value = ($date->timestamp - $this->timestamp) * static::MICROSECONDS_PER_SECOND +\n            $date->micro - $this->micro;\n\n        return $absolute ? abs($value) : $value;\n    }", "code_tokens": ["public", "function", "diffInRealMicroseconds", "(", "$", "date", "=", "null", ",", "$", "absolute", "=", "true", ")", "{", "$", "date", "=", "$", "this", "->", "resolveCarbon", "(", "$", "date", ")", ";", "$", "value", "=", "(", "$", "date", "->", "timestamp", "-", "$", "this", "->", "timestamp", ")", "*", "static", "::", "MICROSECONDS_PER_SECOND", "+", "$", "date", "->", "micro", "-", "$", "this", "->", "micro", ";", "return", "$", "absolute", "?", "abs", "(", "$", "value", ")", ":", "$", "value", ";", "}"], "docstring": "Get the difference in microseconds using timestamps.\n\n@param Carbon|\\DateTimeInterface|string|null $date\n@param bool                                  $absolute Get the absolute of the difference\n\n@return int", "docstring_tokens": ["Get", "the", "difference", "in", "microseconds", "using", "timestamps", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Difference.php#L383-L391", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Difference.php", "func_name": "Difference.diffInRealMilliseconds", "original_string": "public function diffInRealMilliseconds($date = null, $absolute = true)\n    {\n        return (int) ($this->diffInRealMicroseconds($date, $absolute) / static::MICROSECONDS_PER_MILLISECOND);\n    }", "language": "php", "code": "public function diffInRealMilliseconds($date = null, $absolute = true)\n    {\n        return (int) ($this->diffInRealMicroseconds($date, $absolute) / static::MICROSECONDS_PER_MILLISECOND);\n    }", "code_tokens": ["public", "function", "diffInRealMilliseconds", "(", "$", "date", "=", "null", ",", "$", "absolute", "=", "true", ")", "{", "return", "(", "int", ")", "(", "$", "this", "->", "diffInRealMicroseconds", "(", "$", "date", ",", "$", "absolute", ")", "/", "static", "::", "MICROSECONDS_PER_MILLISECOND", ")", ";", "}"], "docstring": "Get the difference in milliseconds using timestamps.\n\n@param Carbon|\\DateTimeInterface|string|null $date\n@param bool                                  $absolute Get the absolute of the difference\n\n@return int", "docstring_tokens": ["Get", "the", "difference", "in", "milliseconds", "using", "timestamps", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Difference.php#L401-L404", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Boundaries.php", "func_name": "Boundaries.endOfSecond", "original_string": "public function endOfSecond()\n    {\n        return $this->setTime($this->hour, $this->minute, $this->second, static::MICROSECONDS_PER_SECOND - 1);\n    }", "language": "php", "code": "public function endOfSecond()\n    {\n        return $this->setTime($this->hour, $this->minute, $this->second, static::MICROSECONDS_PER_SECOND - 1);\n    }", "code_tokens": ["public", "function", "endOfSecond", "(", ")", "{", "return", "$", "this", "->", "setTime", "(", "$", "this", "->", "hour", ",", "$", "this", "->", "minute", ",", "$", "this", "->", "second", ",", "static", "::", "MICROSECONDS_PER_SECOND", "-", "1", ")", ";", "}"], "docstring": "Modify to end of current second, microseconds become 999999\n\n@example\n```\necho Carbon::parse('2018-07-25 12:45:16.334455')\n->endOfSecond()\n->format('H:i:s.u');\n```\n\n@return static|CarbonInterface", "docstring_tokens": ["Modify", "to", "end", "of", "current", "second", "microseconds", "become", "999999"], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Boundaries.php#L397-L400", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Boundaries.php", "func_name": "Boundaries.startOf", "original_string": "public function startOf($unit, ...$params)\n    {\n        $ucfUnit = ucfirst(static::singularUnit($unit));\n        $method = \"startOf$ucfUnit\";\n        if (!method_exists($this, $method)) {\n            throw new InvalidArgumentException(\"Unknown unit '$unit'\");\n        }\n\n        return $this->$method(...$params);\n    }", "language": "php", "code": "public function startOf($unit, ...$params)\n    {\n        $ucfUnit = ucfirst(static::singularUnit($unit));\n        $method = \"startOf$ucfUnit\";\n        if (!method_exists($this, $method)) {\n            throw new InvalidArgumentException(\"Unknown unit '$unit'\");\n        }\n\n        return $this->$method(...$params);\n    }", "code_tokens": ["public", "function", "startOf", "(", "$", "unit", ",", "...", "$", "params", ")", "{", "$", "ucfUnit", "=", "ucfirst", "(", "static", "::", "singularUnit", "(", "$", "unit", ")", ")", ";", "$", "method", "=", "\"startOf$ucfUnit\"", ";", "if", "(", "!", "method_exists", "(", "$", "this", ",", "$", "method", ")", ")", "{", "throw", "new", "InvalidArgumentException", "(", "\"Unknown unit '$unit'\"", ")", ";", "}", "return", "$", "this", "->", "$", "method", "(", "...", "$", "params", ")", ";", "}"], "docstring": "Modify to start of current given unit.\n\n@example\n```\necho Carbon::parse('2018-07-25 12:45:16.334455')\n->startOf('month')\n->endOf('week', Carbon::FRIDAY);\n```\n\n@param string            $unit\n@param array<int, mixed> $params\n\n@return static|CarbonInterface", "docstring_tokens": ["Modify", "to", "start", "of", "current", "given", "unit", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Boundaries.php#L417-L426", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Units.php", "func_name": "Units.add", "original_string": "public function add($unit, $value = 1, $overflow = null)\n    {\n        if (is_string($unit) && func_num_args() === 1) {\n            $unit = CarbonInterval::make($unit);\n        }\n\n        if ($unit instanceof DateInterval) {\n            return parent::add($unit);\n        }\n\n        if (is_numeric($unit)) {\n            $tempUnit = $value;\n            $value = $unit;\n            $unit = $tempUnit;\n        }\n\n        return $this->addUnit($unit, $value, $overflow);\n    }", "language": "php", "code": "public function add($unit, $value = 1, $overflow = null)\n    {\n        if (is_string($unit) && func_num_args() === 1) {\n            $unit = CarbonInterval::make($unit);\n        }\n\n        if ($unit instanceof DateInterval) {\n            return parent::add($unit);\n        }\n\n        if (is_numeric($unit)) {\n            $tempUnit = $value;\n            $value = $unit;\n            $unit = $tempUnit;\n        }\n\n        return $this->addUnit($unit, $value, $overflow);\n    }", "code_tokens": ["public", "function", "add", "(", "$", "unit", ",", "$", "value", "=", "1", ",", "$", "overflow", "=", "null", ")", "{", "if", "(", "is_string", "(", "$", "unit", ")", "&&", "func_num_args", "(", ")", "===", "1", ")", "{", "$", "unit", "=", "CarbonInterval", "::", "make", "(", "$", "unit", ")", ";", "}", "if", "(", "$", "unit", "instanceof", "DateInterval", ")", "{", "return", "parent", "::", "add", "(", "$", "unit", ")", ";", "}", "if", "(", "is_numeric", "(", "$", "unit", ")", ")", "{", "$", "tempUnit", "=", "$", "value", ";", "$", "value", "=", "$", "unit", ";", "$", "unit", "=", "$", "tempUnit", ";", "}", "return", "$", "this", "->", "addUnit", "(", "$", "unit", ",", "$", "value", ",", "$", "overflow", ")", ";", "}"], "docstring": "Add given units or interval to the current instance.\n\n@example $date->add('hour', 3)\n@example $date->add(15, 'days')\n@example $date->add(CarbonInterval::days(4))\n\n@param string|DateInterval $unit\n@param int                 $value\n@param bool|null           $overflow\n\n@return CarbonInterface", "docstring_tokens": ["Add", "given", "units", "or", "interval", "to", "the", "current", "instance", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Units.php#L157-L174", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Units.php", "func_name": "Units.subUnit", "original_string": "public function subUnit($unit, $value = 1, $overflow = null)\n    {\n        return $this->addUnit($unit, -$value, $overflow);\n    }", "language": "php", "code": "public function subUnit($unit, $value = 1, $overflow = null)\n    {\n        return $this->addUnit($unit, -$value, $overflow);\n    }", "code_tokens": ["public", "function", "subUnit", "(", "$", "unit", ",", "$", "value", "=", "1", ",", "$", "overflow", "=", "null", ")", "{", "return", "$", "this", "->", "addUnit", "(", "$", "unit", ",", "-", "$", "value", ",", "$", "overflow", ")", ";", "}"], "docstring": "Subtract given units to the current instance.\n\n@param string    $unit\n@param int       $value\n@param bool|null $overflow\n\n@return CarbonInterface", "docstring_tokens": ["Subtract", "given", "units", "to", "the", "current", "instance", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Units.php#L276-L279", "partition": "train"}
{"repo": "briannesbitt/Carbon", "path": "src/Carbon/Traits/Rounding.php", "func_name": "Rounding.roundUnit", "original_string": "public function roundUnit($unit, $precision = 1, $function = 'round')\n    {\n        $metaUnits = [\n            // @call roundUnit\n            'millennium' => [static::YEARS_PER_MILLENNIUM, 'year'],\n            // @call roundUnit\n            'century' => [static::YEARS_PER_CENTURY, 'year'],\n            // @call roundUnit\n            'decade' => [static::YEARS_PER_DECADE, 'year'],\n            // @call roundUnit\n            'quarter' => [static::MONTHS_PER_QUARTER, 'month'],\n            // @call roundUnit\n            'millisecond' => [1000, 'microsecond'],\n        ];\n        $normalizedUnit = static::singularUnit($unit);\n        $ranges = array_merge(static::getRangesByUnit(), [\n            // @call roundUnit\n            'microsecond' => [0, 999999],\n        ]);\n        $factor = 1;\n        if (isset($metaUnits[$normalizedUnit])) {\n            [$factor, $normalizedUnit] = $metaUnits[$normalizedUnit];\n        }\n        $precision *= $factor;\n\n        if (!isset($ranges[$normalizedUnit])) {\n            throw new InvalidArgumentException(\"Unknown unit '$unit' to floor\");\n        }\n\n        $found = false;\n        $fraction = 0;\n        $arguments = null;\n        $factor = $this->year < 0 ? -1 : 1;\n        $changes = [];\n\n        foreach ($ranges as $unit => [$minimum, $maximum]) {\n            if ($normalizedUnit === $unit) {\n                $arguments = [$this->$unit, $minimum];\n                $fraction = $precision - floor($precision);\n                $found = true;\n\n                continue;\n            }\n\n            if ($found) {\n                $delta = $maximum + 1 - $minimum;\n                $factor /= $delta;\n                $fraction *= $delta;\n                $arguments[0] += $this->$unit * $factor;\n                $changes[$unit] = round($minimum + ($fraction ? $fraction * call_user_func($function, ($this->$unit - $minimum) / $fraction) : 0));\n                // Cannot use modulo as it lose double precision\n                while ($changes[$unit] >= $delta) {\n                    $changes[$unit] -= $delta;\n                }\n                $fraction -= floor($fraction);\n            }\n        }\n\n        [$value, $minimum] = $arguments;\n        /** @var CarbonInterface $result */\n        $result = $this->$normalizedUnit(floor(call_user_func($function, ($value - $minimum) / $precision) * $precision + $minimum));\n        foreach ($changes as $unit => $value) {\n            $result = $result->$unit($value);\n        }\n\n        return $result;\n    }", "language": "php", "code": "public function roundUnit($unit, $precision = 1, $function = 'round')\n    {\n        $metaUnits = [\n            // @call roundUnit\n            'millennium' => [static::YEARS_PER_MILLENNIUM, 'year'],\n            // @call roundUnit\n            'century' => [static::YEARS_PER_CENTURY, 'year'],\n            // @call roundUnit\n            'decade' => [static::YEARS_PER_DECADE, 'year'],\n            // @call roundUnit\n            'quarter' => [static::MONTHS_PER_QUARTER, 'month'],\n            // @call roundUnit\n            'millisecond' => [1000, 'microsecond'],\n        ];\n        $normalizedUnit = static::singularUnit($unit);\n        $ranges = array_merge(static::getRangesByUnit(), [\n            // @call roundUnit\n            'microsecond' => [0, 999999],\n        ]);\n        $factor = 1;\n        if (isset($metaUnits[$normalizedUnit])) {\n            [$factor, $normalizedUnit] = $metaUnits[$normalizedUnit];\n        }\n        $precision *= $factor;\n\n        if (!isset($ranges[$normalizedUnit])) {\n            throw new InvalidArgumentException(\"Unknown unit '$unit' to floor\");\n        }\n\n        $found = false;\n        $fraction = 0;\n        $arguments = null;\n        $factor = $this->year < 0 ? -1 : 1;\n        $changes = [];\n\n        foreach ($ranges as $unit => [$minimum, $maximum]) {\n            if ($normalizedUnit === $unit) {\n                $arguments = [$this->$unit, $minimum];\n                $fraction = $precision - floor($precision);\n                $found = true;\n\n                continue;\n            }\n\n            if ($found) {\n                $delta = $maximum + 1 - $minimum;\n                $factor /= $delta;\n                $fraction *= $delta;\n                $arguments[0] += $this->$unit * $factor;\n                $changes[$unit] = round($minimum + ($fraction ? $fraction * call_user_func($function, ($this->$unit - $minimum) / $fraction) : 0));\n                // Cannot use modulo as it lose double precision\n                while ($changes[$unit] >= $delta) {\n                    $changes[$unit] -= $delta;\n                }\n                $fraction -= floor($fraction);\n            }\n        }\n\n        [$value, $minimum] = $arguments;\n        /** @var CarbonInterface $result */\n        $result = $this->$normalizedUnit(floor(call_user_func($function, ($value - $minimum) / $precision) * $precision + $minimum));\n        foreach ($changes as $unit => $value) {\n            $result = $result->$unit($value);\n        }\n\n        return $result;\n    }", "code_tokens": ["public", "function", "roundUnit", "(", "$", "unit", ",", "$", "precision", "=", "1", ",", "$", "function", "=", "'round'", ")", "{", "$", "metaUnits", "=", "[", "'millennium'", "=>", "[", "static", "::", "YEARS_PER_MILLENNIUM", ",", "'year'", "]", ",", "'century'", "=>", "[", "static", "::", "YEARS_PER_CENTURY", ",", "'year'", "]", ",", "'decade'", "=>", "[", "static", "::", "YEARS_PER_DECADE", ",", "'year'", "]", ",", "'quarter'", "=>", "[", "static", "::", "MONTHS_PER_QUARTER", ",", "'month'", "]", ",", "'millisecond'", "=>", "[", "1000", ",", "'microsecond'", "]", ",", "]", ";", "$", "normalizedUnit", "=", "static", "::", "singularUnit", "(", "$", "unit", ")", ";", "$", "ranges", "=", "array_merge", "(", "static", "::", "getRangesByUnit", "(", ")", ",", "[", "'microsecond'", "=>", "[", "0", ",", "999999", "]", ",", "]", ")", ";", "$", "factor", "=", "1", ";", "if", "(", "isset", "(", "$", "metaUnits", "[", "$", "normalizedUnit", "]", ")", ")", "{", "[", "$", "factor", ",", "$", "normalizedUnit", "]", "=", "$", "metaUnits", "[", "$", "normalizedUnit", "]", ";", "}", "$", "precision", "*=", "$", "factor", ";", "if", "(", "!", "isset", "(", "$", "ranges", "[", "$", "normalizedUnit", "]", ")", ")", "{", "throw", "new", "InvalidArgumentException", "(", "\"Unknown unit '$unit' to floor\"", ")", ";", "}", "$", "found", "=", "false", ";", "$", "fraction", "=", "0", ";", "$", "arguments", "=", "null", ";", "$", "factor", "=", "$", "this", "->", "year", "<", "0", "?", "-", "1", ":", "1", ";", "$", "changes", "=", "[", "]", ";", "foreach", "(", "$", "ranges", "as", "$", "unit", "=>", "[", "$", "minimum", ",", "$", "maximum", "]", ")", "{", "if", "(", "$", "normalizedUnit", "===", "$", "unit", ")", "{", "$", "arguments", "=", "[", "$", "this", "->", "$", "unit", ",", "$", "minimum", "]", ";", "$", "fraction", "=", "$", "precision", "-", "floor", "(", "$", "precision", ")", ";", "$", "found", "=", "true", ";", "continue", ";", "}", "if", "(", "$", "found", ")", "{", "$", "delta", "=", "$", "maximum", "+", "1", "-", "$", "minimum", ";", "$", "factor", "/=", "$", "delta", ";", "$", "fraction", "*=", "$", "delta", ";", "$", "arguments", "[", "0", "]", "+=", "$", "this", "->", "$", "unit", "*", "$", "factor", ";", "$", "changes", "[", "$", "unit", "]", "=", "round", "(", "$", "minimum", "+", "(", "$", "fraction", "?", "$", "fraction", "*", "call_user_func", "(", "$", "function", ",", "(", "$", "this", "->", "$", "unit", "-", "$", "minimum", ")", "/", "$", "fraction", ")", ":", "0", ")", ")", ";", "while", "(", "$", "changes", "[", "$", "unit", "]", ">=", "$", "delta", ")", "{", "$", "changes", "[", "$", "unit", "]", "-=", "$", "delta", ";", "}", "$", "fraction", "-=", "floor", "(", "$", "fraction", ")", ";", "}", "}", "[", "$", "value", ",", "$", "minimum", "]", "=", "$", "arguments", ";", "$", "result", "=", "$", "this", "->", "$", "normalizedUnit", "(", "floor", "(", "call_user_func", "(", "$", "function", ",", "(", "$", "value", "-", "$", "minimum", ")", "/", "$", "precision", ")", "*", "$", "precision", "+", "$", "minimum", ")", ")", ";", "foreach", "(", "$", "changes", "as", "$", "unit", "=>", "$", "value", ")", "{", "$", "result", "=", "$", "result", "->", "$", "unit", "(", "$", "value", ")", ";", "}", "return", "$", "result", ";", "}"], "docstring": "Round the current instance at the given unit with given precision if specified and the given function.\n\n@param string    $unit\n@param float|int $precision\n@param string    $function\n\n@return CarbonInterface", "docstring_tokens": ["Round", "the", "current", "instance", "at", "the", "given", "unit", "with", "given", "precision", "if", "specified", "and", "the", "given", "function", "."], "sha": "3f227330a10b48e5a27b74b12d972d787d5a78b3", "url": "https://github.com/briannesbitt/Carbon/blob/3f227330a10b48e5a27b74b12d972d787d5a78b3/src/Carbon/Traits/Rounding.php#L37-L103", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Cluster/Distributor/HashRing.php", "func_name": "HashRing.addNodeToRing", "original_string": "protected function addNodeToRing(&$ring, $node, $totalNodes, $replicas, $weightRatio)\n    {\n        $nodeObject = $node['object'];\n        $nodeHash = $this->getNodeHash($nodeObject);\n        $replicas = (int) round($weightRatio * $totalNodes * $replicas);\n\n        for ($i = 0; $i < $replicas; ++$i) {\n            $key = crc32(\"$nodeHash:$i\");\n            $ring[$key] = $nodeObject;\n        }\n    }", "language": "php", "code": "protected function addNodeToRing(&$ring, $node, $totalNodes, $replicas, $weightRatio)\n    {\n        $nodeObject = $node['object'];\n        $nodeHash = $this->getNodeHash($nodeObject);\n        $replicas = (int) round($weightRatio * $totalNodes * $replicas);\n\n        for ($i = 0; $i < $replicas; ++$i) {\n            $key = crc32(\"$nodeHash:$i\");\n            $ring[$key] = $nodeObject;\n        }\n    }", "code_tokens": ["protected", "function", "addNodeToRing", "(", "&", "$", "ring", ",", "$", "node", ",", "$", "totalNodes", ",", "$", "replicas", ",", "$", "weightRatio", ")", "{", "$", "nodeObject", "=", "$", "node", "[", "'object'", "]", ";", "$", "nodeHash", "=", "$", "this", "->", "getNodeHash", "(", "$", "nodeObject", ")", ";", "$", "replicas", "=", "(", "int", ")", "round", "(", "$", "weightRatio", "*", "$", "totalNodes", "*", "$", "replicas", ")", ";", "for", "(", "$", "i", "=", "0", ";", "$", "i", "<", "$", "replicas", ";", "++", "$", "i", ")", "{", "$", "key", "=", "crc32", "(", "\"$nodeHash:$i\"", ")", ";", "$", "ring", "[", "$", "key", "]", "=", "$", "nodeObject", ";", "}", "}"], "docstring": "Implements the logic needed to add a node to the hashring.\n\n@param array $ring        Source hashring.\n@param mixed $node        Node object to be added.\n@param int   $totalNodes  Total number of nodes.\n@param int   $replicas    Number of replicas in the ring.\n@param float $weightRatio Weight ratio for the node.", "docstring_tokens": ["Implements", "the", "logic", "needed", "to", "add", "a", "node", "to", "the", "hashring", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Cluster/Distributor/HashRing.php#L157-L167", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/AbstractConnection.php", "func_name": "AbstractConnection.createExceptionMessage", "original_string": "private function createExceptionMessage($message)\n    {\n        $parameters = $this->parameters;\n\n        if ($parameters->scheme === 'unix') {\n            return \"$message [$parameters->scheme:$parameters->path]\";\n        }\n\n        if (filter_var($parameters->host, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n            return \"$message [$parameters->scheme://[$parameters->host]:$parameters->port]\";\n        }\n\n        return \"$message [$parameters->scheme://$parameters->host:$parameters->port]\";\n    }", "language": "php", "code": "private function createExceptionMessage($message)\n    {\n        $parameters = $this->parameters;\n\n        if ($parameters->scheme === 'unix') {\n            return \"$message [$parameters->scheme:$parameters->path]\";\n        }\n\n        if (filter_var($parameters->host, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n            return \"$message [$parameters->scheme://[$parameters->host]:$parameters->port]\";\n        }\n\n        return \"$message [$parameters->scheme://$parameters->host:$parameters->port]\";\n    }", "code_tokens": ["private", "function", "createExceptionMessage", "(", "$", "message", ")", "{", "$", "parameters", "=", "$", "this", "->", "parameters", ";", "if", "(", "$", "parameters", "->", "scheme", "===", "'unix'", ")", "{", "return", "\"$message [$parameters->scheme:$parameters->path]\"", ";", "}", "if", "(", "filter_var", "(", "$", "parameters", "->", "host", ",", "FILTER_VALIDATE_IP", ",", "FILTER_FLAG_IPV6", ")", ")", "{", "return", "\"$message [$parameters->scheme://[$parameters->host]:$parameters->port]\"", ";", "}", "return", "\"$message [$parameters->scheme://$parameters->host:$parameters->port]\"", ";", "}"], "docstring": "Helper method that returns an exception message augmented with useful\ndetails from the connection parameters.\n\n@param string $message Error message.\n\n@return string", "docstring_tokens": ["Helper", "method", "that", "returns", "an", "exception", "message", "augmented", "with", "useful", "details", "from", "the", "connection", "parameters", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/AbstractConnection.php#L131-L144", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/AbstractConnection.php", "func_name": "AbstractConnection.onConnectionError", "original_string": "protected function onConnectionError($message, $code = null)\n    {\n        CommunicationException::handle(\n            new ConnectionException($this, static::createExceptionMessage($message), $code)\n        );\n    }", "language": "php", "code": "protected function onConnectionError($message, $code = null)\n    {\n        CommunicationException::handle(\n            new ConnectionException($this, static::createExceptionMessage($message), $code)\n        );\n    }", "code_tokens": ["protected", "function", "onConnectionError", "(", "$", "message", ",", "$", "code", "=", "null", ")", "{", "CommunicationException", "::", "handle", "(", "new", "ConnectionException", "(", "$", "this", ",", "static", "::", "createExceptionMessage", "(", "$", "message", ")", ",", "$", "code", ")", ")", ";", "}"], "docstring": "Helper method to handle connection errors.\n\n@param string $message Error message.\n@param int    $code    Error code.", "docstring_tokens": ["Helper", "method", "to", "handle", "connection", "errors", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/AbstractConnection.php#L152-L157", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Command/ServerClient.php", "func_name": "ServerClient.parseClientList", "original_string": "protected function parseClientList($data)\n    {\n        $clients = array();\n\n        foreach (explode(\"\\n\", $data, -1) as $clientData) {\n            $client = array();\n\n            foreach (explode(' ', $clientData) as $kv) {\n                @list($k, $v) = explode('=', $kv);\n                $client[$k] = $v;\n            }\n\n            $clients[] = $client;\n        }\n\n        return $clients;\n    }", "language": "php", "code": "protected function parseClientList($data)\n    {\n        $clients = array();\n\n        foreach (explode(\"\\n\", $data, -1) as $clientData) {\n            $client = array();\n\n            foreach (explode(' ', $clientData) as $kv) {\n                @list($k, $v) = explode('=', $kv);\n                $client[$k] = $v;\n            }\n\n            $clients[] = $client;\n        }\n\n        return $clients;\n    }", "code_tokens": ["protected", "function", "parseClientList", "(", "$", "data", ")", "{", "$", "clients", "=", "array", "(", ")", ";", "foreach", "(", "explode", "(", "\"\\n\"", ",", "$", "data", ",", "-", "1", ")", "as", "$", "clientData", ")", "{", "$", "client", "=", "array", "(", ")", ";", "foreach", "(", "explode", "(", "' '", ",", "$", "clientData", ")", "as", "$", "kv", ")", "{", "@", "list", "(", "$", "k", ",", "$", "v", ")", "=", "explode", "(", "'='", ",", "$", "kv", ")", ";", "$", "client", "[", "$", "k", "]", "=", "$", "v", ";", "}", "$", "clients", "[", "]", "=", "$", "client", ";", "}", "return", "$", "clients", ";", "}"], "docstring": "Parses the response to CLIENT LIST and returns a structured list.\n\n@param string $data Response buffer.\n\n@return array", "docstring_tokens": ["Parses", "the", "response", "to", "CLIENT", "LIST", "and", "returns", "a", "structured", "list", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Command/ServerClient.php#L57-L73", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Pipeline/Pipeline.php", "func_name": "Pipeline.exception", "original_string": "protected function exception(ConnectionInterface $connection, ErrorResponseInterface $response)\n    {\n        $connection->disconnect();\n        $message = $response->getMessage();\n\n        throw new ServerException($message);\n    }", "language": "php", "code": "protected function exception(ConnectionInterface $connection, ErrorResponseInterface $response)\n    {\n        $connection->disconnect();\n        $message = $response->getMessage();\n\n        throw new ServerException($message);\n    }", "code_tokens": ["protected", "function", "exception", "(", "ConnectionInterface", "$", "connection", ",", "ErrorResponseInterface", "$", "response", ")", "{", "$", "connection", "->", "disconnect", "(", ")", ";", "$", "message", "=", "$", "response", "->", "getMessage", "(", ")", ";", "throw", "new", "ServerException", "(", "$", "message", ")", ";", "}"], "docstring": "Throws an exception on -ERR responses returned by Redis.\n\n@param ConnectionInterface    $connection Redis connection that returned the error.\n@param ErrorResponseInterface $response   Instance of the error response.\n\n@throws ServerException", "docstring_tokens": ["Throws", "an", "exception", "on", "-", "ERR", "responses", "returned", "by", "Redis", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Pipeline/Pipeline.php#L97-L103", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Pipeline/Pipeline.php", "func_name": "Pipeline.getConnection", "original_string": "protected function getConnection()\n    {\n        $connection = $this->getClient()->getConnection();\n\n        if ($connection instanceof ReplicationInterface) {\n            $connection->switchTo('master');\n        }\n\n        return $connection;\n    }", "language": "php", "code": "protected function getConnection()\n    {\n        $connection = $this->getClient()->getConnection();\n\n        if ($connection instanceof ReplicationInterface) {\n            $connection->switchTo('master');\n        }\n\n        return $connection;\n    }", "code_tokens": ["protected", "function", "getConnection", "(", ")", "{", "$", "connection", "=", "$", "this", "->", "getClient", "(", ")", "->", "getConnection", "(", ")", ";", "if", "(", "$", "connection", "instanceof", "ReplicationInterface", ")", "{", "$", "connection", "->", "switchTo", "(", "'master'", ")", ";", "}", "return", "$", "connection", ";", "}"], "docstring": "Returns the underlying connection to be used by the pipeline.\n\n@return ConnectionInterface", "docstring_tokens": ["Returns", "the", "underlying", "connection", "to", "be", "used", "by", "the", "pipeline", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Pipeline/Pipeline.php#L110-L119", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Pipeline/Pipeline.php", "func_name": "Pipeline.executePipeline", "original_string": "protected function executePipeline(ConnectionInterface $connection, \\SplQueue $commands)\n    {\n        foreach ($commands as $command) {\n            $connection->writeRequest($command);\n        }\n\n        $responses = array();\n        $exceptions = $this->throwServerExceptions();\n\n        while (!$commands->isEmpty()) {\n            $command = $commands->dequeue();\n            $response = $connection->readResponse($command);\n\n            if (!$response instanceof ResponseInterface) {\n                $responses[] = $command->parseResponse($response);\n            } elseif ($response instanceof ErrorResponseInterface && $exceptions) {\n                $this->exception($connection, $response);\n            } else {\n                $responses[] = $response;\n            }\n        }\n\n        return $responses;\n    }", "language": "php", "code": "protected function executePipeline(ConnectionInterface $connection, \\SplQueue $commands)\n    {\n        foreach ($commands as $command) {\n            $connection->writeRequest($command);\n        }\n\n        $responses = array();\n        $exceptions = $this->throwServerExceptions();\n\n        while (!$commands->isEmpty()) {\n            $command = $commands->dequeue();\n            $response = $connection->readResponse($command);\n\n            if (!$response instanceof ResponseInterface) {\n                $responses[] = $command->parseResponse($response);\n            } elseif ($response instanceof ErrorResponseInterface && $exceptions) {\n                $this->exception($connection, $response);\n            } else {\n                $responses[] = $response;\n            }\n        }\n\n        return $responses;\n    }", "code_tokens": ["protected", "function", "executePipeline", "(", "ConnectionInterface", "$", "connection", ",", "\\", "SplQueue", "$", "commands", ")", "{", "foreach", "(", "$", "commands", "as", "$", "command", ")", "{", "$", "connection", "->", "writeRequest", "(", "$", "command", ")", ";", "}", "$", "responses", "=", "array", "(", ")", ";", "$", "exceptions", "=", "$", "this", "->", "throwServerExceptions", "(", ")", ";", "while", "(", "!", "$", "commands", "->", "isEmpty", "(", ")", ")", "{", "$", "command", "=", "$", "commands", "->", "dequeue", "(", ")", ";", "$", "response", "=", "$", "connection", "->", "readResponse", "(", "$", "command", ")", ";", "if", "(", "!", "$", "response", "instanceof", "ResponseInterface", ")", "{", "$", "responses", "[", "]", "=", "$", "command", "->", "parseResponse", "(", "$", "response", ")", ";", "}", "elseif", "(", "$", "response", "instanceof", "ErrorResponseInterface", "&&", "$", "exceptions", ")", "{", "$", "this", "->", "exception", "(", "$", "connection", ",", "$", "response", ")", ";", "}", "else", "{", "$", "responses", "[", "]", "=", "$", "response", ";", "}", "}", "return", "$", "responses", ";", "}"], "docstring": "Implements the logic to flush the queued commands and read the responses\nfrom the current connection.\n\n@param ConnectionInterface $connection Current connection instance.\n@param \\SplQueue           $commands   Queued commands.\n\n@return array", "docstring_tokens": ["Implements", "the", "logic", "to", "flush", "the", "queued", "commands", "and", "read", "the", "responses", "from", "the", "current", "connection", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Pipeline/Pipeline.php#L130-L153", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Pipeline/Pipeline.php", "func_name": "Pipeline.flushPipeline", "original_string": "public function flushPipeline($send = true)\n    {\n        if ($send && !$this->pipeline->isEmpty()) {\n            $responses = $this->executePipeline($this->getConnection(), $this->pipeline);\n            $this->responses = array_merge($this->responses, $responses);\n        } else {\n            $this->pipeline = new \\SplQueue();\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function flushPipeline($send = true)\n    {\n        if ($send && !$this->pipeline->isEmpty()) {\n            $responses = $this->executePipeline($this->getConnection(), $this->pipeline);\n            $this->responses = array_merge($this->responses, $responses);\n        } else {\n            $this->pipeline = new \\SplQueue();\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "flushPipeline", "(", "$", "send", "=", "true", ")", "{", "if", "(", "$", "send", "&&", "!", "$", "this", "->", "pipeline", "->", "isEmpty", "(", ")", ")", "{", "$", "responses", "=", "$", "this", "->", "executePipeline", "(", "$", "this", "->", "getConnection", "(", ")", ",", "$", "this", "->", "pipeline", ")", ";", "$", "this", "->", "responses", "=", "array_merge", "(", "$", "this", "->", "responses", ",", "$", "responses", ")", ";", "}", "else", "{", "$", "this", "->", "pipeline", "=", "new", "\\", "SplQueue", "(", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Flushes the buffer holding all of the commands queued so far.\n\n@param bool $send Specifies if the commands in the buffer should be sent to Redis.\n\n@return $this", "docstring_tokens": ["Flushes", "the", "buffer", "holding", "all", "of", "the", "commands", "queued", "so", "far", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Pipeline/Pipeline.php#L162-L172", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Pipeline/Pipeline.php", "func_name": "Pipeline.execute", "original_string": "public function execute($callable = null)\n    {\n        if ($callable && !is_callable($callable)) {\n            throw new \\InvalidArgumentException('The argument must be a callable object.');\n        }\n\n        $exception = null;\n        $this->setRunning(true);\n\n        try {\n            if ($callable) {\n                call_user_func($callable, $this);\n            }\n\n            $this->flushPipeline();\n        } catch (\\Exception $exception) {\n            // NOOP\n        }\n\n        $this->setRunning(false);\n\n        if ($exception) {\n            throw $exception;\n        }\n\n        return $this->responses;\n    }", "language": "php", "code": "public function execute($callable = null)\n    {\n        if ($callable && !is_callable($callable)) {\n            throw new \\InvalidArgumentException('The argument must be a callable object.');\n        }\n\n        $exception = null;\n        $this->setRunning(true);\n\n        try {\n            if ($callable) {\n                call_user_func($callable, $this);\n            }\n\n            $this->flushPipeline();\n        } catch (\\Exception $exception) {\n            // NOOP\n        }\n\n        $this->setRunning(false);\n\n        if ($exception) {\n            throw $exception;\n        }\n\n        return $this->responses;\n    }", "code_tokens": ["public", "function", "execute", "(", "$", "callable", "=", "null", ")", "{", "if", "(", "$", "callable", "&&", "!", "is_callable", "(", "$", "callable", ")", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "'The argument must be a callable object.'", ")", ";", "}", "$", "exception", "=", "null", ";", "$", "this", "->", "setRunning", "(", "true", ")", ";", "try", "{", "if", "(", "$", "callable", ")", "{", "call_user_func", "(", "$", "callable", ",", "$", "this", ")", ";", "}", "$", "this", "->", "flushPipeline", "(", ")", ";", "}", "catch", "(", "\\", "Exception", "$", "exception", ")", "{", "}", "$", "this", "->", "setRunning", "(", "false", ")", ";", "if", "(", "$", "exception", ")", "{", "throw", "$", "exception", ";", "}", "return", "$", "this", "->", "responses", ";", "}"], "docstring": "Handles the actual execution of the whole pipeline.\n\n@param mixed $callable Optional callback for execution.\n\n@throws \\Exception\n@throws \\InvalidArgumentException\n\n@return array", "docstring_tokens": ["Handles", "the", "actual", "execution", "of", "the", "whole", "pipeline", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Pipeline/Pipeline.php#L200-L226", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Session/Handler.php", "func_name": "Handler.register", "original_string": "public function register()\n    {\n        if (PHP_VERSION_ID >= 50400) {\n            session_set_save_handler($this, true);\n        } else {\n            session_set_save_handler(\n                array($this, 'open'),\n                array($this, 'close'),\n                array($this, 'read'),\n                array($this, 'write'),\n                array($this, 'destroy'),\n                array($this, 'gc')\n            );\n        }\n    }", "language": "php", "code": "public function register()\n    {\n        if (PHP_VERSION_ID >= 50400) {\n            session_set_save_handler($this, true);\n        } else {\n            session_set_save_handler(\n                array($this, 'open'),\n                array($this, 'close'),\n                array($this, 'read'),\n                array($this, 'write'),\n                array($this, 'destroy'),\n                array($this, 'gc')\n            );\n        }\n    }", "code_tokens": ["public", "function", "register", "(", ")", "{", "if", "(", "PHP_VERSION_ID", ">=", "50400", ")", "{", "session_set_save_handler", "(", "$", "this", ",", "true", ")", ";", "}", "else", "{", "session_set_save_handler", "(", "array", "(", "$", "this", ",", "'open'", ")", ",", "array", "(", "$", "this", ",", "'close'", ")", ",", "array", "(", "$", "this", ",", "'read'", ")", ",", "array", "(", "$", "this", ",", "'write'", ")", ",", "array", "(", "$", "this", ",", "'destroy'", ")", ",", "array", "(", "$", "this", ",", "'gc'", ")", ")", ";", "}", "}"], "docstring": "Registers this instance as the current session handler.", "docstring_tokens": ["Registers", "this", "instance", "as", "the", "current", "session", "handler", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Session/Handler.php#L49-L63", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Profile/Factory.php", "func_name": "Factory.define", "original_string": "public static function define($alias, $class)\n    {\n        $reflection = new \\ReflectionClass($class);\n\n        if (!$reflection->isSubclassOf('Predis\\Profile\\ProfileInterface')) {\n            throw new \\InvalidArgumentException(\"The class '$class' is not a valid profile class.\");\n        }\n\n        self::$profiles[$alias] = $class;\n    }", "language": "php", "code": "public static function define($alias, $class)\n    {\n        $reflection = new \\ReflectionClass($class);\n\n        if (!$reflection->isSubclassOf('Predis\\Profile\\ProfileInterface')) {\n            throw new \\InvalidArgumentException(\"The class '$class' is not a valid profile class.\");\n        }\n\n        self::$profiles[$alias] = $class;\n    }", "code_tokens": ["public", "static", "function", "define", "(", "$", "alias", ",", "$", "class", ")", "{", "$", "reflection", "=", "new", "\\", "ReflectionClass", "(", "$", "class", ")", ";", "if", "(", "!", "$", "reflection", "->", "isSubclassOf", "(", "'Predis\\Profile\\ProfileInterface'", ")", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "\"The class '$class' is not a valid profile class.\"", ")", ";", "}", "self", "::", "$", "profiles", "[", "$", "alias", "]", "=", "$", "class", ";", "}"], "docstring": "Registers a new server profile.\n\n@param string $alias Profile version or alias.\n@param string $class FQN of a class implementing Predis\\Profile\\ProfileInterface.\n\n@throws \\InvalidArgumentException", "docstring_tokens": ["Registers", "a", "new", "server", "profile", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Profile/Factory.php#L71-L80", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Profile/Factory.php", "func_name": "Factory.get", "original_string": "public static function get($version)\n    {\n        if (!isset(self::$profiles[$version])) {\n            throw new ClientException(\"Unknown server profile: '$version'.\");\n        }\n\n        $profile = self::$profiles[$version];\n\n        return new $profile();\n    }", "language": "php", "code": "public static function get($version)\n    {\n        if (!isset(self::$profiles[$version])) {\n            throw new ClientException(\"Unknown server profile: '$version'.\");\n        }\n\n        $profile = self::$profiles[$version];\n\n        return new $profile();\n    }", "code_tokens": ["public", "static", "function", "get", "(", "$", "version", ")", "{", "if", "(", "!", "isset", "(", "self", "::", "$", "profiles", "[", "$", "version", "]", ")", ")", "{", "throw", "new", "ClientException", "(", "\"Unknown server profile: '$version'.\"", ")", ";", "}", "$", "profile", "=", "self", "::", "$", "profiles", "[", "$", "version", "]", ";", "return", "new", "$", "profile", "(", ")", ";", "}"], "docstring": "Returns the specified server profile.\n\n@param string $version Profile version or alias.\n\n@throws ClientException\n\n@return ProfileInterface", "docstring_tokens": ["Returns", "the", "specified", "server", "profile", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Profile/Factory.php#L91-L100", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Response/Status.php", "func_name": "Status.get", "original_string": "public static function get($payload)\n    {\n        switch ($payload) {\n            case 'OK':\n            case 'QUEUED':\n                if (isset(self::$$payload)) {\n                    return self::$$payload;\n                }\n\n                return self::$$payload = new self($payload);\n\n            default:\n                return new self($payload);\n        }\n    }", "language": "php", "code": "public static function get($payload)\n    {\n        switch ($payload) {\n            case 'OK':\n            case 'QUEUED':\n                if (isset(self::$$payload)) {\n                    return self::$$payload;\n                }\n\n                return self::$$payload = new self($payload);\n\n            default:\n                return new self($payload);\n        }\n    }", "code_tokens": ["public", "static", "function", "get", "(", "$", "payload", ")", "{", "switch", "(", "$", "payload", ")", "{", "case", "'OK'", ":", "case", "'QUEUED'", ":", "if", "(", "isset", "(", "self", "::", "$", "$", "payload", ")", ")", "{", "return", "self", "::", "$", "$", "payload", ";", "}", "return", "self", "::", "$", "$", "payload", "=", "new", "self", "(", "$", "payload", ")", ";", "default", ":", "return", "new", "self", "(", "$", "payload", ")", ";", "}", "}"], "docstring": "Returns an instance of a status response object.\n\nCommon status responses such as OK or QUEUED are cached in order to lower\nthe global memory usage especially when using pipelines.\n\n@param string $payload Status response payload.\n\n@return string", "docstring_tokens": ["Returns", "an", "instance", "of", "a", "status", "response", "object", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Response/Status.php#L64-L78", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/Factory.php", "func_name": "Factory.checkInitializer", "original_string": "protected function checkInitializer($initializer)\n    {\n        if (is_callable($initializer)) {\n            return $initializer;\n        }\n\n        $class = new \\ReflectionClass($initializer);\n\n        if (!$class->isSubclassOf('Predis\\Connection\\NodeConnectionInterface')) {\n            throw new \\InvalidArgumentException(\n                'A connection initializer must be a valid connection class or a callable object.'\n            );\n        }\n\n        return $initializer;\n    }", "language": "php", "code": "protected function checkInitializer($initializer)\n    {\n        if (is_callable($initializer)) {\n            return $initializer;\n        }\n\n        $class = new \\ReflectionClass($initializer);\n\n        if (!$class->isSubclassOf('Predis\\Connection\\NodeConnectionInterface')) {\n            throw new \\InvalidArgumentException(\n                'A connection initializer must be a valid connection class or a callable object.'\n            );\n        }\n\n        return $initializer;\n    }", "code_tokens": ["protected", "function", "checkInitializer", "(", "$", "initializer", ")", "{", "if", "(", "is_callable", "(", "$", "initializer", ")", ")", "{", "return", "$", "initializer", ";", "}", "$", "class", "=", "new", "\\", "ReflectionClass", "(", "$", "initializer", ")", ";", "if", "(", "!", "$", "class", "->", "isSubclassOf", "(", "'Predis\\Connection\\NodeConnectionInterface'", ")", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "'A connection initializer must be a valid connection class or a callable object.'", ")", ";", "}", "return", "$", "initializer", ";", "}"], "docstring": "Checks if the provided argument represents a valid connection class\nimplementing Predis\\Connection\\NodeConnectionInterface. Optionally,\ncallable objects are used for lazy initialization of connection objects.\n\n@param mixed $initializer FQN of a connection class or a callable for lazy initialization.\n\n@throws \\InvalidArgumentException\n\n@return mixed", "docstring_tokens": ["Checks", "if", "the", "provided", "argument", "represents", "a", "valid", "connection", "class", "implementing", "Predis", "\\", "Connection", "\\", "NodeConnectionInterface", ".", "Optionally", "callable", "objects", "are", "used", "for", "lazy", "initialization", "of", "connection", "objects", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/Factory.php#L45-L60", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/Factory.php", "func_name": "Factory.createParameters", "original_string": "protected function createParameters($parameters)\n    {\n        if (is_string($parameters)) {\n            $parameters = Parameters::parse($parameters);\n        } else {\n            $parameters = $parameters ?: array();\n        }\n\n        if ($this->defaults) {\n            $parameters += $this->defaults;\n        }\n\n        return new Parameters($parameters);\n    }", "language": "php", "code": "protected function createParameters($parameters)\n    {\n        if (is_string($parameters)) {\n            $parameters = Parameters::parse($parameters);\n        } else {\n            $parameters = $parameters ?: array();\n        }\n\n        if ($this->defaults) {\n            $parameters += $this->defaults;\n        }\n\n        return new Parameters($parameters);\n    }", "code_tokens": ["protected", "function", "createParameters", "(", "$", "parameters", ")", "{", "if", "(", "is_string", "(", "$", "parameters", ")", ")", "{", "$", "parameters", "=", "Parameters", "::", "parse", "(", "$", "parameters", ")", ";", "}", "else", "{", "$", "parameters", "=", "$", "parameters", "?", ":", "array", "(", ")", ";", "}", "if", "(", "$", "this", "->", "defaults", ")", "{", "$", "parameters", "+=", "$", "this", "->", "defaults", ";", "}", "return", "new", "Parameters", "(", "$", "parameters", ")", ";", "}"], "docstring": "Creates a connection parameters instance from the supplied argument.\n\n@param mixed $parameters Original connection parameters.\n\n@return ParametersInterface", "docstring_tokens": ["Creates", "a", "connection", "parameters", "instance", "from", "the", "supplied", "argument", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/Factory.php#L152-L165", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/Factory.php", "func_name": "Factory.prepareConnection", "original_string": "protected function prepareConnection(NodeConnectionInterface $connection)\n    {\n        $parameters = $connection->getParameters();\n\n        if (isset($parameters->password)) {\n            $connection->addConnectCommand(\n                new RawCommand(array('AUTH', $parameters->password))\n            );\n        }\n\n        if (isset($parameters->database)) {\n            $connection->addConnectCommand(\n                new RawCommand(array('SELECT', $parameters->database))\n            );\n        }\n    }", "language": "php", "code": "protected function prepareConnection(NodeConnectionInterface $connection)\n    {\n        $parameters = $connection->getParameters();\n\n        if (isset($parameters->password)) {\n            $connection->addConnectCommand(\n                new RawCommand(array('AUTH', $parameters->password))\n            );\n        }\n\n        if (isset($parameters->database)) {\n            $connection->addConnectCommand(\n                new RawCommand(array('SELECT', $parameters->database))\n            );\n        }\n    }", "code_tokens": ["protected", "function", "prepareConnection", "(", "NodeConnectionInterface", "$", "connection", ")", "{", "$", "parameters", "=", "$", "connection", "->", "getParameters", "(", ")", ";", "if", "(", "isset", "(", "$", "parameters", "->", "password", ")", ")", "{", "$", "connection", "->", "addConnectCommand", "(", "new", "RawCommand", "(", "array", "(", "'AUTH'", ",", "$", "parameters", "->", "password", ")", ")", ")", ";", "}", "if", "(", "isset", "(", "$", "parameters", "->", "database", ")", ")", "{", "$", "connection", "->", "addConnectCommand", "(", "new", "RawCommand", "(", "array", "(", "'SELECT'", ",", "$", "parameters", "->", "database", ")", ")", ")", ";", "}", "}"], "docstring": "Prepares a connection instance after its initialization.\n\n@param NodeConnectionInterface $connection Connection instance.", "docstring_tokens": ["Prepares", "a", "connection", "instance", "after", "its", "initialization", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/Factory.php#L172-L187", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/StreamConnection.php", "func_name": "StreamConnection.assertSslSupport", "original_string": "protected function assertSslSupport(ParametersInterface $parameters)\n    {\n        if (\n            filter_var($parameters->persistent, FILTER_VALIDATE_BOOLEAN) &&\n            version_compare(PHP_VERSION, '7.0.0beta') < 0\n        ) {\n            throw new \\InvalidArgumentException('Persistent SSL connections require PHP >= 7.0.0.');\n        }\n    }", "language": "php", "code": "protected function assertSslSupport(ParametersInterface $parameters)\n    {\n        if (\n            filter_var($parameters->persistent, FILTER_VALIDATE_BOOLEAN) &&\n            version_compare(PHP_VERSION, '7.0.0beta') < 0\n        ) {\n            throw new \\InvalidArgumentException('Persistent SSL connections require PHP >= 7.0.0.');\n        }\n    }", "code_tokens": ["protected", "function", "assertSslSupport", "(", "ParametersInterface", "$", "parameters", ")", "{", "if", "(", "filter_var", "(", "$", "parameters", "->", "persistent", ",", "FILTER_VALIDATE_BOOLEAN", ")", "&&", "version_compare", "(", "PHP_VERSION", ",", "'7.0.0beta'", ")", "<", "0", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "'Persistent SSL connections require PHP >= 7.0.0.'", ")", ";", "}", "}"], "docstring": "Checks needed conditions for SSL-encrypted connections.\n\n@param ParametersInterface $parameters Initialization parameters for the connection.\n\n@throws \\InvalidArgumentException", "docstring_tokens": ["Checks", "needed", "conditions", "for", "SSL", "-", "encrypted", "connections", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/StreamConnection.php#L82-L90", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/StreamConnection.php", "func_name": "StreamConnection.createStreamSocket", "original_string": "protected function createStreamSocket(ParametersInterface $parameters, $address, $flags)\n    {\n        $timeout = (isset($parameters->timeout) ? (float) $parameters->timeout : 5.0);\n\n        if (!$resource = @stream_socket_client($address, $errno, $errstr, $timeout, $flags)) {\n            $this->onConnectionError(trim($errstr), $errno);\n        }\n\n        if (isset($parameters->read_write_timeout)) {\n            $rwtimeout = (float) $parameters->read_write_timeout;\n            $rwtimeout = $rwtimeout > 0 ? $rwtimeout : -1;\n            $timeoutSeconds = floor($rwtimeout);\n            $timeoutUSeconds = ($rwtimeout - $timeoutSeconds) * 1000000;\n            stream_set_timeout($resource, $timeoutSeconds, $timeoutUSeconds);\n        }\n\n        if (isset($parameters->tcp_nodelay) && function_exists('socket_import_stream')) {\n            $socket = socket_import_stream($resource);\n            socket_set_option($socket, SOL_TCP, TCP_NODELAY, (int) $parameters->tcp_nodelay);\n        }\n\n        return $resource;\n    }", "language": "php", "code": "protected function createStreamSocket(ParametersInterface $parameters, $address, $flags)\n    {\n        $timeout = (isset($parameters->timeout) ? (float) $parameters->timeout : 5.0);\n\n        if (!$resource = @stream_socket_client($address, $errno, $errstr, $timeout, $flags)) {\n            $this->onConnectionError(trim($errstr), $errno);\n        }\n\n        if (isset($parameters->read_write_timeout)) {\n            $rwtimeout = (float) $parameters->read_write_timeout;\n            $rwtimeout = $rwtimeout > 0 ? $rwtimeout : -1;\n            $timeoutSeconds = floor($rwtimeout);\n            $timeoutUSeconds = ($rwtimeout - $timeoutSeconds) * 1000000;\n            stream_set_timeout($resource, $timeoutSeconds, $timeoutUSeconds);\n        }\n\n        if (isset($parameters->tcp_nodelay) && function_exists('socket_import_stream')) {\n            $socket = socket_import_stream($resource);\n            socket_set_option($socket, SOL_TCP, TCP_NODELAY, (int) $parameters->tcp_nodelay);\n        }\n\n        return $resource;\n    }", "code_tokens": ["protected", "function", "createStreamSocket", "(", "ParametersInterface", "$", "parameters", ",", "$", "address", ",", "$", "flags", ")", "{", "$", "timeout", "=", "(", "isset", "(", "$", "parameters", "->", "timeout", ")", "?", "(", "float", ")", "$", "parameters", "->", "timeout", ":", "5.0", ")", ";", "if", "(", "!", "$", "resource", "=", "@", "stream_socket_client", "(", "$", "address", ",", "$", "errno", ",", "$", "errstr", ",", "$", "timeout", ",", "$", "flags", ")", ")", "{", "$", "this", "->", "onConnectionError", "(", "trim", "(", "$", "errstr", ")", ",", "$", "errno", ")", ";", "}", "if", "(", "isset", "(", "$", "parameters", "->", "read_write_timeout", ")", ")", "{", "$", "rwtimeout", "=", "(", "float", ")", "$", "parameters", "->", "read_write_timeout", ";", "$", "rwtimeout", "=", "$", "rwtimeout", ">", "0", "?", "$", "rwtimeout", ":", "-", "1", ";", "$", "timeoutSeconds", "=", "floor", "(", "$", "rwtimeout", ")", ";", "$", "timeoutUSeconds", "=", "(", "$", "rwtimeout", "-", "$", "timeoutSeconds", ")", "*", "1000000", ";", "stream_set_timeout", "(", "$", "resource", ",", "$", "timeoutSeconds", ",", "$", "timeoutUSeconds", ")", ";", "}", "if", "(", "isset", "(", "$", "parameters", "->", "tcp_nodelay", ")", "&&", "function_exists", "(", "'socket_import_stream'", ")", ")", "{", "$", "socket", "=", "socket_import_stream", "(", "$", "resource", ")", ";", "socket_set_option", "(", "$", "socket", ",", "SOL_TCP", ",", "TCP_NODELAY", ",", "(", "int", ")", "$", "parameters", "->", "tcp_nodelay", ")", ";", "}", "return", "$", "resource", ";", "}"], "docstring": "Creates a connected stream socket resource.\n\n@param ParametersInterface $parameters Connection parameters.\n@param string              $address    Address for stream_socket_client().\n@param int                 $flags      Flags for stream_socket_client().\n\n@return resource", "docstring_tokens": ["Creates", "a", "connected", "stream", "socket", "resource", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/StreamConnection.php#L123-L145", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/StreamConnection.php", "func_name": "StreamConnection.tcpStreamInitializer", "original_string": "protected function tcpStreamInitializer(ParametersInterface $parameters)\n    {\n        if (!filter_var($parameters->host, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n            $address = \"tcp://$parameters->host:$parameters->port\";\n        } else {\n            $address = \"tcp://[$parameters->host]:$parameters->port\";\n        }\n\n        $flags = STREAM_CLIENT_CONNECT;\n\n        if (isset($parameters->async_connect) && $parameters->async_connect) {\n            $flags |= STREAM_CLIENT_ASYNC_CONNECT;\n        }\n\n        if (isset($parameters->persistent)) {\n            if (false !== $persistent = filter_var($parameters->persistent, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE)) {\n                $flags |= STREAM_CLIENT_PERSISTENT;\n\n                if ($persistent === null) {\n                    $address = \"{$address}/{$parameters->persistent}\";\n                }\n            }\n        }\n\n        $resource = $this->createStreamSocket($parameters, $address, $flags);\n\n        return $resource;\n    }", "language": "php", "code": "protected function tcpStreamInitializer(ParametersInterface $parameters)\n    {\n        if (!filter_var($parameters->host, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n            $address = \"tcp://$parameters->host:$parameters->port\";\n        } else {\n            $address = \"tcp://[$parameters->host]:$parameters->port\";\n        }\n\n        $flags = STREAM_CLIENT_CONNECT;\n\n        if (isset($parameters->async_connect) && $parameters->async_connect) {\n            $flags |= STREAM_CLIENT_ASYNC_CONNECT;\n        }\n\n        if (isset($parameters->persistent)) {\n            if (false !== $persistent = filter_var($parameters->persistent, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE)) {\n                $flags |= STREAM_CLIENT_PERSISTENT;\n\n                if ($persistent === null) {\n                    $address = \"{$address}/{$parameters->persistent}\";\n                }\n            }\n        }\n\n        $resource = $this->createStreamSocket($parameters, $address, $flags);\n\n        return $resource;\n    }", "code_tokens": ["protected", "function", "tcpStreamInitializer", "(", "ParametersInterface", "$", "parameters", ")", "{", "if", "(", "!", "filter_var", "(", "$", "parameters", "->", "host", ",", "FILTER_VALIDATE_IP", ",", "FILTER_FLAG_IPV6", ")", ")", "{", "$", "address", "=", "\"tcp://$parameters->host:$parameters->port\"", ";", "}", "else", "{", "$", "address", "=", "\"tcp://[$parameters->host]:$parameters->port\"", ";", "}", "$", "flags", "=", "STREAM_CLIENT_CONNECT", ";", "if", "(", "isset", "(", "$", "parameters", "->", "async_connect", ")", "&&", "$", "parameters", "->", "async_connect", ")", "{", "$", "flags", "|=", "STREAM_CLIENT_ASYNC_CONNECT", ";", "}", "if", "(", "isset", "(", "$", "parameters", "->", "persistent", ")", ")", "{", "if", "(", "false", "!==", "$", "persistent", "=", "filter_var", "(", "$", "parameters", "->", "persistent", ",", "FILTER_VALIDATE_BOOLEAN", ",", "FILTER_NULL_ON_FAILURE", ")", ")", "{", "$", "flags", "|=", "STREAM_CLIENT_PERSISTENT", ";", "if", "(", "$", "persistent", "===", "null", ")", "{", "$", "address", "=", "\"{$address}/{$parameters->persistent}\"", ";", "}", "}", "}", "$", "resource", "=", "$", "this", "->", "createStreamSocket", "(", "$", "parameters", ",", "$", "address", ",", "$", "flags", ")", ";", "return", "$", "resource", ";", "}"], "docstring": "Initializes a TCP stream resource.\n\n@param ParametersInterface $parameters Initialization parameters for the connection.\n\n@return resource", "docstring_tokens": ["Initializes", "a", "TCP", "stream", "resource", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/StreamConnection.php#L154-L181", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/StreamConnection.php", "func_name": "StreamConnection.unixStreamInitializer", "original_string": "protected function unixStreamInitializer(ParametersInterface $parameters)\n    {\n        if (!isset($parameters->path)) {\n            throw new \\InvalidArgumentException('Missing UNIX domain socket path.');\n        }\n\n        $flags = STREAM_CLIENT_CONNECT;\n\n        if (isset($parameters->persistent)) {\n            if (false !== $persistent = filter_var($parameters->persistent, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE)) {\n                $flags |= STREAM_CLIENT_PERSISTENT;\n\n                if ($persistent === null) {\n                    throw new \\InvalidArgumentException(\n                        'Persistent connection IDs are not supported when using UNIX domain sockets.'\n                    );\n                }\n            }\n        }\n\n        $resource = $this->createStreamSocket($parameters, \"unix://{$parameters->path}\", $flags);\n\n        return $resource;\n    }", "language": "php", "code": "protected function unixStreamInitializer(ParametersInterface $parameters)\n    {\n        if (!isset($parameters->path)) {\n            throw new \\InvalidArgumentException('Missing UNIX domain socket path.');\n        }\n\n        $flags = STREAM_CLIENT_CONNECT;\n\n        if (isset($parameters->persistent)) {\n            if (false !== $persistent = filter_var($parameters->persistent, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE)) {\n                $flags |= STREAM_CLIENT_PERSISTENT;\n\n                if ($persistent === null) {\n                    throw new \\InvalidArgumentException(\n                        'Persistent connection IDs are not supported when using UNIX domain sockets.'\n                    );\n                }\n            }\n        }\n\n        $resource = $this->createStreamSocket($parameters, \"unix://{$parameters->path}\", $flags);\n\n        return $resource;\n    }", "code_tokens": ["protected", "function", "unixStreamInitializer", "(", "ParametersInterface", "$", "parameters", ")", "{", "if", "(", "!", "isset", "(", "$", "parameters", "->", "path", ")", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "'Missing UNIX domain socket path.'", ")", ";", "}", "$", "flags", "=", "STREAM_CLIENT_CONNECT", ";", "if", "(", "isset", "(", "$", "parameters", "->", "persistent", ")", ")", "{", "if", "(", "false", "!==", "$", "persistent", "=", "filter_var", "(", "$", "parameters", "->", "persistent", ",", "FILTER_VALIDATE_BOOLEAN", ",", "FILTER_NULL_ON_FAILURE", ")", ")", "{", "$", "flags", "|=", "STREAM_CLIENT_PERSISTENT", ";", "if", "(", "$", "persistent", "===", "null", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "'Persistent connection IDs are not supported when using UNIX domain sockets.'", ")", ";", "}", "}", "}", "$", "resource", "=", "$", "this", "->", "createStreamSocket", "(", "$", "parameters", ",", "\"unix://{$parameters->path}\"", ",", "$", "flags", ")", ";", "return", "$", "resource", ";", "}"], "docstring": "Initializes a UNIX stream resource.\n\n@param ParametersInterface $parameters Initialization parameters for the connection.\n\n@return resource", "docstring_tokens": ["Initializes", "a", "UNIX", "stream", "resource", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/StreamConnection.php#L190-L213", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/StreamConnection.php", "func_name": "StreamConnection.tlsStreamInitializer", "original_string": "protected function tlsStreamInitializer(ParametersInterface $parameters)\n    {\n        $resource = $this->tcpStreamInitializer($parameters);\n        $metadata = stream_get_meta_data($resource);\n\n        // Detect if crypto mode is already enabled for this stream (PHP >= 7.0.0).\n        if (isset($metadata['crypto'])) {\n            return $resource;\n        }\n\n        if (is_array($parameters->ssl)) {\n            $options = $parameters->ssl;\n        } else {\n            $options = array();\n        }\n\n        if (!isset($options['crypto_type'])) {\n            $options['crypto_type'] = STREAM_CRYPTO_METHOD_TLS_CLIENT;\n        }\n\n        if (!stream_context_set_option($resource, array('ssl' => $options))) {\n            $this->onConnectionError('Error while setting SSL context options');\n        }\n\n        if (!stream_socket_enable_crypto($resource, true, $options['crypto_type'])) {\n            $this->onConnectionError('Error while switching to encrypted communication');\n        }\n\n        return $resource;\n    }", "language": "php", "code": "protected function tlsStreamInitializer(ParametersInterface $parameters)\n    {\n        $resource = $this->tcpStreamInitializer($parameters);\n        $metadata = stream_get_meta_data($resource);\n\n        // Detect if crypto mode is already enabled for this stream (PHP >= 7.0.0).\n        if (isset($metadata['crypto'])) {\n            return $resource;\n        }\n\n        if (is_array($parameters->ssl)) {\n            $options = $parameters->ssl;\n        } else {\n            $options = array();\n        }\n\n        if (!isset($options['crypto_type'])) {\n            $options['crypto_type'] = STREAM_CRYPTO_METHOD_TLS_CLIENT;\n        }\n\n        if (!stream_context_set_option($resource, array('ssl' => $options))) {\n            $this->onConnectionError('Error while setting SSL context options');\n        }\n\n        if (!stream_socket_enable_crypto($resource, true, $options['crypto_type'])) {\n            $this->onConnectionError('Error while switching to encrypted communication');\n        }\n\n        return $resource;\n    }", "code_tokens": ["protected", "function", "tlsStreamInitializer", "(", "ParametersInterface", "$", "parameters", ")", "{", "$", "resource", "=", "$", "this", "->", "tcpStreamInitializer", "(", "$", "parameters", ")", ";", "$", "metadata", "=", "stream_get_meta_data", "(", "$", "resource", ")", ";", "if", "(", "isset", "(", "$", "metadata", "[", "'crypto'", "]", ")", ")", "{", "return", "$", "resource", ";", "}", "if", "(", "is_array", "(", "$", "parameters", "->", "ssl", ")", ")", "{", "$", "options", "=", "$", "parameters", "->", "ssl", ";", "}", "else", "{", "$", "options", "=", "array", "(", ")", ";", "}", "if", "(", "!", "isset", "(", "$", "options", "[", "'crypto_type'", "]", ")", ")", "{", "$", "options", "[", "'crypto_type'", "]", "=", "STREAM_CRYPTO_METHOD_TLS_CLIENT", ";", "}", "if", "(", "!", "stream_context_set_option", "(", "$", "resource", ",", "array", "(", "'ssl'", "=>", "$", "options", ")", ")", ")", "{", "$", "this", "->", "onConnectionError", "(", "'Error while setting SSL context options'", ")", ";", "}", "if", "(", "!", "stream_socket_enable_crypto", "(", "$", "resource", ",", "true", ",", "$", "options", "[", "'crypto_type'", "]", ")", ")", "{", "$", "this", "->", "onConnectionError", "(", "'Error while switching to encrypted communication'", ")", ";", "}", "return", "$", "resource", ";", "}"], "docstring": "Initializes a SSL-encrypted TCP stream resource.\n\n@param ParametersInterface $parameters Initialization parameters for the connection.\n\n@return resource", "docstring_tokens": ["Initializes", "a", "SSL", "-", "encrypted", "TCP", "stream", "resource", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/StreamConnection.php#L222-L251", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/StreamConnection.php", "func_name": "StreamConnection.write", "original_string": "protected function write($buffer)\n    {\n        $socket = $this->getResource();\n\n        while (($length = strlen($buffer)) > 0) {\n            $written = @fwrite($socket, $buffer);\n\n            if ($length === $written) {\n                return;\n            }\n\n            if ($written === false || $written === 0) {\n                $this->onConnectionError('Error while writing bytes to the server.');\n            }\n\n            $buffer = substr($buffer, $written);\n        }\n    }", "language": "php", "code": "protected function write($buffer)\n    {\n        $socket = $this->getResource();\n\n        while (($length = strlen($buffer)) > 0) {\n            $written = @fwrite($socket, $buffer);\n\n            if ($length === $written) {\n                return;\n            }\n\n            if ($written === false || $written === 0) {\n                $this->onConnectionError('Error while writing bytes to the server.');\n            }\n\n            $buffer = substr($buffer, $written);\n        }\n    }", "code_tokens": ["protected", "function", "write", "(", "$", "buffer", ")", "{", "$", "socket", "=", "$", "this", "->", "getResource", "(", ")", ";", "while", "(", "(", "$", "length", "=", "strlen", "(", "$", "buffer", ")", ")", ">", "0", ")", "{", "$", "written", "=", "@", "fwrite", "(", "$", "socket", ",", "$", "buffer", ")", ";", "if", "(", "$", "length", "===", "$", "written", ")", "{", "return", ";", "}", "if", "(", "$", "written", "===", "false", "||", "$", "written", "===", "0", ")", "{", "$", "this", "->", "onConnectionError", "(", "'Error while writing bytes to the server.'", ")", ";", "}", "$", "buffer", "=", "substr", "(", "$", "buffer", ",", "$", "written", ")", ";", "}", "}"], "docstring": "Performs a write operation over the stream of the buffer containing a\ncommand serialized with the Redis wire protocol.\n\n@param string $buffer Representation of a command in the Redis wire protocol.", "docstring_tokens": ["Performs", "a", "write", "operation", "over", "the", "stream", "of", "the", "buffer", "containing", "a", "command", "serialized", "with", "the", "Redis", "wire", "protocol", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/StreamConnection.php#L286-L303", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/Aggregate/RedisCluster.php", "func_name": "RedisCluster.removeById", "original_string": "public function removeById($connectionID)\n    {\n        if (isset($this->pool[$connectionID])) {\n            unset(\n                $this->pool[$connectionID],\n                $this->slotsMap\n            );\n\n            return true;\n        }\n\n        return false;\n    }", "language": "php", "code": "public function removeById($connectionID)\n    {\n        if (isset($this->pool[$connectionID])) {\n            unset(\n                $this->pool[$connectionID],\n                $this->slotsMap\n            );\n\n            return true;\n        }\n\n        return false;\n    }", "code_tokens": ["public", "function", "removeById", "(", "$", "connectionID", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "pool", "[", "$", "connectionID", "]", ")", ")", "{", "unset", "(", "$", "this", "->", "pool", "[", "$", "connectionID", "]", ",", "$", "this", "->", "slotsMap", ")", ";", "return", "true", ";", "}", "return", "false", ";", "}"], "docstring": "Removes a connection instance by using its identifier.\n\n@param string $connectionID Connection identifier.\n\n@return bool True if the connection was in the pool.", "docstring_tokens": ["Removes", "a", "connection", "instance", "by", "using", "its", "identifier", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/Aggregate/RedisCluster.php#L152-L164", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/Aggregate/RedisCluster.php", "func_name": "RedisCluster.buildSlotsMap", "original_string": "public function buildSlotsMap()\n    {\n        $this->slotsMap = array();\n\n        foreach ($this->pool as $connectionID => $connection) {\n            $parameters = $connection->getParameters();\n\n            if (!isset($parameters->slots)) {\n                continue;\n            }\n\n            foreach (explode(',', $parameters->slots) as $slotRange) {\n                $slots = explode('-', $slotRange, 2);\n\n                if (!isset($slots[1])) {\n                    $slots[1] = $slots[0];\n                }\n\n                $this->setSlots($slots[0], $slots[1], $connectionID);\n            }\n        }\n\n        return $this->slotsMap;\n    }", "language": "php", "code": "public function buildSlotsMap()\n    {\n        $this->slotsMap = array();\n\n        foreach ($this->pool as $connectionID => $connection) {\n            $parameters = $connection->getParameters();\n\n            if (!isset($parameters->slots)) {\n                continue;\n            }\n\n            foreach (explode(',', $parameters->slots) as $slotRange) {\n                $slots = explode('-', $slotRange, 2);\n\n                if (!isset($slots[1])) {\n                    $slots[1] = $slots[0];\n                }\n\n                $this->setSlots($slots[0], $slots[1], $connectionID);\n            }\n        }\n\n        return $this->slotsMap;\n    }", "code_tokens": ["public", "function", "buildSlotsMap", "(", ")", "{", "$", "this", "->", "slotsMap", "=", "array", "(", ")", ";", "foreach", "(", "$", "this", "->", "pool", "as", "$", "connectionID", "=>", "$", "connection", ")", "{", "$", "parameters", "=", "$", "connection", "->", "getParameters", "(", ")", ";", "if", "(", "!", "isset", "(", "$", "parameters", "->", "slots", ")", ")", "{", "continue", ";", "}", "foreach", "(", "explode", "(", "','", ",", "$", "parameters", "->", "slots", ")", "as", "$", "slotRange", ")", "{", "$", "slots", "=", "explode", "(", "'-'", ",", "$", "slotRange", ",", "2", ")", ";", "if", "(", "!", "isset", "(", "$", "slots", "[", "1", "]", ")", ")", "{", "$", "slots", "[", "1", "]", "=", "$", "slots", "[", "0", "]", ";", "}", "$", "this", "->", "setSlots", "(", "$", "slots", "[", "0", "]", ",", "$", "slots", "[", "1", "]", ",", "$", "connectionID", ")", ";", "}", "}", "return", "$", "this", "->", "slotsMap", ";", "}"], "docstring": "Generates the current slots map by guessing the cluster configuration out\nof the connection parameters of the connections in the pool.\n\nGeneration is based on the same algorithm used by Redis to generate the\ncluster, so it is most effective when all of the connections supplied on\ninitialization have the \"slots\" parameter properly set accordingly to the\ncurrent cluster configuration.\n\n@return array", "docstring_tokens": ["Generates", "the", "current", "slots", "map", "by", "guessing", "the", "cluster", "configuration", "out", "of", "the", "connection", "parameters", "of", "the", "connections", "in", "the", "pool", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/Aggregate/RedisCluster.php#L177-L200", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/Aggregate/RedisCluster.php", "func_name": "RedisCluster.retryCommandOnFailure", "original_string": "private function retryCommandOnFailure(CommandInterface $command, $method)\n    {\n        $failure = false;\n\n        RETRY_COMMAND: {\n            try {\n                $response = $this->getConnection($command)->$method($command);\n            } catch (ConnectionException $exception) {\n                $connection = $exception->getConnection();\n                $connection->disconnect();\n\n                $this->remove($connection);\n\n                if ($failure) {\n                    throw $exception;\n                } elseif ($this->useClusterSlots) {\n                    $this->askSlotsMap();\n                }\n\n                $failure = true;\n\n                goto RETRY_COMMAND;\n            }\n        }\n\n        return $response;\n    }", "language": "php", "code": "private function retryCommandOnFailure(CommandInterface $command, $method)\n    {\n        $failure = false;\n\n        RETRY_COMMAND: {\n            try {\n                $response = $this->getConnection($command)->$method($command);\n            } catch (ConnectionException $exception) {\n                $connection = $exception->getConnection();\n                $connection->disconnect();\n\n                $this->remove($connection);\n\n                if ($failure) {\n                    throw $exception;\n                } elseif ($this->useClusterSlots) {\n                    $this->askSlotsMap();\n                }\n\n                $failure = true;\n\n                goto RETRY_COMMAND;\n            }\n        }\n\n        return $response;\n    }", "code_tokens": ["private", "function", "retryCommandOnFailure", "(", "CommandInterface", "$", "command", ",", "$", "method", ")", "{", "$", "failure", "=", "false", ";", "RETRY_COMMAND", ":", "{", "try", "{", "$", "response", "=", "$", "this", "->", "getConnection", "(", "$", "command", ")", "->", "$", "method", "(", "$", "command", ")", ";", "}", "catch", "(", "ConnectionException", "$", "exception", ")", "{", "$", "connection", "=", "$", "exception", "->", "getConnection", "(", ")", ";", "$", "connection", "->", "disconnect", "(", ")", ";", "$", "this", "->", "remove", "(", "$", "connection", ")", ";", "if", "(", "$", "failure", ")", "{", "throw", "$", "exception", ";", "}", "elseif", "(", "$", "this", "->", "useClusterSlots", ")", "{", "$", "this", "->", "askSlotsMap", "(", ")", ";", "}", "$", "failure", "=", "true", ";", "goto", "RETRY_COMMAND", ";", "}", "}", "return", "$", "response", ";", "}"], "docstring": "Ensures that a command is executed one more time on connection failure.\n\nThe connection to the node that generated the error is evicted from the\npool before trying to fetch an updated slots map from another node. If\nthe new slots map points to an unreachable server the client gives up and\nthrows the exception as the nodes participating in the cluster may still\nhave to agree that something changed in the configuration of the cluster.\n\n@param CommandInterface $command Command instance.\n@param string           $method  Actual method.\n\n@return mixed", "docstring_tokens": ["Ensures", "that", "a", "command", "is", "executed", "one", "more", "time", "on", "connection", "failure", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/Aggregate/RedisCluster.php#L544-L570", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Cluster/ClusterStrategy.php", "func_name": "ClusterStrategy.setCommandHandler", "original_string": "public function setCommandHandler($commandID, $callback = null)\n    {\n        $commandID = strtoupper($commandID);\n\n        if (!isset($callback)) {\n            unset($this->commands[$commandID]);\n\n            return;\n        }\n\n        if (!is_callable($callback)) {\n            throw new \\InvalidArgumentException(\n                'The argument must be a callable object or NULL.'\n            );\n        }\n\n        $this->commands[$commandID] = $callback;\n    }", "language": "php", "code": "public function setCommandHandler($commandID, $callback = null)\n    {\n        $commandID = strtoupper($commandID);\n\n        if (!isset($callback)) {\n            unset($this->commands[$commandID]);\n\n            return;\n        }\n\n        if (!is_callable($callback)) {\n            throw new \\InvalidArgumentException(\n                'The argument must be a callable object or NULL.'\n            );\n        }\n\n        $this->commands[$commandID] = $callback;\n    }", "code_tokens": ["public", "function", "setCommandHandler", "(", "$", "commandID", ",", "$", "callback", "=", "null", ")", "{", "$", "commandID", "=", "strtoupper", "(", "$", "commandID", ")", ";", "if", "(", "!", "isset", "(", "$", "callback", ")", ")", "{", "unset", "(", "$", "this", "->", "commands", "[", "$", "commandID", "]", ")", ";", "return", ";", "}", "if", "(", "!", "is_callable", "(", "$", "callback", ")", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "'The argument must be a callable object or NULL.'", ")", ";", "}", "$", "this", "->", "commands", "[", "$", "commandID", "]", "=", "$", "callback", ";", "}"], "docstring": "Sets an handler for the specified command ID.\n\nThe signature of the callback must have a single parameter of type\nPredis\\Command\\CommandInterface.\n\nWhen the callback argument is omitted or NULL, the previously associated\nhandler for the specified command ID is removed.\n\n@param string $commandID Command ID.\n@param mixed  $callback  A valid callable object, or NULL to unset the handler.\n\n@throws \\InvalidArgumentException", "docstring_tokens": ["Sets", "an", "handler", "for", "the", "specified", "command", "ID", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Cluster/ClusterStrategy.php#L203-L220", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Cluster/ClusterStrategy.php", "func_name": "ClusterStrategy.checkSameSlotForKeys", "original_string": "protected function checkSameSlotForKeys(array $keys)\n    {\n        if (!$count = count($keys)) {\n            return false;\n        }\n\n        $currentSlot = $this->getSlotByKey($keys[0]);\n\n        for ($i = 1; $i < $count; ++$i) {\n            $nextSlot = $this->getSlotByKey($keys[$i]);\n\n            if ($currentSlot !== $nextSlot) {\n                return false;\n            }\n\n            $currentSlot = $nextSlot;\n        }\n\n        return true;\n    }", "language": "php", "code": "protected function checkSameSlotForKeys(array $keys)\n    {\n        if (!$count = count($keys)) {\n            return false;\n        }\n\n        $currentSlot = $this->getSlotByKey($keys[0]);\n\n        for ($i = 1; $i < $count; ++$i) {\n            $nextSlot = $this->getSlotByKey($keys[$i]);\n\n            if ($currentSlot !== $nextSlot) {\n                return false;\n            }\n\n            $currentSlot = $nextSlot;\n        }\n\n        return true;\n    }", "code_tokens": ["protected", "function", "checkSameSlotForKeys", "(", "array", "$", "keys", ")", "{", "if", "(", "!", "$", "count", "=", "count", "(", "$", "keys", ")", ")", "{", "return", "false", ";", "}", "$", "currentSlot", "=", "$", "this", "->", "getSlotByKey", "(", "$", "keys", "[", "0", "]", ")", ";", "for", "(", "$", "i", "=", "1", ";", "$", "i", "<", "$", "count", ";", "++", "$", "i", ")", "{", "$", "nextSlot", "=", "$", "this", "->", "getSlotByKey", "(", "$", "keys", "[", "$", "i", "]", ")", ";", "if", "(", "$", "currentSlot", "!==", "$", "nextSlot", ")", "{", "return", "false", ";", "}", "$", "currentSlot", "=", "$", "nextSlot", ";", "}", "return", "true", ";", "}"], "docstring": "Checks if the specified array of keys will generate the same hash.\n\n@param array $keys Array of keys.\n\n@return bool", "docstring_tokens": ["Checks", "if", "the", "specified", "array", "of", "keys", "will", "generate", "the", "same", "hash", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Cluster/ClusterStrategy.php#L430-L449", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/Aggregate/SentinelReplication.php", "func_name": "SentinelReplication.createSentinelConnection", "original_string": "protected function createSentinelConnection($parameters)\n    {\n        if ($parameters instanceof NodeConnectionInterface) {\n            return $parameters;\n        }\n\n        if (is_string($parameters)) {\n            $parameters = Parameters::parse($parameters);\n        }\n\n        if (is_array($parameters)) {\n            // We explicitly set \"database\" and \"password\" to null,\n            // so that no AUTH and SELECT command is send to the sentinels.\n            $parameters['database'] = null;\n            $parameters['password'] = null;\n\n            if (!isset($parameters['timeout'])) {\n                $parameters['timeout'] = $this->sentinelTimeout;\n            }\n        }\n\n        $connection = $this->connectionFactory->create($parameters);\n\n        return $connection;\n    }", "language": "php", "code": "protected function createSentinelConnection($parameters)\n    {\n        if ($parameters instanceof NodeConnectionInterface) {\n            return $parameters;\n        }\n\n        if (is_string($parameters)) {\n            $parameters = Parameters::parse($parameters);\n        }\n\n        if (is_array($parameters)) {\n            // We explicitly set \"database\" and \"password\" to null,\n            // so that no AUTH and SELECT command is send to the sentinels.\n            $parameters['database'] = null;\n            $parameters['password'] = null;\n\n            if (!isset($parameters['timeout'])) {\n                $parameters['timeout'] = $this->sentinelTimeout;\n            }\n        }\n\n        $connection = $this->connectionFactory->create($parameters);\n\n        return $connection;\n    }", "code_tokens": ["protected", "function", "createSentinelConnection", "(", "$", "parameters", ")", "{", "if", "(", "$", "parameters", "instanceof", "NodeConnectionInterface", ")", "{", "return", "$", "parameters", ";", "}", "if", "(", "is_string", "(", "$", "parameters", ")", ")", "{", "$", "parameters", "=", "Parameters", "::", "parse", "(", "$", "parameters", ")", ";", "}", "if", "(", "is_array", "(", "$", "parameters", ")", ")", "{", "$", "parameters", "[", "'database'", "]", "=", "null", ";", "$", "parameters", "[", "'password'", "]", "=", "null", ";", "if", "(", "!", "isset", "(", "$", "parameters", "[", "'timeout'", "]", ")", ")", "{", "$", "parameters", "[", "'timeout'", "]", "=", "$", "this", "->", "sentinelTimeout", ";", "}", "}", "$", "connection", "=", "$", "this", "->", "connectionFactory", "->", "create", "(", "$", "parameters", ")", ";", "return", "$", "connection", ";", "}"], "docstring": "Creates a new connection to a sentinel server.\n\n@return NodeConnectionInterface", "docstring_tokens": ["Creates", "a", "new", "connection", "to", "a", "sentinel", "server", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/Aggregate/SentinelReplication.php#L231-L255", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/Aggregate/SentinelReplication.php", "func_name": "SentinelReplication.getSentinelConnection", "original_string": "public function getSentinelConnection()\n    {\n        if (!$this->sentinelConnection) {\n            if (!$this->sentinels) {\n                throw new \\Predis\\ClientException('No sentinel server available for autodiscovery.');\n            }\n\n            $sentinel = array_shift($this->sentinels);\n            $this->sentinelConnection = $this->createSentinelConnection($sentinel);\n        }\n\n        return $this->sentinelConnection;\n    }", "language": "php", "code": "public function getSentinelConnection()\n    {\n        if (!$this->sentinelConnection) {\n            if (!$this->sentinels) {\n                throw new \\Predis\\ClientException('No sentinel server available for autodiscovery.');\n            }\n\n            $sentinel = array_shift($this->sentinels);\n            $this->sentinelConnection = $this->createSentinelConnection($sentinel);\n        }\n\n        return $this->sentinelConnection;\n    }", "code_tokens": ["public", "function", "getSentinelConnection", "(", ")", "{", "if", "(", "!", "$", "this", "->", "sentinelConnection", ")", "{", "if", "(", "!", "$", "this", "->", "sentinels", ")", "{", "throw", "new", "\\", "Predis", "\\", "ClientException", "(", "'No sentinel server available for autodiscovery.'", ")", ";", "}", "$", "sentinel", "=", "array_shift", "(", "$", "this", "->", "sentinels", ")", ";", "$", "this", "->", "sentinelConnection", "=", "$", "this", "->", "createSentinelConnection", "(", "$", "sentinel", ")", ";", "}", "return", "$", "this", "->", "sentinelConnection", ";", "}"], "docstring": "Returns the current sentinel connection.\n\nIf there is no active sentinel connection, a new connection is created.\n\n@return NodeConnectionInterface", "docstring_tokens": ["Returns", "the", "current", "sentinel", "connection", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/Aggregate/SentinelReplication.php#L264-L276", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/Aggregate/SentinelReplication.php", "func_name": "SentinelReplication.handleSentinelErrorResponse", "original_string": "private function handleSentinelErrorResponse(NodeConnectionInterface $sentinel, ErrorResponseInterface $error)\n    {\n        if ($error->getErrorType() === 'IDONTKNOW') {\n            throw new ConnectionException($sentinel, $error->getMessage());\n        } else {\n            throw new ServerException($error->getMessage());\n        }\n    }", "language": "php", "code": "private function handleSentinelErrorResponse(NodeConnectionInterface $sentinel, ErrorResponseInterface $error)\n    {\n        if ($error->getErrorType() === 'IDONTKNOW') {\n            throw new ConnectionException($sentinel, $error->getMessage());\n        } else {\n            throw new ServerException($error->getMessage());\n        }\n    }", "code_tokens": ["private", "function", "handleSentinelErrorResponse", "(", "NodeConnectionInterface", "$", "sentinel", ",", "ErrorResponseInterface", "$", "error", ")", "{", "if", "(", "$", "error", "->", "getErrorType", "(", ")", "===", "'IDONTKNOW'", ")", "{", "throw", "new", "ConnectionException", "(", "$", "sentinel", ",", "$", "error", "->", "getMessage", "(", ")", ")", ";", "}", "else", "{", "throw", "new", "ServerException", "(", "$", "error", "->", "getMessage", "(", ")", ")", ";", "}", "}"], "docstring": "Handles error responses returned by redis-sentinel.\n\n@param NodeConnectionInterface $sentinel Connection to a sentinel server.\n@param ErrorResponseInterface  $error    Error response.", "docstring_tokens": ["Handles", "error", "responses", "returned", "by", "redis", "-", "sentinel", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/Aggregate/SentinelReplication.php#L327-L334", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/Aggregate/SentinelReplication.php", "func_name": "SentinelReplication.querySentinelForMaster", "original_string": "protected function querySentinelForMaster(NodeConnectionInterface $sentinel, $service)\n    {\n        $payload = $sentinel->executeCommand(\n            RawCommand::create('SENTINEL', 'get-master-addr-by-name', $service)\n        );\n\n        if ($payload === null) {\n            throw new ServerException('ERR No such master with that name');\n        }\n\n        if ($payload instanceof ErrorResponseInterface) {\n            $this->handleSentinelErrorResponse($sentinel, $payload);\n        }\n\n        return array(\n            'host' => $payload[0],\n            'port' => $payload[1],\n            'alias' => 'master',\n        );\n    }", "language": "php", "code": "protected function querySentinelForMaster(NodeConnectionInterface $sentinel, $service)\n    {\n        $payload = $sentinel->executeCommand(\n            RawCommand::create('SENTINEL', 'get-master-addr-by-name', $service)\n        );\n\n        if ($payload === null) {\n            throw new ServerException('ERR No such master with that name');\n        }\n\n        if ($payload instanceof ErrorResponseInterface) {\n            $this->handleSentinelErrorResponse($sentinel, $payload);\n        }\n\n        return array(\n            'host' => $payload[0],\n            'port' => $payload[1],\n            'alias' => 'master',\n        );\n    }", "code_tokens": ["protected", "function", "querySentinelForMaster", "(", "NodeConnectionInterface", "$", "sentinel", ",", "$", "service", ")", "{", "$", "payload", "=", "$", "sentinel", "->", "executeCommand", "(", "RawCommand", "::", "create", "(", "'SENTINEL'", ",", "'get-master-addr-by-name'", ",", "$", "service", ")", ")", ";", "if", "(", "$", "payload", "===", "null", ")", "{", "throw", "new", "ServerException", "(", "'ERR No such master with that name'", ")", ";", "}", "if", "(", "$", "payload", "instanceof", "ErrorResponseInterface", ")", "{", "$", "this", "->", "handleSentinelErrorResponse", "(", "$", "sentinel", ",", "$", "payload", ")", ";", "}", "return", "array", "(", "'host'", "=>", "$", "payload", "[", "0", "]", ",", "'port'", "=>", "$", "payload", "[", "1", "]", ",", "'alias'", "=>", "'master'", ",", ")", ";", "}"], "docstring": "Fetches the details for the master server from a sentinel.\n\n@param NodeConnectionInterface $sentinel Connection to a sentinel server.\n@param string                  $service  Name of the service.\n\n@return array", "docstring_tokens": ["Fetches", "the", "details", "for", "the", "master", "server", "from", "a", "sentinel", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/Aggregate/SentinelReplication.php#L344-L363", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/Aggregate/SentinelReplication.php", "func_name": "SentinelReplication.querySentinelForSlaves", "original_string": "protected function querySentinelForSlaves(NodeConnectionInterface $sentinel, $service)\n    {\n        $slaves = array();\n\n        $payload = $sentinel->executeCommand(\n            RawCommand::create('SENTINEL', 'slaves', $service)\n        );\n\n        if ($payload instanceof ErrorResponseInterface) {\n            $this->handleSentinelErrorResponse($sentinel, $payload);\n        }\n\n        foreach ($payload as $slave) {\n            $flags = explode(',', $slave[9]);\n\n            if (array_intersect($flags, array('s_down', 'o_down', 'disconnected'))) {\n                continue;\n            }\n\n            $slaves[] = array(\n                'host' => $slave[3],\n                'port' => $slave[5],\n                'alias' => \"slave-$slave[1]\",\n            );\n        }\n\n        return $slaves;\n    }", "language": "php", "code": "protected function querySentinelForSlaves(NodeConnectionInterface $sentinel, $service)\n    {\n        $slaves = array();\n\n        $payload = $sentinel->executeCommand(\n            RawCommand::create('SENTINEL', 'slaves', $service)\n        );\n\n        if ($payload instanceof ErrorResponseInterface) {\n            $this->handleSentinelErrorResponse($sentinel, $payload);\n        }\n\n        foreach ($payload as $slave) {\n            $flags = explode(',', $slave[9]);\n\n            if (array_intersect($flags, array('s_down', 'o_down', 'disconnected'))) {\n                continue;\n            }\n\n            $slaves[] = array(\n                'host' => $slave[3],\n                'port' => $slave[5],\n                'alias' => \"slave-$slave[1]\",\n            );\n        }\n\n        return $slaves;\n    }", "code_tokens": ["protected", "function", "querySentinelForSlaves", "(", "NodeConnectionInterface", "$", "sentinel", ",", "$", "service", ")", "{", "$", "slaves", "=", "array", "(", ")", ";", "$", "payload", "=", "$", "sentinel", "->", "executeCommand", "(", "RawCommand", "::", "create", "(", "'SENTINEL'", ",", "'slaves'", ",", "$", "service", ")", ")", ";", "if", "(", "$", "payload", "instanceof", "ErrorResponseInterface", ")", "{", "$", "this", "->", "handleSentinelErrorResponse", "(", "$", "sentinel", ",", "$", "payload", ")", ";", "}", "foreach", "(", "$", "payload", "as", "$", "slave", ")", "{", "$", "flags", "=", "explode", "(", "','", ",", "$", "slave", "[", "9", "]", ")", ";", "if", "(", "array_intersect", "(", "$", "flags", ",", "array", "(", "'s_down'", ",", "'o_down'", ",", "'disconnected'", ")", ")", ")", "{", "continue", ";", "}", "$", "slaves", "[", "]", "=", "array", "(", "'host'", "=>", "$", "slave", "[", "3", "]", ",", "'port'", "=>", "$", "slave", "[", "5", "]", ",", "'alias'", "=>", "\"slave-$slave[1]\"", ",", ")", ";", "}", "return", "$", "slaves", ";", "}"], "docstring": "Fetches the details for the slave servers from a sentinel.\n\n@param NodeConnectionInterface $sentinel Connection to a sentinel server.\n@param string                  $service  Name of the service.\n\n@return array", "docstring_tokens": ["Fetches", "the", "details", "for", "the", "slave", "servers", "from", "a", "sentinel", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/Aggregate/SentinelReplication.php#L373-L400", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/Aggregate/SentinelReplication.php", "func_name": "SentinelReplication.getConnectionInternal", "original_string": "private function getConnectionInternal(CommandInterface $command)\n    {\n        if (!$this->current) {\n            if ($this->strategy->isReadOperation($command) && $slave = $this->pickSlave()) {\n                $this->current = $slave;\n            } else {\n                $this->current = $this->getMaster();\n            }\n\n            return $this->current;\n        }\n\n        if ($this->current === $this->master) {\n            return $this->current;\n        }\n\n        if (!$this->strategy->isReadOperation($command)) {\n            $this->current = $this->getMaster();\n        }\n\n        return $this->current;\n    }", "language": "php", "code": "private function getConnectionInternal(CommandInterface $command)\n    {\n        if (!$this->current) {\n            if ($this->strategy->isReadOperation($command) && $slave = $this->pickSlave()) {\n                $this->current = $slave;\n            } else {\n                $this->current = $this->getMaster();\n            }\n\n            return $this->current;\n        }\n\n        if ($this->current === $this->master) {\n            return $this->current;\n        }\n\n        if (!$this->strategy->isReadOperation($command)) {\n            $this->current = $this->getMaster();\n        }\n\n        return $this->current;\n    }", "code_tokens": ["private", "function", "getConnectionInternal", "(", "CommandInterface", "$", "command", ")", "{", "if", "(", "!", "$", "this", "->", "current", ")", "{", "if", "(", "$", "this", "->", "strategy", "->", "isReadOperation", "(", "$", "command", ")", "&&", "$", "slave", "=", "$", "this", "->", "pickSlave", "(", ")", ")", "{", "$", "this", "->", "current", "=", "$", "slave", ";", "}", "else", "{", "$", "this", "->", "current", "=", "$", "this", "->", "getMaster", "(", ")", ";", "}", "return", "$", "this", "->", "current", ";", "}", "if", "(", "$", "this", "->", "current", "===", "$", "this", "->", "master", ")", "{", "return", "$", "this", "->", "current", ";", "}", "if", "(", "!", "$", "this", "->", "strategy", "->", "isReadOperation", "(", "$", "command", ")", ")", "{", "$", "this", "->", "current", "=", "$", "this", "->", "getMaster", "(", ")", ";", "}", "return", "$", "this", "->", "current", ";", "}"], "docstring": "Returns the connection instance in charge for the given command.\n\n@param CommandInterface $command Command instance.\n\n@return NodeConnectionInterface", "docstring_tokens": ["Returns", "the", "connection", "instance", "in", "charge", "for", "the", "given", "command", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/Aggregate/SentinelReplication.php#L492-L513", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Connection/Aggregate/SentinelReplication.php", "func_name": "SentinelReplication.assertConnectionRole", "original_string": "protected function assertConnectionRole(NodeConnectionInterface $connection, $role)\n    {\n        $role = strtolower($role);\n        $actualRole = $connection->executeCommand(RawCommand::create('ROLE'));\n\n        if ($role !== $actualRole[0]) {\n            throw new RoleException($connection, \"Expected $role but got $actualRole[0] [$connection]\");\n        }\n    }", "language": "php", "code": "protected function assertConnectionRole(NodeConnectionInterface $connection, $role)\n    {\n        $role = strtolower($role);\n        $actualRole = $connection->executeCommand(RawCommand::create('ROLE'));\n\n        if ($role !== $actualRole[0]) {\n            throw new RoleException($connection, \"Expected $role but got $actualRole[0] [$connection]\");\n        }\n    }", "code_tokens": ["protected", "function", "assertConnectionRole", "(", "NodeConnectionInterface", "$", "connection", ",", "$", "role", ")", "{", "$", "role", "=", "strtolower", "(", "$", "role", ")", ";", "$", "actualRole", "=", "$", "connection", "->", "executeCommand", "(", "RawCommand", "::", "create", "(", "'ROLE'", ")", ")", ";", "if", "(", "$", "role", "!==", "$", "actualRole", "[", "0", "]", ")", "{", "throw", "new", "RoleException", "(", "$", "connection", ",", "\"Expected $role but got $actualRole[0] [$connection]\"", ")", ";", "}", "}"], "docstring": "Asserts that the specified connection matches an expected role.\n\n@param NodeConnectionInterface $connection Connection to a redis server.\n@param string                  $role       Expected role of the server (\"master\", \"slave\" or \"sentinel\").\n\n@throws RoleException", "docstring_tokens": ["Asserts", "that", "the", "specified", "connection", "matches", "an", "expected", "role", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Connection/Aggregate/SentinelReplication.php#L523-L531", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Response/Iterator/MultiBulk.php", "func_name": "MultiBulk.drop", "original_string": "public function drop($disconnect = false)\n    {\n        if ($disconnect) {\n            if ($this->valid()) {\n                $this->position = $this->size;\n                $this->connection->disconnect();\n            }\n        } else {\n            while ($this->valid()) {\n                $this->next();\n            }\n        }\n    }", "language": "php", "code": "public function drop($disconnect = false)\n    {\n        if ($disconnect) {\n            if ($this->valid()) {\n                $this->position = $this->size;\n                $this->connection->disconnect();\n            }\n        } else {\n            while ($this->valid()) {\n                $this->next();\n            }\n        }\n    }", "code_tokens": ["public", "function", "drop", "(", "$", "disconnect", "=", "false", ")", "{", "if", "(", "$", "disconnect", ")", "{", "if", "(", "$", "this", "->", "valid", "(", ")", ")", "{", "$", "this", "->", "position", "=", "$", "this", "->", "size", ";", "$", "this", "->", "connection", "->", "disconnect", "(", ")", ";", "}", "}", "else", "{", "while", "(", "$", "this", "->", "valid", "(", ")", ")", "{", "$", "this", "->", "next", "(", ")", ";", "}", "}", "}"], "docstring": "Drop queued elements that have not been read from the connection either\nby consuming the rest of the multibulk response or quickly by closing the\nunderlying connection.\n\n@param bool $disconnect Consume the iterator or drop the connection.", "docstring_tokens": ["Drop", "queued", "elements", "that", "have", "not", "been", "read", "from", "the", "connection", "either", "by", "consuming", "the", "rest", "of", "the", "multibulk", "response", "or", "quickly", "by", "closing", "the", "underlying", "connection", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Response/Iterator/MultiBulk.php#L54-L66", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Command/ServerSentinel.php", "func_name": "ServerSentinel.processMastersOrSlaves", "original_string": "protected static function processMastersOrSlaves(array $servers)\n    {\n        foreach ($servers as $idx => $node) {\n            $processed = array();\n            $count = count($node);\n\n            for ($i = 0; $i < $count; ++$i) {\n                $processed[$node[$i]] = $node[++$i];\n            }\n\n            $servers[$idx] = $processed;\n        }\n\n        return $servers;\n    }", "language": "php", "code": "protected static function processMastersOrSlaves(array $servers)\n    {\n        foreach ($servers as $idx => $node) {\n            $processed = array();\n            $count = count($node);\n\n            for ($i = 0; $i < $count; ++$i) {\n                $processed[$node[$i]] = $node[++$i];\n            }\n\n            $servers[$idx] = $processed;\n        }\n\n        return $servers;\n    }", "code_tokens": ["protected", "static", "function", "processMastersOrSlaves", "(", "array", "$", "servers", ")", "{", "foreach", "(", "$", "servers", "as", "$", "idx", "=>", "$", "node", ")", "{", "$", "processed", "=", "array", "(", ")", ";", "$", "count", "=", "count", "(", "$", "node", ")", ";", "for", "(", "$", "i", "=", "0", ";", "$", "i", "<", "$", "count", ";", "++", "$", "i", ")", "{", "$", "processed", "[", "$", "node", "[", "$", "i", "]", "]", "=", "$", "node", "[", "++", "$", "i", "]", ";", "}", "$", "servers", "[", "$", "idx", "]", "=", "$", "processed", ";", "}", "return", "$", "servers", ";", "}"], "docstring": "Returns a processed response to SENTINEL MASTERS or SENTINEL SLAVES.\n\n@param array $servers List of Redis servers.\n\n@return array", "docstring_tokens": ["Returns", "a", "processed", "response", "to", "SENTINEL", "MASTERS", "or", "SENTINEL", "SLAVES", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Command/ServerSentinel.php#L51-L65", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Monitor/Consumer.php", "func_name": "Consumer.getValue", "original_string": "private function getValue()\n    {\n        $database = 0;\n        $client = null;\n        $event = $this->client->getConnection()->read();\n\n        $callback = function ($matches) use (&$database, &$client) {\n            if (2 === $count = count($matches)) {\n                // Redis <= 2.4\n                $database = (int) $matches[1];\n            }\n\n            if (4 === $count) {\n                // Redis >= 2.6\n                $database = (int) $matches[2];\n                $client = $matches[3];\n            }\n\n            return ' ';\n        };\n\n        $event = preg_replace_callback('/ \\(db (\\d+)\\) | \\[(\\d+) (.*?)\\] /', $callback, $event, 1);\n        @list($timestamp, $command, $arguments) = explode(' ', $event, 3);\n\n        return (object) array(\n            'timestamp' => (float) $timestamp,\n            'database' => $database,\n            'client' => $client,\n            'command' => substr($command, 1, -1),\n            'arguments' => $arguments,\n        );\n    }", "language": "php", "code": "private function getValue()\n    {\n        $database = 0;\n        $client = null;\n        $event = $this->client->getConnection()->read();\n\n        $callback = function ($matches) use (&$database, &$client) {\n            if (2 === $count = count($matches)) {\n                // Redis <= 2.4\n                $database = (int) $matches[1];\n            }\n\n            if (4 === $count) {\n                // Redis >= 2.6\n                $database = (int) $matches[2];\n                $client = $matches[3];\n            }\n\n            return ' ';\n        };\n\n        $event = preg_replace_callback('/ \\(db (\\d+)\\) | \\[(\\d+) (.*?)\\] /', $callback, $event, 1);\n        @list($timestamp, $command, $arguments) = explode(' ', $event, 3);\n\n        return (object) array(\n            'timestamp' => (float) $timestamp,\n            'database' => $database,\n            'client' => $client,\n            'command' => substr($command, 1, -1),\n            'arguments' => $arguments,\n        );\n    }", "code_tokens": ["private", "function", "getValue", "(", ")", "{", "$", "database", "=", "0", ";", "$", "client", "=", "null", ";", "$", "event", "=", "$", "this", "->", "client", "->", "getConnection", "(", ")", "->", "read", "(", ")", ";", "$", "callback", "=", "function", "(", "$", "matches", ")", "use", "(", "&", "$", "database", ",", "&", "$", "client", ")", "{", "if", "(", "2", "===", "$", "count", "=", "count", "(", "$", "matches", ")", ")", "{", "$", "database", "=", "(", "int", ")", "$", "matches", "[", "1", "]", ";", "}", "if", "(", "4", "===", "$", "count", ")", "{", "$", "database", "=", "(", "int", ")", "$", "matches", "[", "2", "]", ";", "$", "client", "=", "$", "matches", "[", "3", "]", ";", "}", "return", "' '", ";", "}", ";", "$", "event", "=", "preg_replace_callback", "(", "'/ \\(db (\\d+)\\) | \\[(\\d+) (.*?)\\] /'", ",", "$", "callback", ",", "$", "event", ",", "1", ")", ";", "@", "list", "(", "$", "timestamp", ",", "$", "command", ",", "$", "arguments", ")", "=", "explode", "(", "' '", ",", "$", "event", ",", "3", ")", ";", "return", "(", "object", ")", "array", "(", "'timestamp'", "=>", "(", "float", ")", "$", "timestamp", ",", "'database'", "=>", "$", "database", ",", "'client'", "=>", "$", "client", ",", "'command'", "=>", "substr", "(", "$", "command", ",", "1", ",", "-", "1", ")", ",", "'arguments'", "=>", "$", "arguments", ",", ")", ";", "}"], "docstring": "Waits for a new message from the server generated by MONITOR and returns\nit when available.\n\n@return object", "docstring_tokens": ["Waits", "for", "a", "new", "message", "from", "the", "server", "generated", "by", "MONITOR", "and", "returns", "it", "when", "available", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Monitor/Consumer.php#L141-L172", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Command/PubSubPubsub.php", "func_name": "PubSubPubsub.processNumsub", "original_string": "protected static function processNumsub(array $channels)\n    {\n        $processed = array();\n        $count = count($channels);\n\n        for ($i = 0; $i < $count; ++$i) {\n            $processed[$channels[$i]] = $channels[++$i];\n        }\n\n        return $processed;\n    }", "language": "php", "code": "protected static function processNumsub(array $channels)\n    {\n        $processed = array();\n        $count = count($channels);\n\n        for ($i = 0; $i < $count; ++$i) {\n            $processed[$channels[$i]] = $channels[++$i];\n        }\n\n        return $processed;\n    }", "code_tokens": ["protected", "static", "function", "processNumsub", "(", "array", "$", "channels", ")", "{", "$", "processed", "=", "array", "(", ")", ";", "$", "count", "=", "count", "(", "$", "channels", ")", ";", "for", "(", "$", "i", "=", "0", ";", "$", "i", "<", "$", "count", ";", "++", "$", "i", ")", "{", "$", "processed", "[", "$", "channels", "[", "$", "i", "]", "]", "=", "$", "channels", "[", "++", "$", "i", "]", ";", "}", "return", "$", "processed", ";", "}"], "docstring": "Returns the processed response to PUBSUB NUMSUB.\n\n@param array $channels List of channels\n\n@return array", "docstring_tokens": ["Returns", "the", "processed", "response", "to", "PUBSUB", "NUMSUB", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Command/PubSubPubsub.php#L50-L60", "partition": "train"}
{"repo": "nrk/predis", "path": "src/PubSub/DispatcherLoop.php", "func_name": "DispatcherLoop.attachCallback", "original_string": "public function attachCallback($channel, $callback)\n    {\n        $callbackName = $this->getPrefixKeys().$channel;\n\n        $this->assertCallback($callback);\n        $this->callbacks[$callbackName] = $callback;\n        $this->pubsub->subscribe($channel);\n    }", "language": "php", "code": "public function attachCallback($channel, $callback)\n    {\n        $callbackName = $this->getPrefixKeys().$channel;\n\n        $this->assertCallback($callback);\n        $this->callbacks[$callbackName] = $callback;\n        $this->pubsub->subscribe($channel);\n    }", "code_tokens": ["public", "function", "attachCallback", "(", "$", "channel", ",", "$", "callback", ")", "{", "$", "callbackName", "=", "$", "this", "->", "getPrefixKeys", "(", ")", ".", "$", "channel", ";", "$", "this", "->", "assertCallback", "(", "$", "callback", ")", ";", "$", "this", "->", "callbacks", "[", "$", "callbackName", "]", "=", "$", "callback", ";", "$", "this", "->", "pubsub", "->", "subscribe", "(", "$", "channel", ")", ";", "}"], "docstring": "Binds a callback to a channel.\n\n@param string   $channel  Channel name.\n@param callable $callback A callback.", "docstring_tokens": ["Binds", "a", "callback", "to", "a", "channel", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/PubSub/DispatcherLoop.php#L96-L103", "partition": "train"}
{"repo": "nrk/predis", "path": "src/PubSub/DispatcherLoop.php", "func_name": "DispatcherLoop.detachCallback", "original_string": "public function detachCallback($channel)\n    {\n        $callbackName = $this->getPrefixKeys().$channel;\n\n        if (isset($this->callbacks[$callbackName])) {\n            unset($this->callbacks[$callbackName]);\n            $this->pubsub->unsubscribe($channel);\n        }\n    }", "language": "php", "code": "public function detachCallback($channel)\n    {\n        $callbackName = $this->getPrefixKeys().$channel;\n\n        if (isset($this->callbacks[$callbackName])) {\n            unset($this->callbacks[$callbackName]);\n            $this->pubsub->unsubscribe($channel);\n        }\n    }", "code_tokens": ["public", "function", "detachCallback", "(", "$", "channel", ")", "{", "$", "callbackName", "=", "$", "this", "->", "getPrefixKeys", "(", ")", ".", "$", "channel", ";", "if", "(", "isset", "(", "$", "this", "->", "callbacks", "[", "$", "callbackName", "]", ")", ")", "{", "unset", "(", "$", "this", "->", "callbacks", "[", "$", "callbackName", "]", ")", ";", "$", "this", "->", "pubsub", "->", "unsubscribe", "(", "$", "channel", ")", ";", "}", "}"], "docstring": "Stops listening to a channel and removes the associated callback.\n\n@param string $channel Redis channel.", "docstring_tokens": ["Stops", "listening", "to", "a", "channel", "and", "removes", "the", "associated", "callback", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/PubSub/DispatcherLoop.php#L110-L118", "partition": "train"}
{"repo": "nrk/predis", "path": "src/PubSub/DispatcherLoop.php", "func_name": "DispatcherLoop.run", "original_string": "public function run()\n    {\n        foreach ($this->pubsub as $message) {\n            $kind = $message->kind;\n\n            if ($kind !== Consumer::MESSAGE && $kind !== Consumer::PMESSAGE) {\n                if (isset($this->subscriptionCallback)) {\n                    $callback = $this->subscriptionCallback;\n                    call_user_func($callback, $message);\n                }\n\n                continue;\n            }\n\n            if (isset($this->callbacks[$message->channel])) {\n                $callback = $this->callbacks[$message->channel];\n                call_user_func($callback, $message->payload);\n            } elseif (isset($this->defaultCallback)) {\n                $callback = $this->defaultCallback;\n                call_user_func($callback, $message);\n            }\n        }\n    }", "language": "php", "code": "public function run()\n    {\n        foreach ($this->pubsub as $message) {\n            $kind = $message->kind;\n\n            if ($kind !== Consumer::MESSAGE && $kind !== Consumer::PMESSAGE) {\n                if (isset($this->subscriptionCallback)) {\n                    $callback = $this->subscriptionCallback;\n                    call_user_func($callback, $message);\n                }\n\n                continue;\n            }\n\n            if (isset($this->callbacks[$message->channel])) {\n                $callback = $this->callbacks[$message->channel];\n                call_user_func($callback, $message->payload);\n            } elseif (isset($this->defaultCallback)) {\n                $callback = $this->defaultCallback;\n                call_user_func($callback, $message);\n            }\n        }\n    }", "code_tokens": ["public", "function", "run", "(", ")", "{", "foreach", "(", "$", "this", "->", "pubsub", "as", "$", "message", ")", "{", "$", "kind", "=", "$", "message", "->", "kind", ";", "if", "(", "$", "kind", "!==", "Consumer", "::", "MESSAGE", "&&", "$", "kind", "!==", "Consumer", "::", "PMESSAGE", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "subscriptionCallback", ")", ")", "{", "$", "callback", "=", "$", "this", "->", "subscriptionCallback", ";", "call_user_func", "(", "$", "callback", ",", "$", "message", ")", ";", "}", "continue", ";", "}", "if", "(", "isset", "(", "$", "this", "->", "callbacks", "[", "$", "message", "->", "channel", "]", ")", ")", "{", "$", "callback", "=", "$", "this", "->", "callbacks", "[", "$", "message", "->", "channel", "]", ";", "call_user_func", "(", "$", "callback", ",", "$", "message", "->", "payload", ")", ";", "}", "elseif", "(", "isset", "(", "$", "this", "->", "defaultCallback", ")", ")", "{", "$", "callback", "=", "$", "this", "->", "defaultCallback", ";", "call_user_func", "(", "$", "callback", ",", "$", "message", ")", ";", "}", "}", "}"], "docstring": "Starts the dispatcher loop.", "docstring_tokens": ["Starts", "the", "dispatcher", "loop", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/PubSub/DispatcherLoop.php#L123-L145", "partition": "train"}
{"repo": "nrk/predis", "path": "src/PubSub/DispatcherLoop.php", "func_name": "DispatcherLoop.getPrefixKeys", "original_string": "protected function getPrefixKeys()\n    {\n        $options = $this->pubsub->getClient()->getOptions();\n\n        if (isset($options->prefix)) {\n            return $options->prefix->getPrefix();\n        }\n\n        return '';\n    }", "language": "php", "code": "protected function getPrefixKeys()\n    {\n        $options = $this->pubsub->getClient()->getOptions();\n\n        if (isset($options->prefix)) {\n            return $options->prefix->getPrefix();\n        }\n\n        return '';\n    }", "code_tokens": ["protected", "function", "getPrefixKeys", "(", ")", "{", "$", "options", "=", "$", "this", "->", "pubsub", "->", "getClient", "(", ")", "->", "getOptions", "(", ")", ";", "if", "(", "isset", "(", "$", "options", "->", "prefix", ")", ")", "{", "return", "$", "options", "->", "prefix", "->", "getPrefix", "(", ")", ";", "}", "return", "''", ";", "}"], "docstring": "Return the prefix used for keys.\n\n@return string", "docstring_tokens": ["Return", "the", "prefix", "used", "for", "keys", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/PubSub/DispatcherLoop.php#L160-L169", "partition": "train"}
{"repo": "nrk/predis", "path": "src/PubSub/Consumer.php", "func_name": "Consumer.genericSubscribeInit", "original_string": "private function genericSubscribeInit($subscribeAction)\n    {\n        if (isset($this->options[$subscribeAction])) {\n            $this->$subscribeAction($this->options[$subscribeAction]);\n        }\n    }", "language": "php", "code": "private function genericSubscribeInit($subscribeAction)\n    {\n        if (isset($this->options[$subscribeAction])) {\n            $this->$subscribeAction($this->options[$subscribeAction]);\n        }\n    }", "code_tokens": ["private", "function", "genericSubscribeInit", "(", "$", "subscribeAction", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "options", "[", "$", "subscribeAction", "]", ")", ")", "{", "$", "this", "->", "$", "subscribeAction", "(", "$", "this", "->", "options", "[", "$", "subscribeAction", "]", ")", ";", "}", "}"], "docstring": "This method shares the logic to handle both SUBSCRIBE and PSUBSCRIBE.\n\n@param string $subscribeAction Type of subscription.", "docstring_tokens": ["This", "method", "shares", "the", "logic", "to", "handle", "both", "SUBSCRIBE", "and", "PSUBSCRIBE", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/PubSub/Consumer.php#L85-L90", "partition": "train"}
{"repo": "nrk/predis", "path": "src/CommunicationException.php", "func_name": "CommunicationException.handle", "original_string": "public static function handle(CommunicationException $exception)\n    {\n        if ($exception->shouldResetConnection()) {\n            $connection = $exception->getConnection();\n\n            if ($connection->isConnected()) {\n                $connection->disconnect();\n            }\n        }\n\n        throw $exception;\n    }", "language": "php", "code": "public static function handle(CommunicationException $exception)\n    {\n        if ($exception->shouldResetConnection()) {\n            $connection = $exception->getConnection();\n\n            if ($connection->isConnected()) {\n                $connection->disconnect();\n            }\n        }\n\n        throw $exception;\n    }", "code_tokens": ["public", "static", "function", "handle", "(", "CommunicationException", "$", "exception", ")", "{", "if", "(", "$", "exception", "->", "shouldResetConnection", "(", ")", ")", "{", "$", "connection", "=", "$", "exception", "->", "getConnection", "(", ")", ";", "if", "(", "$", "connection", "->", "isConnected", "(", ")", ")", "{", "$", "connection", "->", "disconnect", "(", ")", ";", "}", "}", "throw", "$", "exception", ";", "}"], "docstring": "Helper method to handle exceptions generated by a connection object.\n\n@param CommunicationException $exception Exception.\n\n@throws CommunicationException", "docstring_tokens": ["Helper", "method", "to", "handle", "exceptions", "generated", "by", "a", "connection", "object", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/CommunicationException.php#L68-L79", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Configuration/ProfileOption.php", "func_name": "ProfileOption.setProcessors", "original_string": "protected function setProcessors(OptionsInterface $options, ProfileInterface $profile)\n    {\n        if (isset($options->prefix) && $profile instanceof RedisProfile) {\n            // NOTE: directly using __get('prefix') is actually a workaround for\n            // HHVM 2.3.0. It's correct and respects the options interface, it's\n            // just ugly. We will remove this hack when HHVM will fix re-entrant\n            // calls to __get() once and for all.\n\n            $profile->setProcessor($options->__get('prefix'));\n        }\n    }", "language": "php", "code": "protected function setProcessors(OptionsInterface $options, ProfileInterface $profile)\n    {\n        if (isset($options->prefix) && $profile instanceof RedisProfile) {\n            // NOTE: directly using __get('prefix') is actually a workaround for\n            // HHVM 2.3.0. It's correct and respects the options interface, it's\n            // just ugly. We will remove this hack when HHVM will fix re-entrant\n            // calls to __get() once and for all.\n\n            $profile->setProcessor($options->__get('prefix'));\n        }\n    }", "code_tokens": ["protected", "function", "setProcessors", "(", "OptionsInterface", "$", "options", ",", "ProfileInterface", "$", "profile", ")", "{", "if", "(", "isset", "(", "$", "options", "->", "prefix", ")", "&&", "$", "profile", "instanceof", "RedisProfile", ")", "{", "$", "profile", "->", "setProcessor", "(", "$", "options", "->", "__get", "(", "'prefix'", ")", ")", ";", "}", "}"], "docstring": "Sets the commands processors that need to be applied to the profile.\n\n@param OptionsInterface $options Client options.\n@param ProfileInterface $profile Server profile.", "docstring_tokens": ["Sets", "the", "commands", "processors", "that", "need", "to", "be", "applied", "to", "the", "profile", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Configuration/ProfileOption.php#L32-L42", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Profile/RedisProfile.php", "func_name": "RedisProfile.getCommandClass", "original_string": "public function getCommandClass($commandID)\n    {\n        if (isset($this->commands[$commandID = strtoupper($commandID)])) {\n            return $this->commands[$commandID];\n        }\n    }", "language": "php", "code": "public function getCommandClass($commandID)\n    {\n        if (isset($this->commands[$commandID = strtoupper($commandID)])) {\n            return $this->commands[$commandID];\n        }\n    }", "code_tokens": ["public", "function", "getCommandClass", "(", "$", "commandID", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "commands", "[", "$", "commandID", "=", "strtoupper", "(", "$", "commandID", ")", "]", ")", ")", "{", "return", "$", "this", "->", "commands", "[", "$", "commandID", "]", ";", "}", "}"], "docstring": "Returns the fully-qualified name of a class representing the specified\ncommand ID registered in the current server profile.\n\n@param string $commandID Command ID.\n\n@return string|null", "docstring_tokens": ["Returns", "the", "fully", "-", "qualified", "name", "of", "a", "class", "representing", "the", "specified", "command", "ID", "registered", "in", "the", "current", "server", "profile", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Profile/RedisProfile.php#L73-L78", "partition": "train"}
{"repo": "nrk/predis", "path": "src/Profile/RedisProfile.php", "func_name": "RedisProfile.defineCommand", "original_string": "public function defineCommand($commandID, $class)\n    {\n        $reflection = new \\ReflectionClass($class);\n\n        if (!$reflection->isSubclassOf('Predis\\Command\\CommandInterface')) {\n            throw new \\InvalidArgumentException(\"The class '$class' is not a valid command class.\");\n        }\n\n        $this->commands[strtoupper($commandID)] = $class;\n    }", "language": "php", "code": "public function defineCommand($commandID, $class)\n    {\n        $reflection = new \\ReflectionClass($class);\n\n        if (!$reflection->isSubclassOf('Predis\\Command\\CommandInterface')) {\n            throw new \\InvalidArgumentException(\"The class '$class' is not a valid command class.\");\n        }\n\n        $this->commands[strtoupper($commandID)] = $class;\n    }", "code_tokens": ["public", "function", "defineCommand", "(", "$", "commandID", ",", "$", "class", ")", "{", "$", "reflection", "=", "new", "\\", "ReflectionClass", "(", "$", "class", ")", ";", "if", "(", "!", "$", "reflection", "->", "isSubclassOf", "(", "'Predis\\Command\\CommandInterface'", ")", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "\"The class '$class' is not a valid command class.\"", ")", ";", "}", "$", "this", "->", "commands", "[", "strtoupper", "(", "$", "commandID", ")", "]", "=", "$", "class", ";", "}"], "docstring": "Defines a new command in the server profile.\n\n@param string $commandID Command ID.\n@param string $class     Fully-qualified name of a Predis\\Command\\CommandInterface.\n\n@throws \\InvalidArgumentException", "docstring_tokens": ["Defines", "a", "new", "command", "in", "the", "server", "profile", "."], "sha": "111d100ee389d624036b46b35ed0c9ac59c71313", "url": "https://github.com/nrk/predis/blob/111d100ee389d624036b46b35ed0c9ac59c71313/src/Profile/RedisProfile.php#L110-L119", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/ExtractsMailableTags.php", "func_name": "ExtractsMailableTags.registerMailableTagExtractor", "original_string": "protected static function registerMailableTagExtractor()\n    {\n        Mailable::buildViewDataUsing(function ($mailable) {\n            return [\n                '__telescope' => ExtractTags::from($mailable),\n                '__telescope_mailable' => get_class($mailable),\n                '__telescope_queued' => in_array(ShouldQueue::class, class_implements($mailable)),\n            ];\n        });\n    }", "language": "php", "code": "protected static function registerMailableTagExtractor()\n    {\n        Mailable::buildViewDataUsing(function ($mailable) {\n            return [\n                '__telescope' => ExtractTags::from($mailable),\n                '__telescope_mailable' => get_class($mailable),\n                '__telescope_queued' => in_array(ShouldQueue::class, class_implements($mailable)),\n            ];\n        });\n    }", "code_tokens": ["protected", "static", "function", "registerMailableTagExtractor", "(", ")", "{", "Mailable", "::", "buildViewDataUsing", "(", "function", "(", "$", "mailable", ")", "{", "return", "[", "'__telescope'", "=>", "ExtractTags", "::", "from", "(", "$", "mailable", ")", ",", "'__telescope_mailable'", "=>", "get_class", "(", "$", "mailable", ")", ",", "'__telescope_queued'", "=>", "in_array", "(", "ShouldQueue", "::", "class", ",", "class_implements", "(", "$", "mailable", ")", ")", ",", "]", ";", "}", ")", ";", "}"], "docstring": "Register a callback to extract mailable tags.\n\n@return void", "docstring_tokens": ["Register", "a", "callback", "to", "extract", "mailable", "tags", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/ExtractsMailableTags.php#L15-L24", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/QueryWatcher.php", "func_name": "QueryWatcher.recordQuery", "original_string": "public function recordQuery(QueryExecuted $event)\n    {\n        if (! Telescope::isRecording()) {\n            return;\n        }\n\n        $time = $event->time;\n\n        $caller = $this->getCallerFromStackTrace();\n\n        Telescope::recordQuery(IncomingEntry::make([\n            'connection' => $event->connectionName,\n            'bindings' => $this->formatBindings($event),\n            'sql' => $event->sql,\n            'time' => number_format($time, 2),\n            'slow' => isset($this->options['slow']) && $time >= $this->options['slow'],\n            'file' => $caller['file'],\n            'line' => $caller['line'],\n        ])->tags($this->tags($event)));\n    }", "language": "php", "code": "public function recordQuery(QueryExecuted $event)\n    {\n        if (! Telescope::isRecording()) {\n            return;\n        }\n\n        $time = $event->time;\n\n        $caller = $this->getCallerFromStackTrace();\n\n        Telescope::recordQuery(IncomingEntry::make([\n            'connection' => $event->connectionName,\n            'bindings' => $this->formatBindings($event),\n            'sql' => $event->sql,\n            'time' => number_format($time, 2),\n            'slow' => isset($this->options['slow']) && $time >= $this->options['slow'],\n            'file' => $caller['file'],\n            'line' => $caller['line'],\n        ])->tags($this->tags($event)));\n    }", "code_tokens": ["public", "function", "recordQuery", "(", "QueryExecuted", "$", "event", ")", "{", "if", "(", "!", "Telescope", "::", "isRecording", "(", ")", ")", "{", "return", ";", "}", "$", "time", "=", "$", "event", "->", "time", ";", "$", "caller", "=", "$", "this", "->", "getCallerFromStackTrace", "(", ")", ";", "Telescope", "::", "recordQuery", "(", "IncomingEntry", "::", "make", "(", "[", "'connection'", "=>", "$", "event", "->", "connectionName", ",", "'bindings'", "=>", "$", "this", "->", "formatBindings", "(", "$", "event", ")", ",", "'sql'", "=>", "$", "event", "->", "sql", ",", "'time'", "=>", "number_format", "(", "$", "time", ",", "2", ")", ",", "'slow'", "=>", "isset", "(", "$", "this", "->", "options", "[", "'slow'", "]", ")", "&&", "$", "time", ">=", "$", "this", "->", "options", "[", "'slow'", "]", ",", "'file'", "=>", "$", "caller", "[", "'file'", "]", ",", "'line'", "=>", "$", "caller", "[", "'line'", "]", ",", "]", ")", "->", "tags", "(", "$", "this", "->", "tags", "(", "$", "event", ")", ")", ")", ";", "}"], "docstring": "Record a query was executed.\n\n@param  \\Illuminate\\Database\\Events\\QueryExecuted  $event\n@return void", "docstring_tokens": ["Record", "a", "query", "was", "executed", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/QueryWatcher.php#L30-L49", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Http/Controllers/RecordingController.php", "func_name": "RecordingController.toggle", "original_string": "public function toggle()\n    {\n        if ($this->cache->get('telescope:pause-recording')) {\n            $this->cache->forget('telescope:pause-recording');\n        } else {\n            $this->cache->put('telescope:pause-recording', true, now()->addDays(30));\n        }\n    }", "language": "php", "code": "public function toggle()\n    {\n        if ($this->cache->get('telescope:pause-recording')) {\n            $this->cache->forget('telescope:pause-recording');\n        } else {\n            $this->cache->put('telescope:pause-recording', true, now()->addDays(30));\n        }\n    }", "code_tokens": ["public", "function", "toggle", "(", ")", "{", "if", "(", "$", "this", "->", "cache", "->", "get", "(", "'telescope:pause-recording'", ")", ")", "{", "$", "this", "->", "cache", "->", "forget", "(", "'telescope:pause-recording'", ")", ";", "}", "else", "{", "$", "this", "->", "cache", "->", "put", "(", "'telescope:pause-recording'", ",", "true", ",", "now", "(", ")", "->", "addDays", "(", "30", ")", ")", ";", "}", "}"], "docstring": "Toggle recording.\n\n@return void", "docstring_tokens": ["Toggle", "recording", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Http/Controllers/RecordingController.php#L33-L40", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/EventWatcher.php", "func_name": "EventWatcher.recordEvent", "original_string": "public function recordEvent($eventName, $payload)\n    {\n        if (! Telescope::isRecording() || $this->shouldIgnore($eventName)) {\n            return;\n        }\n\n        $formattedPayload = $this->extractPayload($eventName, $payload);\n\n        Telescope::recordEvent(IncomingEntry::make([\n            'name' => $eventName,\n            'payload' => empty($formattedPayload) ? null : $formattedPayload,\n            'listeners' => $this->formatListeners($eventName),\n            'broadcast' => class_exists($eventName)\n                        ? in_array(ShouldBroadcast::class, (array) class_implements($eventName))\n                        : false,\n        ])->tags(class_exists($eventName) && isset($payload[0]) ? ExtractTags::from($payload[0]) : []));\n    }", "language": "php", "code": "public function recordEvent($eventName, $payload)\n    {\n        if (! Telescope::isRecording() || $this->shouldIgnore($eventName)) {\n            return;\n        }\n\n        $formattedPayload = $this->extractPayload($eventName, $payload);\n\n        Telescope::recordEvent(IncomingEntry::make([\n            'name' => $eventName,\n            'payload' => empty($formattedPayload) ? null : $formattedPayload,\n            'listeners' => $this->formatListeners($eventName),\n            'broadcast' => class_exists($eventName)\n                        ? in_array(ShouldBroadcast::class, (array) class_implements($eventName))\n                        : false,\n        ])->tags(class_exists($eventName) && isset($payload[0]) ? ExtractTags::from($payload[0]) : []));\n    }", "code_tokens": ["public", "function", "recordEvent", "(", "$", "eventName", ",", "$", "payload", ")", "{", "if", "(", "!", "Telescope", "::", "isRecording", "(", ")", "||", "$", "this", "->", "shouldIgnore", "(", "$", "eventName", ")", ")", "{", "return", ";", "}", "$", "formattedPayload", "=", "$", "this", "->", "extractPayload", "(", "$", "eventName", ",", "$", "payload", ")", ";", "Telescope", "::", "recordEvent", "(", "IncomingEntry", "::", "make", "(", "[", "'name'", "=>", "$", "eventName", ",", "'payload'", "=>", "empty", "(", "$", "formattedPayload", ")", "?", "null", ":", "$", "formattedPayload", ",", "'listeners'", "=>", "$", "this", "->", "formatListeners", "(", "$", "eventName", ")", ",", "'broadcast'", "=>", "class_exists", "(", "$", "eventName", ")", "?", "in_array", "(", "ShouldBroadcast", "::", "class", ",", "(", "array", ")", "class_implements", "(", "$", "eventName", ")", ")", ":", "false", ",", "]", ")", "->", "tags", "(", "class_exists", "(", "$", "eventName", ")", "&&", "isset", "(", "$", "payload", "[", "0", "]", ")", "?", "ExtractTags", "::", "from", "(", "$", "payload", "[", "0", "]", ")", ":", "[", "]", ")", ")", ";", "}"], "docstring": "Record an event was fired.\n\n@param  string  $eventName\n@param  array  $payload\n@return void", "docstring_tokens": ["Record", "an", "event", "was", "fired", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/EventWatcher.php#L35-L51", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/EventWatcher.php", "func_name": "EventWatcher.extractPayload", "original_string": "protected function extractPayload($eventName, $payload)\n    {\n        if (class_exists($eventName) && isset($payload[0]) && is_object($payload[0])) {\n            return ExtractProperties::from($payload[0]);\n        }\n\n        return collect($payload)->map(function ($value) {\n            return is_object($value) ? [\n                'class' => get_class($value),\n                'properties' => json_decode(json_encode($value), true),\n            ] : $value;\n        })->toArray();\n    }", "language": "php", "code": "protected function extractPayload($eventName, $payload)\n    {\n        if (class_exists($eventName) && isset($payload[0]) && is_object($payload[0])) {\n            return ExtractProperties::from($payload[0]);\n        }\n\n        return collect($payload)->map(function ($value) {\n            return is_object($value) ? [\n                'class' => get_class($value),\n                'properties' => json_decode(json_encode($value), true),\n            ] : $value;\n        })->toArray();\n    }", "code_tokens": ["protected", "function", "extractPayload", "(", "$", "eventName", ",", "$", "payload", ")", "{", "if", "(", "class_exists", "(", "$", "eventName", ")", "&&", "isset", "(", "$", "payload", "[", "0", "]", ")", "&&", "is_object", "(", "$", "payload", "[", "0", "]", ")", ")", "{", "return", "ExtractProperties", "::", "from", "(", "$", "payload", "[", "0", "]", ")", ";", "}", "return", "collect", "(", "$", "payload", ")", "->", "map", "(", "function", "(", "$", "value", ")", "{", "return", "is_object", "(", "$", "value", ")", "?", "[", "'class'", "=>", "get_class", "(", "$", "value", ")", ",", "'properties'", "=>", "json_decode", "(", "json_encode", "(", "$", "value", ")", ",", "true", ")", ",", "]", ":", "$", "value", ";", "}", ")", "->", "toArray", "(", ")", ";", "}"], "docstring": "Extract the payload and tags from the event.\n\n@param  string  $eventName\n@param  array  $payload\n@return array", "docstring_tokens": ["Extract", "the", "payload", "and", "tags", "from", "the", "event", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/EventWatcher.php#L60-L72", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/EventWatcher.php", "func_name": "EventWatcher.formatListeners", "original_string": "protected function formatListeners($eventName)\n    {\n        return collect(app('events')->getListeners($eventName))\n            ->map(function ($listener) {\n                $listener = (new ReflectionFunction($listener))\n                        ->getStaticVariables()['listener'];\n\n                if (is_string($listener)) {\n                    return Str::contains($listener, '@') ? $listener : $listener.'@handle';\n                } elseif (is_array($listener)) {\n                    return get_class($listener[0]).'@'.$listener[1];\n                }\n\n                return $this->formatClosureListener($listener);\n            })->reject(function ($listener) {\n                return Str::contains($listener, 'Laravel\\\\Telescope');\n            })->map(function ($listener) {\n                if (Str::contains($listener, '@')) {\n                    $queued = in_array(ShouldQueue::class, class_implements(explode('@', $listener)[0]));\n                }\n\n                return [\n                    'name' => $listener,\n                    'queued' => $queued ?? false,\n                ];\n            })->values()->toArray();\n    }", "language": "php", "code": "protected function formatListeners($eventName)\n    {\n        return collect(app('events')->getListeners($eventName))\n            ->map(function ($listener) {\n                $listener = (new ReflectionFunction($listener))\n                        ->getStaticVariables()['listener'];\n\n                if (is_string($listener)) {\n                    return Str::contains($listener, '@') ? $listener : $listener.'@handle';\n                } elseif (is_array($listener)) {\n                    return get_class($listener[0]).'@'.$listener[1];\n                }\n\n                return $this->formatClosureListener($listener);\n            })->reject(function ($listener) {\n                return Str::contains($listener, 'Laravel\\\\Telescope');\n            })->map(function ($listener) {\n                if (Str::contains($listener, '@')) {\n                    $queued = in_array(ShouldQueue::class, class_implements(explode('@', $listener)[0]));\n                }\n\n                return [\n                    'name' => $listener,\n                    'queued' => $queued ?? false,\n                ];\n            })->values()->toArray();\n    }", "code_tokens": ["protected", "function", "formatListeners", "(", "$", "eventName", ")", "{", "return", "collect", "(", "app", "(", "'events'", ")", "->", "getListeners", "(", "$", "eventName", ")", ")", "->", "map", "(", "function", "(", "$", "listener", ")", "{", "$", "listener", "=", "(", "new", "ReflectionFunction", "(", "$", "listener", ")", ")", "->", "getStaticVariables", "(", ")", "[", "'listener'", "]", ";", "if", "(", "is_string", "(", "$", "listener", ")", ")", "{", "return", "Str", "::", "contains", "(", "$", "listener", ",", "'@'", ")", "?", "$", "listener", ":", "$", "listener", ".", "'@handle'", ";", "}", "elseif", "(", "is_array", "(", "$", "listener", ")", ")", "{", "return", "get_class", "(", "$", "listener", "[", "0", "]", ")", ".", "'@'", ".", "$", "listener", "[", "1", "]", ";", "}", "return", "$", "this", "->", "formatClosureListener", "(", "$", "listener", ")", ";", "}", ")", "->", "reject", "(", "function", "(", "$", "listener", ")", "{", "return", "Str", "::", "contains", "(", "$", "listener", ",", "'Laravel\\\\Telescope'", ")", ";", "}", ")", "->", "map", "(", "function", "(", "$", "listener", ")", "{", "if", "(", "Str", "::", "contains", "(", "$", "listener", ",", "'@'", ")", ")", "{", "$", "queued", "=", "in_array", "(", "ShouldQueue", "::", "class", ",", "class_implements", "(", "explode", "(", "'@'", ",", "$", "listener", ")", "[", "0", "]", ")", ")", ";", "}", "return", "[", "'name'", "=>", "$", "listener", ",", "'queued'", "=>", "$", "queued", "??", "false", ",", "]", ";", "}", ")", "->", "values", "(", ")", "->", "toArray", "(", ")", ";", "}"], "docstring": "Format list of event listeners.\n\n@param  string  $eventName\n@return array", "docstring_tokens": ["Format", "list", "of", "event", "listeners", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/EventWatcher.php#L80-L106", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/EventWatcher.php", "func_name": "EventWatcher.formatClosureListener", "original_string": "protected function formatClosureListener(Closure $listener)\n    {\n        $listener = new ReflectionFunction($listener);\n\n        return sprintf('Closure at %s[%s:%s]',\n            $listener->getFileName(),\n            $listener->getStartLine(),\n            $listener->getEndLine()\n        );\n    }", "language": "php", "code": "protected function formatClosureListener(Closure $listener)\n    {\n        $listener = new ReflectionFunction($listener);\n\n        return sprintf('Closure at %s[%s:%s]',\n            $listener->getFileName(),\n            $listener->getStartLine(),\n            $listener->getEndLine()\n        );\n    }", "code_tokens": ["protected", "function", "formatClosureListener", "(", "Closure", "$", "listener", ")", "{", "$", "listener", "=", "new", "ReflectionFunction", "(", "$", "listener", ")", ";", "return", "sprintf", "(", "'Closure at %s[%s:%s]'", ",", "$", "listener", "->", "getFileName", "(", ")", ",", "$", "listener", "->", "getStartLine", "(", ")", ",", "$", "listener", "->", "getEndLine", "(", ")", ")", ";", "}"], "docstring": "Format a closure-based listener.\n\n@param  \\Closure  $listener\n@return string\n\n@throws \\ReflectionException", "docstring_tokens": ["Format", "a", "closure", "-", "based", "listener", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/EventWatcher.php#L116-L125", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Telescope.php", "func_name": "Telescope.start", "original_string": "public static function start($app)\n    {\n        if (! config('telescope.enabled')) {\n            return;\n        }\n\n        static::registerWatchers($app);\n\n        static::registerMailableTagExtractor();\n\n        if (static::runningApprovedArtisanCommand($app) ||\n            static::handlingApprovedRequest($app)\n        ) {\n            static::startRecording();\n        }\n    }", "language": "php", "code": "public static function start($app)\n    {\n        if (! config('telescope.enabled')) {\n            return;\n        }\n\n        static::registerWatchers($app);\n\n        static::registerMailableTagExtractor();\n\n        if (static::runningApprovedArtisanCommand($app) ||\n            static::handlingApprovedRequest($app)\n        ) {\n            static::startRecording();\n        }\n    }", "code_tokens": ["public", "static", "function", "start", "(", "$", "app", ")", "{", "if", "(", "!", "config", "(", "'telescope.enabled'", ")", ")", "{", "return", ";", "}", "static", "::", "registerWatchers", "(", "$", "app", ")", ";", "static", "::", "registerMailableTagExtractor", "(", ")", ";", "if", "(", "static", "::", "runningApprovedArtisanCommand", "(", "$", "app", ")", "||", "static", "::", "handlingApprovedRequest", "(", "$", "app", ")", ")", "{", "static", "::", "startRecording", "(", ")", ";", "}", "}"], "docstring": "Register the Telescope watchers and start recording if necessary.\n\n@param  \\Illuminate\\Foundation\\Application  $app\n@return void", "docstring_tokens": ["Register", "the", "Telescope", "watchers", "and", "start", "recording", "if", "necessary", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Telescope.php#L125-L140", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Storage/DatabaseEntriesRepository.php", "func_name": "DatabaseEntriesRepository.find", "original_string": "public function find($id): EntryResult\n    {\n        $entry = EntryModel::on($this->connection)->whereUuid($id)->firstOrFail();\n\n        $tags = $this->table('telescope_entries_tags')\n                        ->where('entry_uuid', $id)\n                        ->pluck('tag')\n                        ->all();\n\n        return new EntryResult(\n            $entry->uuid,\n            null,\n            $entry->batch_id,\n            $entry->type,\n            $entry->family_hash,\n            $entry->content,\n            $entry->created_at,\n            $tags\n        );\n    }", "language": "php", "code": "public function find($id): EntryResult\n    {\n        $entry = EntryModel::on($this->connection)->whereUuid($id)->firstOrFail();\n\n        $tags = $this->table('telescope_entries_tags')\n                        ->where('entry_uuid', $id)\n                        ->pluck('tag')\n                        ->all();\n\n        return new EntryResult(\n            $entry->uuid,\n            null,\n            $entry->batch_id,\n            $entry->type,\n            $entry->family_hash,\n            $entry->content,\n            $entry->created_at,\n            $tags\n        );\n    }", "code_tokens": ["public", "function", "find", "(", "$", "id", ")", ":", "EntryResult", "{", "$", "entry", "=", "EntryModel", "::", "on", "(", "$", "this", "->", "connection", ")", "->", "whereUuid", "(", "$", "id", ")", "->", "firstOrFail", "(", ")", ";", "$", "tags", "=", "$", "this", "->", "table", "(", "'telescope_entries_tags'", ")", "->", "where", "(", "'entry_uuid'", ",", "$", "id", ")", "->", "pluck", "(", "'tag'", ")", "->", "all", "(", ")", ";", "return", "new", "EntryResult", "(", "$", "entry", "->", "uuid", ",", "null", ",", "$", "entry", "->", "batch_id", ",", "$", "entry", "->", "type", ",", "$", "entry", "->", "family_hash", ",", "$", "entry", "->", "content", ",", "$", "entry", "->", "created_at", ",", "$", "tags", ")", ";", "}"], "docstring": "Find the entry with the given ID.\n\n@param  mixed  $id\n@return \\Laravel\\Telescope\\EntryResult", "docstring_tokens": ["Find", "the", "entry", "with", "the", "given", "ID", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Storage/DatabaseEntriesRepository.php#L60-L79", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Storage/DatabaseEntriesRepository.php", "func_name": "DatabaseEntriesRepository.get", "original_string": "public function get($type, EntryQueryOptions $options)\n    {\n        return EntryModel::on($this->connection)\n            ->withTelescopeOptions($type, $options)\n            ->take($options->limit)\n            ->orderByDesc('sequence')\n            ->get()->reject(function ($entry) {\n                return ! is_array($entry->content);\n            })->map(function ($entry) {\n                return new EntryResult(\n                    $entry->uuid,\n                    $entry->sequence,\n                    $entry->batch_id,\n                    $entry->type,\n                    $entry->family_hash,\n                    $entry->content,\n                    $entry->created_at,\n                    []\n                );\n            })->values();\n    }", "language": "php", "code": "public function get($type, EntryQueryOptions $options)\n    {\n        return EntryModel::on($this->connection)\n            ->withTelescopeOptions($type, $options)\n            ->take($options->limit)\n            ->orderByDesc('sequence')\n            ->get()->reject(function ($entry) {\n                return ! is_array($entry->content);\n            })->map(function ($entry) {\n                return new EntryResult(\n                    $entry->uuid,\n                    $entry->sequence,\n                    $entry->batch_id,\n                    $entry->type,\n                    $entry->family_hash,\n                    $entry->content,\n                    $entry->created_at,\n                    []\n                );\n            })->values();\n    }", "code_tokens": ["public", "function", "get", "(", "$", "type", ",", "EntryQueryOptions", "$", "options", ")", "{", "return", "EntryModel", "::", "on", "(", "$", "this", "->", "connection", ")", "->", "withTelescopeOptions", "(", "$", "type", ",", "$", "options", ")", "->", "take", "(", "$", "options", "->", "limit", ")", "->", "orderByDesc", "(", "'sequence'", ")", "->", "get", "(", ")", "->", "reject", "(", "function", "(", "$", "entry", ")", "{", "return", "!", "is_array", "(", "$", "entry", "->", "content", ")", ";", "}", ")", "->", "map", "(", "function", "(", "$", "entry", ")", "{", "return", "new", "EntryResult", "(", "$", "entry", "->", "uuid", ",", "$", "entry", "->", "sequence", ",", "$", "entry", "->", "batch_id", ",", "$", "entry", "->", "type", ",", "$", "entry", "->", "family_hash", ",", "$", "entry", "->", "content", ",", "$", "entry", "->", "created_at", ",", "[", "]", ")", ";", "}", ")", "->", "values", "(", ")", ";", "}"], "docstring": "Return all the entries of a given type.\n\n@param  string|null  $type\n@param  \\Laravel\\Telescope\\Storage\\EntryQueryOptions  $options\n@return \\Illuminate\\Support\\Collection|\\Laravel\\Telescope\\EntryResult[]", "docstring_tokens": ["Return", "all", "the", "entries", "of", "a", "given", "type", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Storage/DatabaseEntriesRepository.php#L88-L108", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Storage/DatabaseEntriesRepository.php", "func_name": "DatabaseEntriesRepository.store", "original_string": "public function store(Collection $entries)\n    {\n        if ($entries->isEmpty()) {\n            return;\n        }\n\n        [$exceptions, $entries] = $entries->partition->isException();\n\n        $this->storeExceptions($exceptions);\n\n        $table = $this->table('telescope_entries');\n\n        $entries->chunk($this->chunkSize)->each(function ($chunked) use ($table) {\n            $table->insert($chunked->map(function ($entry) {\n                $entry->content = json_encode($entry->content);\n\n                return $entry->toArray();\n            })->toArray());\n        });\n\n        $this->storeTags($entries->pluck('tags', 'uuid'));\n    }", "language": "php", "code": "public function store(Collection $entries)\n    {\n        if ($entries->isEmpty()) {\n            return;\n        }\n\n        [$exceptions, $entries] = $entries->partition->isException();\n\n        $this->storeExceptions($exceptions);\n\n        $table = $this->table('telescope_entries');\n\n        $entries->chunk($this->chunkSize)->each(function ($chunked) use ($table) {\n            $table->insert($chunked->map(function ($entry) {\n                $entry->content = json_encode($entry->content);\n\n                return $entry->toArray();\n            })->toArray());\n        });\n\n        $this->storeTags($entries->pluck('tags', 'uuid'));\n    }", "code_tokens": ["public", "function", "store", "(", "Collection", "$", "entries", ")", "{", "if", "(", "$", "entries", "->", "isEmpty", "(", ")", ")", "{", "return", ";", "}", "[", "$", "exceptions", ",", "$", "entries", "]", "=", "$", "entries", "->", "partition", "->", "isException", "(", ")", ";", "$", "this", "->", "storeExceptions", "(", "$", "exceptions", ")", ";", "$", "table", "=", "$", "this", "->", "table", "(", "'telescope_entries'", ")", ";", "$", "entries", "->", "chunk", "(", "$", "this", "->", "chunkSize", ")", "->", "each", "(", "function", "(", "$", "chunked", ")", "use", "(", "$", "table", ")", "{", "$", "table", "->", "insert", "(", "$", "chunked", "->", "map", "(", "function", "(", "$", "entry", ")", "{", "$", "entry", "->", "content", "=", "json_encode", "(", "$", "entry", "->", "content", ")", ";", "return", "$", "entry", "->", "toArray", "(", ")", ";", "}", ")", "->", "toArray", "(", ")", ")", ";", "}", ")", ";", "$", "this", "->", "storeTags", "(", "$", "entries", "->", "pluck", "(", "'tags'", ",", "'uuid'", ")", ")", ";", "}"], "docstring": "Store the given array of entries.\n\n@param  \\Illuminate\\Support\\Collection|\\Laravel\\Telescope\\IncomingEntry[]  $entries\n@return void", "docstring_tokens": ["Store", "the", "given", "array", "of", "entries", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Storage/DatabaseEntriesRepository.php#L116-L137", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Storage/DatabaseEntriesRepository.php", "func_name": "DatabaseEntriesRepository.storeExceptions", "original_string": "protected function storeExceptions(Collection $exceptions)\n    {\n        $this->table('telescope_entries')->insert($exceptions->map(function ($exception) {\n            $occurrences = $this->table('telescope_entries')\n                    ->where('type', EntryType::EXCEPTION)\n                    ->where('family_hash', $exception->familyHash())\n                    ->count();\n\n            $this->table('telescope_entries')\n                    ->where('type', EntryType::EXCEPTION)\n                    ->where('family_hash', $exception->familyHash())\n                    ->update(['should_display_on_index' => false]);\n\n            return array_merge($exception->toArray(), [\n                'family_hash' => $exception->familyHash(),\n                'content' => json_encode(array_merge(\n                    $exception->content, ['occurrences' => $occurrences + 1]\n                )),\n            ]);\n        })->toArray());\n\n        $this->storeTags($exceptions->pluck('tags', 'uuid'));\n    }", "language": "php", "code": "protected function storeExceptions(Collection $exceptions)\n    {\n        $this->table('telescope_entries')->insert($exceptions->map(function ($exception) {\n            $occurrences = $this->table('telescope_entries')\n                    ->where('type', EntryType::EXCEPTION)\n                    ->where('family_hash', $exception->familyHash())\n                    ->count();\n\n            $this->table('telescope_entries')\n                    ->where('type', EntryType::EXCEPTION)\n                    ->where('family_hash', $exception->familyHash())\n                    ->update(['should_display_on_index' => false]);\n\n            return array_merge($exception->toArray(), [\n                'family_hash' => $exception->familyHash(),\n                'content' => json_encode(array_merge(\n                    $exception->content, ['occurrences' => $occurrences + 1]\n                )),\n            ]);\n        })->toArray());\n\n        $this->storeTags($exceptions->pluck('tags', 'uuid'));\n    }", "code_tokens": ["protected", "function", "storeExceptions", "(", "Collection", "$", "exceptions", ")", "{", "$", "this", "->", "table", "(", "'telescope_entries'", ")", "->", "insert", "(", "$", "exceptions", "->", "map", "(", "function", "(", "$", "exception", ")", "{", "$", "occurrences", "=", "$", "this", "->", "table", "(", "'telescope_entries'", ")", "->", "where", "(", "'type'", ",", "EntryType", "::", "EXCEPTION", ")", "->", "where", "(", "'family_hash'", ",", "$", "exception", "->", "familyHash", "(", ")", ")", "->", "count", "(", ")", ";", "$", "this", "->", "table", "(", "'telescope_entries'", ")", "->", "where", "(", "'type'", ",", "EntryType", "::", "EXCEPTION", ")", "->", "where", "(", "'family_hash'", ",", "$", "exception", "->", "familyHash", "(", ")", ")", "->", "update", "(", "[", "'should_display_on_index'", "=>", "false", "]", ")", ";", "return", "array_merge", "(", "$", "exception", "->", "toArray", "(", ")", ",", "[", "'family_hash'", "=>", "$", "exception", "->", "familyHash", "(", ")", ",", "'content'", "=>", "json_encode", "(", "array_merge", "(", "$", "exception", "->", "content", ",", "[", "'occurrences'", "=>", "$", "occurrences", "+", "1", "]", ")", ")", ",", "]", ")", ";", "}", ")", "->", "toArray", "(", ")", ")", ";", "$", "this", "->", "storeTags", "(", "$", "exceptions", "->", "pluck", "(", "'tags'", ",", "'uuid'", ")", ")", ";", "}"], "docstring": "Store the given array of exception entries.\n\n@param  \\Illuminate\\Support\\Collection|\\Laravel\\Telescope\\IncomingEntry[]  $exceptions\n@return void", "docstring_tokens": ["Store", "the", "given", "array", "of", "exception", "entries", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Storage/DatabaseEntriesRepository.php#L145-L167", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Storage/DatabaseEntriesRepository.php", "func_name": "DatabaseEntriesRepository.storeTags", "original_string": "protected function storeTags($results)\n    {\n        $this->table('telescope_entries_tags')->insert($results->flatMap(function ($tags, $uuid) {\n            return collect($tags)->map(function ($tag) use ($uuid) {\n                return [\n                    'entry_uuid' => $uuid,\n                    'tag' => $tag,\n                ];\n            });\n        })->all());\n    }", "language": "php", "code": "protected function storeTags($results)\n    {\n        $this->table('telescope_entries_tags')->insert($results->flatMap(function ($tags, $uuid) {\n            return collect($tags)->map(function ($tag) use ($uuid) {\n                return [\n                    'entry_uuid' => $uuid,\n                    'tag' => $tag,\n                ];\n            });\n        })->all());\n    }", "code_tokens": ["protected", "function", "storeTags", "(", "$", "results", ")", "{", "$", "this", "->", "table", "(", "'telescope_entries_tags'", ")", "->", "insert", "(", "$", "results", "->", "flatMap", "(", "function", "(", "$", "tags", ",", "$", "uuid", ")", "{", "return", "collect", "(", "$", "tags", ")", "->", "map", "(", "function", "(", "$", "tag", ")", "use", "(", "$", "uuid", ")", "{", "return", "[", "'entry_uuid'", "=>", "$", "uuid", ",", "'tag'", "=>", "$", "tag", ",", "]", ";", "}", ")", ";", "}", ")", "->", "all", "(", ")", ")", ";", "}"], "docstring": "Store the tags for the given entries.\n\n@param  \\Illuminate\\Support\\Collection  $results\n@return void", "docstring_tokens": ["Store", "the", "tags", "for", "the", "given", "entries", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Storage/DatabaseEntriesRepository.php#L175-L185", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Storage/DatabaseEntriesRepository.php", "func_name": "DatabaseEntriesRepository.update", "original_string": "public function update(Collection $updates)\n    {\n        foreach ($updates as $update) {\n            $entry = $this->table('telescope_entries')\n                            ->where('uuid', $update->uuid)\n                            ->where('type', $update->type)\n                            ->first();\n\n            if (! $entry) {\n                continue;\n            }\n\n            $content = json_encode(array_merge(\n                json_decode($entry->content, true) ?: [], $update->changes\n            ));\n\n            $this->table('telescope_entries')\n                            ->where('uuid', $update->uuid)\n                            ->where('type', $update->type)\n                            ->update(['content' => $content]);\n\n            $this->updateTags($update);\n        }\n    }", "language": "php", "code": "public function update(Collection $updates)\n    {\n        foreach ($updates as $update) {\n            $entry = $this->table('telescope_entries')\n                            ->where('uuid', $update->uuid)\n                            ->where('type', $update->type)\n                            ->first();\n\n            if (! $entry) {\n                continue;\n            }\n\n            $content = json_encode(array_merge(\n                json_decode($entry->content, true) ?: [], $update->changes\n            ));\n\n            $this->table('telescope_entries')\n                            ->where('uuid', $update->uuid)\n                            ->where('type', $update->type)\n                            ->update(['content' => $content]);\n\n            $this->updateTags($update);\n        }\n    }", "code_tokens": ["public", "function", "update", "(", "Collection", "$", "updates", ")", "{", "foreach", "(", "$", "updates", "as", "$", "update", ")", "{", "$", "entry", "=", "$", "this", "->", "table", "(", "'telescope_entries'", ")", "->", "where", "(", "'uuid'", ",", "$", "update", "->", "uuid", ")", "->", "where", "(", "'type'", ",", "$", "update", "->", "type", ")", "->", "first", "(", ")", ";", "if", "(", "!", "$", "entry", ")", "{", "continue", ";", "}", "$", "content", "=", "json_encode", "(", "array_merge", "(", "json_decode", "(", "$", "entry", "->", "content", ",", "true", ")", "?", ":", "[", "]", ",", "$", "update", "->", "changes", ")", ")", ";", "$", "this", "->", "table", "(", "'telescope_entries'", ")", "->", "where", "(", "'uuid'", ",", "$", "update", "->", "uuid", ")", "->", "where", "(", "'type'", ",", "$", "update", "->", "type", ")", "->", "update", "(", "[", "'content'", "=>", "$", "content", "]", ")", ";", "$", "this", "->", "updateTags", "(", "$", "update", ")", ";", "}", "}"], "docstring": "Store the given entry updates.\n\n@param  \\Illuminate\\Support\\Collection|\\Laravel\\Telescope\\EntryUpdate[]  $updates\n@return void", "docstring_tokens": ["Store", "the", "given", "entry", "updates", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Storage/DatabaseEntriesRepository.php#L193-L216", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Storage/DatabaseEntriesRepository.php", "func_name": "DatabaseEntriesRepository.updateTags", "original_string": "protected function updateTags($entry)\n    {\n        if (! empty($entry->tagsChanges['added'])) {\n            $this->table('telescope_entries_tags')->insert(\n                collect($entry->tagsChanges['added'])->map(function ($tag) use ($entry) {\n                    return [\n                        'entry_uuid' => $entry->uuid,\n                        'tag' => $tag,\n                    ];\n                })->toArray()\n            );\n        }\n\n        collect($entry->tagsChanges['removed'])->each(function ($tag) use ($entry) {\n            $this->table('telescope_entries_tags')->where([\n                'entry_uuid' => $entry->uuid,\n                'tag' => $tag,\n            ])->delete();\n        });\n    }", "language": "php", "code": "protected function updateTags($entry)\n    {\n        if (! empty($entry->tagsChanges['added'])) {\n            $this->table('telescope_entries_tags')->insert(\n                collect($entry->tagsChanges['added'])->map(function ($tag) use ($entry) {\n                    return [\n                        'entry_uuid' => $entry->uuid,\n                        'tag' => $tag,\n                    ];\n                })->toArray()\n            );\n        }\n\n        collect($entry->tagsChanges['removed'])->each(function ($tag) use ($entry) {\n            $this->table('telescope_entries_tags')->where([\n                'entry_uuid' => $entry->uuid,\n                'tag' => $tag,\n            ])->delete();\n        });\n    }", "code_tokens": ["protected", "function", "updateTags", "(", "$", "entry", ")", "{", "if", "(", "!", "empty", "(", "$", "entry", "->", "tagsChanges", "[", "'added'", "]", ")", ")", "{", "$", "this", "->", "table", "(", "'telescope_entries_tags'", ")", "->", "insert", "(", "collect", "(", "$", "entry", "->", "tagsChanges", "[", "'added'", "]", ")", "->", "map", "(", "function", "(", "$", "tag", ")", "use", "(", "$", "entry", ")", "{", "return", "[", "'entry_uuid'", "=>", "$", "entry", "->", "uuid", ",", "'tag'", "=>", "$", "tag", ",", "]", ";", "}", ")", "->", "toArray", "(", ")", ")", ";", "}", "collect", "(", "$", "entry", "->", "tagsChanges", "[", "'removed'", "]", ")", "->", "each", "(", "function", "(", "$", "tag", ")", "use", "(", "$", "entry", ")", "{", "$", "this", "->", "table", "(", "'telescope_entries_tags'", ")", "->", "where", "(", "[", "'entry_uuid'", "=>", "$", "entry", "->", "uuid", ",", "'tag'", "=>", "$", "tag", ",", "]", ")", "->", "delete", "(", ")", ";", "}", ")", ";", "}"], "docstring": "Update tags of the given entry.\n\n@param  \\Laravel\\Telescope\\EntryUpdate  $entry\n@return void", "docstring_tokens": ["Update", "tags", "of", "the", "given", "entry", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Storage/DatabaseEntriesRepository.php#L224-L243", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Storage/DatabaseEntriesRepository.php", "func_name": "DatabaseEntriesRepository.isMonitoring", "original_string": "public function isMonitoring(array $tags)\n    {\n        if (is_null($this->monitoredTags)) {\n            $this->loadMonitoredTags();\n        }\n\n        return count(array_intersect($tags, $this->monitoredTags)) > 0;\n    }", "language": "php", "code": "public function isMonitoring(array $tags)\n    {\n        if (is_null($this->monitoredTags)) {\n            $this->loadMonitoredTags();\n        }\n\n        return count(array_intersect($tags, $this->monitoredTags)) > 0;\n    }", "code_tokens": ["public", "function", "isMonitoring", "(", "array", "$", "tags", ")", "{", "if", "(", "is_null", "(", "$", "this", "->", "monitoredTags", ")", ")", "{", "$", "this", "->", "loadMonitoredTags", "(", ")", ";", "}", "return", "count", "(", "array_intersect", "(", "$", "tags", ",", "$", "this", "->", "monitoredTags", ")", ")", ">", "0", ";", "}"], "docstring": "Determine if any of the given tags are currently being monitored.\n\n@param  array  $tags\n@return bool", "docstring_tokens": ["Determine", "if", "any", "of", "the", "given", "tags", "are", "currently", "being", "monitored", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Storage/DatabaseEntriesRepository.php#L265-L272", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Storage/DatabaseEntriesRepository.php", "func_name": "DatabaseEntriesRepository.monitor", "original_string": "public function monitor(array $tags)\n    {\n        $tags = array_diff($tags, $this->monitoring());\n\n        if (empty($tags)) {\n            return;\n        }\n\n        $this->table('telescope_monitoring')\n                    ->insert(collect($tags)\n                    ->mapWithKeys(function ($tag) {\n                        return ['tag' => $tag];\n                    })->all());\n    }", "language": "php", "code": "public function monitor(array $tags)\n    {\n        $tags = array_diff($tags, $this->monitoring());\n\n        if (empty($tags)) {\n            return;\n        }\n\n        $this->table('telescope_monitoring')\n                    ->insert(collect($tags)\n                    ->mapWithKeys(function ($tag) {\n                        return ['tag' => $tag];\n                    })->all());\n    }", "code_tokens": ["public", "function", "monitor", "(", "array", "$", "tags", ")", "{", "$", "tags", "=", "array_diff", "(", "$", "tags", ",", "$", "this", "->", "monitoring", "(", ")", ")", ";", "if", "(", "empty", "(", "$", "tags", ")", ")", "{", "return", ";", "}", "$", "this", "->", "table", "(", "'telescope_monitoring'", ")", "->", "insert", "(", "collect", "(", "$", "tags", ")", "->", "mapWithKeys", "(", "function", "(", "$", "tag", ")", "{", "return", "[", "'tag'", "=>", "$", "tag", "]", ";", "}", ")", "->", "all", "(", ")", ")", ";", "}"], "docstring": "Begin monitoring the given list of tags.\n\n@param  array  $tags\n@return void", "docstring_tokens": ["Begin", "monitoring", "the", "given", "list", "of", "tags", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Storage/DatabaseEntriesRepository.php#L290-L303", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/RegistersWatchers.php", "func_name": "RegistersWatchers.registerWatchers", "original_string": "protected static function registerWatchers($app)\n    {\n        foreach (config('telescope.watchers') as $key => $watcher) {\n            if (is_string($key) && $watcher === false) {\n                continue;\n            }\n\n            if (is_array($watcher) && ! ($watcher['enabled'] ?? true)) {\n                continue;\n            }\n\n            $watcher = $app->make(is_string($key) ? $key : $watcher, [\n                'options' => is_array($watcher) ? $watcher : [],\n            ]);\n\n            static::$watchers[] = get_class($watcher);\n\n            $watcher->register($app);\n        }\n    }", "language": "php", "code": "protected static function registerWatchers($app)\n    {\n        foreach (config('telescope.watchers') as $key => $watcher) {\n            if (is_string($key) && $watcher === false) {\n                continue;\n            }\n\n            if (is_array($watcher) && ! ($watcher['enabled'] ?? true)) {\n                continue;\n            }\n\n            $watcher = $app->make(is_string($key) ? $key : $watcher, [\n                'options' => is_array($watcher) ? $watcher : [],\n            ]);\n\n            static::$watchers[] = get_class($watcher);\n\n            $watcher->register($app);\n        }\n    }", "code_tokens": ["protected", "static", "function", "registerWatchers", "(", "$", "app", ")", "{", "foreach", "(", "config", "(", "'telescope.watchers'", ")", "as", "$", "key", "=>", "$", "watcher", ")", "{", "if", "(", "is_string", "(", "$", "key", ")", "&&", "$", "watcher", "===", "false", ")", "{", "continue", ";", "}", "if", "(", "is_array", "(", "$", "watcher", ")", "&&", "!", "(", "$", "watcher", "[", "'enabled'", "]", "??", "true", ")", ")", "{", "continue", ";", "}", "$", "watcher", "=", "$", "app", "->", "make", "(", "is_string", "(", "$", "key", ")", "?", "$", "key", ":", "$", "watcher", ",", "[", "'options'", "=>", "is_array", "(", "$", "watcher", ")", "?", "$", "watcher", ":", "[", "]", ",", "]", ")", ";", "static", "::", "$", "watchers", "[", "]", "=", "get_class", "(", "$", "watcher", ")", ";", "$", "watcher", "->", "register", "(", "$", "app", ")", ";", "}", "}"], "docstring": "Register the configured Telescope watchers.\n\n@param  \\Illuminate\\Foundation\\Application  $app\n@return void", "docstring_tokens": ["Register", "the", "configured", "Telescope", "watchers", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/RegistersWatchers.php#L31-L50", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/IncomingExceptionEntry.php", "func_name": "IncomingExceptionEntry.isReportableException", "original_string": "public function isReportableException()\n    {\n        $handler = app(ExceptionHandler::class);\n\n        return method_exists($handler, 'shouldReport')\n                ? $handler->shouldReport($this->exception) : true;\n    }", "language": "php", "code": "public function isReportableException()\n    {\n        $handler = app(ExceptionHandler::class);\n\n        return method_exists($handler, 'shouldReport')\n                ? $handler->shouldReport($this->exception) : true;\n    }", "code_tokens": ["public", "function", "isReportableException", "(", ")", "{", "$", "handler", "=", "app", "(", "ExceptionHandler", "::", "class", ")", ";", "return", "method_exists", "(", "$", "handler", ",", "'shouldReport'", ")", "?", "$", "handler", "->", "shouldReport", "(", "$", "this", "->", "exception", ")", ":", "true", ";", "}"], "docstring": "Determine if the incoming entry is a reportable exception.\n\n@return bool", "docstring_tokens": ["Determine", "if", "the", "incoming", "entry", "is", "a", "reportable", "exception", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/IncomingExceptionEntry.php#L35-L41", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/GateWatcher.php", "func_name": "GateWatcher.recordGateCheck", "original_string": "public function recordGateCheck(?Authenticatable $user, $ability, $result, $arguments)\n    {\n        if (! Telescope::isRecording() || $this->shouldIgnore($ability)) {\n            return;\n        }\n\n        $caller = $this->getCallerFromStackTrace();\n\n        Telescope::recordGate(IncomingEntry::make([\n            'ability' => $ability,\n            'result' => $result ? 'allowed' : 'denied',\n            'arguments' => $this->formatArguments($arguments),\n            'file' => $caller['file'],\n            'line' => $caller['line'],\n        ]));\n\n        return $result;\n    }", "language": "php", "code": "public function recordGateCheck(?Authenticatable $user, $ability, $result, $arguments)\n    {\n        if (! Telescope::isRecording() || $this->shouldIgnore($ability)) {\n            return;\n        }\n\n        $caller = $this->getCallerFromStackTrace();\n\n        Telescope::recordGate(IncomingEntry::make([\n            'ability' => $ability,\n            'result' => $result ? 'allowed' : 'denied',\n            'arguments' => $this->formatArguments($arguments),\n            'file' => $caller['file'],\n            'line' => $caller['line'],\n        ]));\n\n        return $result;\n    }", "code_tokens": ["public", "function", "recordGateCheck", "(", "?", "Authenticatable", "$", "user", ",", "$", "ability", ",", "$", "result", ",", "$", "arguments", ")", "{", "if", "(", "!", "Telescope", "::", "isRecording", "(", ")", "||", "$", "this", "->", "shouldIgnore", "(", "$", "ability", ")", ")", "{", "return", ";", "}", "$", "caller", "=", "$", "this", "->", "getCallerFromStackTrace", "(", ")", ";", "Telescope", "::", "recordGate", "(", "IncomingEntry", "::", "make", "(", "[", "'ability'", "=>", "$", "ability", ",", "'result'", "=>", "$", "result", "?", "'allowed'", ":", "'denied'", ",", "'arguments'", "=>", "$", "this", "->", "formatArguments", "(", "$", "arguments", ")", ",", "'file'", "=>", "$", "caller", "[", "'file'", "]", ",", "'line'", "=>", "$", "caller", "[", "'line'", "]", ",", "]", ")", ")", ";", "return", "$", "result", ";", "}"], "docstring": "Record a gate check.\n\n@param  \\Illuminate\\Contracts\\Auth\\Authenticatable|null  $user\n@param  string  $ability\n@param  bool  $result\n@param  array  $arguments\n@return bool", "docstring_tokens": ["Record", "a", "gate", "check", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/GateWatcher.php#L37-L54", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/GateWatcher.php", "func_name": "GateWatcher.formatArguments", "original_string": "private function formatArguments($arguments)\n    {\n        return collect($arguments)->map(function ($argument) {\n            return $argument instanceof Model ? FormatModel::given($argument) : $argument;\n        })->toArray();\n    }", "language": "php", "code": "private function formatArguments($arguments)\n    {\n        return collect($arguments)->map(function ($argument) {\n            return $argument instanceof Model ? FormatModel::given($argument) : $argument;\n        })->toArray();\n    }", "code_tokens": ["private", "function", "formatArguments", "(", "$", "arguments", ")", "{", "return", "collect", "(", "$", "arguments", ")", "->", "map", "(", "function", "(", "$", "argument", ")", "{", "return", "$", "argument", "instanceof", "Model", "?", "FormatModel", "::", "given", "(", "$", "argument", ")", ":", "$", "argument", ";", "}", ")", "->", "toArray", "(", ")", ";", "}"], "docstring": "Format the given arguments.\n\n@param  array  $arguments\n@return array", "docstring_tokens": ["Format", "the", "given", "arguments", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/GateWatcher.php#L73-L78", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/MailWatcher.php", "func_name": "MailWatcher.recordMail", "original_string": "public function recordMail(MessageSent $event)\n    {\n        if (! Telescope::isRecording()) {\n            return;\n        }\n\n        Telescope::recordMail(IncomingEntry::make([\n            'mailable' => $this->getMailable($event),\n            'queued' => $this->getQueuedStatus($event),\n            'from' => $event->message->getFrom(),\n            'replyTo' => $event->message->getReplyTo(),\n            'to' => $event->message->getTo(),\n            'cc' => $event->message->getCc(),\n            'bcc' => $event->message->getBcc(),\n            'subject' => $event->message->getSubject(),\n            'html' => $event->message->getBody(),\n            'raw' => $event->message->toString(),\n        ])->tags($this->tags($event->message, $event->data)));\n    }", "language": "php", "code": "public function recordMail(MessageSent $event)\n    {\n        if (! Telescope::isRecording()) {\n            return;\n        }\n\n        Telescope::recordMail(IncomingEntry::make([\n            'mailable' => $this->getMailable($event),\n            'queued' => $this->getQueuedStatus($event),\n            'from' => $event->message->getFrom(),\n            'replyTo' => $event->message->getReplyTo(),\n            'to' => $event->message->getTo(),\n            'cc' => $event->message->getCc(),\n            'bcc' => $event->message->getBcc(),\n            'subject' => $event->message->getSubject(),\n            'html' => $event->message->getBody(),\n            'raw' => $event->message->toString(),\n        ])->tags($this->tags($event->message, $event->data)));\n    }", "code_tokens": ["public", "function", "recordMail", "(", "MessageSent", "$", "event", ")", "{", "if", "(", "!", "Telescope", "::", "isRecording", "(", ")", ")", "{", "return", ";", "}", "Telescope", "::", "recordMail", "(", "IncomingEntry", "::", "make", "(", "[", "'mailable'", "=>", "$", "this", "->", "getMailable", "(", "$", "event", ")", ",", "'queued'", "=>", "$", "this", "->", "getQueuedStatus", "(", "$", "event", ")", ",", "'from'", "=>", "$", "event", "->", "message", "->", "getFrom", "(", ")", ",", "'replyTo'", "=>", "$", "event", "->", "message", "->", "getReplyTo", "(", ")", ",", "'to'", "=>", "$", "event", "->", "message", "->", "getTo", "(", ")", ",", "'cc'", "=>", "$", "event", "->", "message", "->", "getCc", "(", ")", ",", "'bcc'", "=>", "$", "event", "->", "message", "->", "getBcc", "(", ")", ",", "'subject'", "=>", "$", "event", "->", "message", "->", "getSubject", "(", ")", ",", "'html'", "=>", "$", "event", "->", "message", "->", "getBody", "(", ")", ",", "'raw'", "=>", "$", "event", "->", "message", "->", "toString", "(", ")", ",", "]", ")", "->", "tags", "(", "$", "this", "->", "tags", "(", "$", "event", "->", "message", ",", "$", "event", "->", "data", ")", ")", ")", ";", "}"], "docstring": "Record a mail message was sent.\n\n@param  \\Illuminate\\Mail\\Events\\MessageSent  $event\n@return void", "docstring_tokens": ["Record", "a", "mail", "message", "was", "sent", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/MailWatcher.php#L28-L46", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/MailWatcher.php", "func_name": "MailWatcher.getQueuedStatus", "original_string": "protected function getQueuedStatus($event)\n    {\n        if (isset($event->data['__laravel_notification_queued'])) {\n            return $event->data['__laravel_notification_queued'];\n        }\n\n        return $event->data['__telescope_queued'] ?? false;\n    }", "language": "php", "code": "protected function getQueuedStatus($event)\n    {\n        if (isset($event->data['__laravel_notification_queued'])) {\n            return $event->data['__laravel_notification_queued'];\n        }\n\n        return $event->data['__telescope_queued'] ?? false;\n    }", "code_tokens": ["protected", "function", "getQueuedStatus", "(", "$", "event", ")", "{", "if", "(", "isset", "(", "$", "event", "->", "data", "[", "'__laravel_notification_queued'", "]", ")", ")", "{", "return", "$", "event", "->", "data", "[", "'__laravel_notification_queued'", "]", ";", "}", "return", "$", "event", "->", "data", "[", "'__telescope_queued'", "]", "??", "false", ";", "}"], "docstring": "Determine whether the mailable was queued.\n\n@param  \\Illuminate\\Mail\\Events\\MessageSent  $event\n@return bool", "docstring_tokens": ["Determine", "whether", "the", "mailable", "was", "queued", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/MailWatcher.php#L69-L76", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/MailWatcher.php", "func_name": "MailWatcher.tags", "original_string": "private function tags($message, $data)\n    {\n        return array_merge(\n            array_keys($message->getTo() ?: []),\n            array_keys($message->getCc() ?: []),\n            array_keys($message->getBcc() ?: []),\n            $data['__telescope'] ?? []\n        );\n    }", "language": "php", "code": "private function tags($message, $data)\n    {\n        return array_merge(\n            array_keys($message->getTo() ?: []),\n            array_keys($message->getCc() ?: []),\n            array_keys($message->getBcc() ?: []),\n            $data['__telescope'] ?? []\n        );\n    }", "code_tokens": ["private", "function", "tags", "(", "$", "message", ",", "$", "data", ")", "{", "return", "array_merge", "(", "array_keys", "(", "$", "message", "->", "getTo", "(", ")", "?", ":", "[", "]", ")", ",", "array_keys", "(", "$", "message", "->", "getCc", "(", ")", "?", ":", "[", "]", ")", ",", "array_keys", "(", "$", "message", "->", "getBcc", "(", ")", "?", ":", "[", "]", ")", ",", "$", "data", "[", "'__telescope'", "]", "??", "[", "]", ")", ";", "}"], "docstring": "Extract the tags from the message.\n\n@param  \\Swift_Message  $message\n@param  array  $data\n@return array", "docstring_tokens": ["Extract", "the", "tags", "from", "the", "message", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/MailWatcher.php#L85-L93", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Http/Controllers/MailEmlController.php", "func_name": "MailEmlController.show", "original_string": "public function show(EntriesRepository $storage, $id)\n    {\n        return response($storage->find($id)->content['raw'], 200, [\n            'Content-Type' => 'message/rfc822',\n            'Content-Disposition' => 'attachment; filename=\"mail-'.$id.'.eml\"',\n        ]);\n    }", "language": "php", "code": "public function show(EntriesRepository $storage, $id)\n    {\n        return response($storage->find($id)->content['raw'], 200, [\n            'Content-Type' => 'message/rfc822',\n            'Content-Disposition' => 'attachment; filename=\"mail-'.$id.'.eml\"',\n        ]);\n    }", "code_tokens": ["public", "function", "show", "(", "EntriesRepository", "$", "storage", ",", "$", "id", ")", "{", "return", "response", "(", "$", "storage", "->", "find", "(", "$", "id", ")", "->", "content", "[", "'raw'", "]", ",", "200", ",", "[", "'Content-Type'", "=>", "'message/rfc822'", ",", "'Content-Disposition'", "=>", "'attachment; filename=\"mail-'", ".", "$", "id", ".", "'.eml\"'", ",", "]", ")", ";", "}"], "docstring": "Download the Eml content of the email.\n\n@param  \\Laravel\\Telescope\\Contracts\\EntriesRepository  $storage\n@param  int  $id\n@return mixed", "docstring_tokens": ["Download", "the", "Eml", "content", "of", "the", "email", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Http/Controllers/MailEmlController.php#L17-L23", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/ModelWatcher.php", "func_name": "ModelWatcher.recordAction", "original_string": "public function recordAction($event, $data)\n    {\n        if (! Telescope::isRecording() || ! $this->shouldRecord($event)) {\n            return;\n        }\n\n        $model = FormatModel::given($data[0]);\n\n        $changes = $data[0]->getChanges();\n\n        Telescope::recordModelEvent(IncomingEntry::make(array_filter([\n            'action' => $this->action($event),\n            'model' => $model,\n            'changes' => empty($changes) ? null : $changes,\n        ]))->tags([$model]));\n    }", "language": "php", "code": "public function recordAction($event, $data)\n    {\n        if (! Telescope::isRecording() || ! $this->shouldRecord($event)) {\n            return;\n        }\n\n        $model = FormatModel::given($data[0]);\n\n        $changes = $data[0]->getChanges();\n\n        Telescope::recordModelEvent(IncomingEntry::make(array_filter([\n            'action' => $this->action($event),\n            'model' => $model,\n            'changes' => empty($changes) ? null : $changes,\n        ]))->tags([$model]));\n    }", "code_tokens": ["public", "function", "recordAction", "(", "$", "event", ",", "$", "data", ")", "{", "if", "(", "!", "Telescope", "::", "isRecording", "(", ")", "||", "!", "$", "this", "->", "shouldRecord", "(", "$", "event", ")", ")", "{", "return", ";", "}", "$", "model", "=", "FormatModel", "::", "given", "(", "$", "data", "[", "0", "]", ")", ";", "$", "changes", "=", "$", "data", "[", "0", "]", "->", "getChanges", "(", ")", ";", "Telescope", "::", "recordModelEvent", "(", "IncomingEntry", "::", "make", "(", "array_filter", "(", "[", "'action'", "=>", "$", "this", "->", "action", "(", "$", "event", ")", ",", "'model'", "=>", "$", "model", ",", "'changes'", "=>", "empty", "(", "$", "changes", ")", "?", "null", ":", "$", "changes", ",", "]", ")", ")", "->", "tags", "(", "[", "$", "model", "]", ")", ")", ";", "}"], "docstring": "Record an action.\n\n@param  string  $event\n@param  array  $data\n@return void", "docstring_tokens": ["Record", "an", "action", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/ModelWatcher.php#L30-L45", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/ScheduleWatcher.php", "func_name": "ScheduleWatcher.recordCommand", "original_string": "public function recordCommand(CommandStarting $event)\n    {\n        if (! Telescope::isRecording() ||\n            $event->command !== 'schedule:run' &&\n            $event->command !== 'schedule:finish') {\n            return;\n        }\n\n        collect(app(Schedule::class)->events())->each(function ($event) {\n            $event->then(function () use ($event) {\n                Telescope::recordScheduledCommand(IncomingEntry::make([\n                    'command' => $event instanceof CallbackEvent ? 'Closure' : $event->command,\n                    'description' => $event->description,\n                    'expression' => $event->expression,\n                    'timezone' => $event->timezone,\n                    'user' => $event->user,\n                    'output' => $this->getEventOutput($event),\n                ]));\n            });\n        });\n    }", "language": "php", "code": "public function recordCommand(CommandStarting $event)\n    {\n        if (! Telescope::isRecording() ||\n            $event->command !== 'schedule:run' &&\n            $event->command !== 'schedule:finish') {\n            return;\n        }\n\n        collect(app(Schedule::class)->events())->each(function ($event) {\n            $event->then(function () use ($event) {\n                Telescope::recordScheduledCommand(IncomingEntry::make([\n                    'command' => $event instanceof CallbackEvent ? 'Closure' : $event->command,\n                    'description' => $event->description,\n                    'expression' => $event->expression,\n                    'timezone' => $event->timezone,\n                    'user' => $event->user,\n                    'output' => $this->getEventOutput($event),\n                ]));\n            });\n        });\n    }", "code_tokens": ["public", "function", "recordCommand", "(", "CommandStarting", "$", "event", ")", "{", "if", "(", "!", "Telescope", "::", "isRecording", "(", ")", "||", "$", "event", "->", "command", "!==", "'schedule:run'", "&&", "$", "event", "->", "command", "!==", "'schedule:finish'", ")", "{", "return", ";", "}", "collect", "(", "app", "(", "Schedule", "::", "class", ")", "->", "events", "(", ")", ")", "->", "each", "(", "function", "(", "$", "event", ")", "{", "$", "event", "->", "then", "(", "function", "(", ")", "use", "(", "$", "event", ")", "{", "Telescope", "::", "recordScheduledCommand", "(", "IncomingEntry", "::", "make", "(", "[", "'command'", "=>", "$", "event", "instanceof", "CallbackEvent", "?", "'Closure'", ":", "$", "event", "->", "command", ",", "'description'", "=>", "$", "event", "->", "description", ",", "'expression'", "=>", "$", "event", "->", "expression", ",", "'timezone'", "=>", "$", "event", "->", "timezone", ",", "'user'", "=>", "$", "event", "->", "user", ",", "'output'", "=>", "$", "this", "->", "getEventOutput", "(", "$", "event", ")", ",", "]", ")", ")", ";", "}", ")", ";", "}", ")", ";", "}"], "docstring": "Record a scheduled command was executed.\n\n@param  \\Illuminate\\Console\\Events\\CommandStarting  $event\n@return void", "docstring_tokens": ["Record", "a", "scheduled", "command", "was", "executed", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/ScheduleWatcher.php#L31-L51", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/ScheduleWatcher.php", "func_name": "ScheduleWatcher.getEventOutput", "original_string": "protected function getEventOutput(Event $event)\n    {\n        if (! $event->output ||\n            $event->output === $event->getDefaultOutput() ||\n            $event->shouldAppendOutput ||\n            ! file_exists($event->output)) {\n            return '';\n        }\n\n        return trim(file_get_contents($event->output));\n    }", "language": "php", "code": "protected function getEventOutput(Event $event)\n    {\n        if (! $event->output ||\n            $event->output === $event->getDefaultOutput() ||\n            $event->shouldAppendOutput ||\n            ! file_exists($event->output)) {\n            return '';\n        }\n\n        return trim(file_get_contents($event->output));\n    }", "code_tokens": ["protected", "function", "getEventOutput", "(", "Event", "$", "event", ")", "{", "if", "(", "!", "$", "event", "->", "output", "||", "$", "event", "->", "output", "===", "$", "event", "->", "getDefaultOutput", "(", ")", "||", "$", "event", "->", "shouldAppendOutput", "||", "!", "file_exists", "(", "$", "event", "->", "output", ")", ")", "{", "return", "''", ";", "}", "return", "trim", "(", "file_get_contents", "(", "$", "event", "->", "output", ")", ")", ";", "}"], "docstring": "Get the output for the scheduled event.\n\n@param  \\Illuminate\\Console\\Scheduling\\Event  $event\n@return string|null", "docstring_tokens": ["Get", "the", "output", "for", "the", "scheduled", "event", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/ScheduleWatcher.php#L59-L69", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/ListensForStorageOpportunities.php", "func_name": "ListensForStorageOpportunities.storeEntriesAfterWorkerLoop", "original_string": "protected static function storeEntriesAfterWorkerLoop($app)\n    {\n        $app['events']->listen(JobProcessing::class, function () {\n            static::startRecording();\n\n            static::$processingJobs[] = true;\n        });\n\n        $app['events']->listen(JobProcessed::class, function ($event) use ($app) {\n            static::storeIfDoneProcessingJob($event, $app);\n        });\n\n        $app['events']->listen(JobFailed::class, function ($event) use ($app) {\n            static::storeIfDoneProcessingJob($event, $app);\n        });\n\n        $app['events']->listen(JobExceptionOccurred::class, function () {\n            array_pop(static::$processingJobs);\n        });\n    }", "language": "php", "code": "protected static function storeEntriesAfterWorkerLoop($app)\n    {\n        $app['events']->listen(JobProcessing::class, function () {\n            static::startRecording();\n\n            static::$processingJobs[] = true;\n        });\n\n        $app['events']->listen(JobProcessed::class, function ($event) use ($app) {\n            static::storeIfDoneProcessingJob($event, $app);\n        });\n\n        $app['events']->listen(JobFailed::class, function ($event) use ($app) {\n            static::storeIfDoneProcessingJob($event, $app);\n        });\n\n        $app['events']->listen(JobExceptionOccurred::class, function () {\n            array_pop(static::$processingJobs);\n        });\n    }", "code_tokens": ["protected", "static", "function", "storeEntriesAfterWorkerLoop", "(", "$", "app", ")", "{", "$", "app", "[", "'events'", "]", "->", "listen", "(", "JobProcessing", "::", "class", ",", "function", "(", ")", "{", "static", "::", "startRecording", "(", ")", ";", "static", "::", "$", "processingJobs", "[", "]", "=", "true", ";", "}", ")", ";", "$", "app", "[", "'events'", "]", "->", "listen", "(", "JobProcessed", "::", "class", ",", "function", "(", "$", "event", ")", "use", "(", "$", "app", ")", "{", "static", "::", "storeIfDoneProcessingJob", "(", "$", "event", ",", "$", "app", ")", ";", "}", ")", ";", "$", "app", "[", "'events'", "]", "->", "listen", "(", "JobFailed", "::", "class", ",", "function", "(", "$", "event", ")", "use", "(", "$", "app", ")", "{", "static", "::", "storeIfDoneProcessingJob", "(", "$", "event", ",", "$", "app", ")", ";", "}", ")", ";", "$", "app", "[", "'events'", "]", "->", "listen", "(", "JobExceptionOccurred", "::", "class", ",", "function", "(", ")", "{", "array_pop", "(", "static", "::", "$", "processingJobs", ")", ";", "}", ")", ";", "}"], "docstring": "Store entries after the queue worker loops.\n\n@param  \\Illuminate\\Foundation\\Application  $app\n@return void", "docstring_tokens": ["Store", "entries", "after", "the", "queue", "worker", "loops", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/ListensForStorageOpportunities.php#L54-L73", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/ListensForStorageOpportunities.php", "func_name": "ListensForStorageOpportunities.storeIfDoneProcessingJob", "original_string": "protected static function storeIfDoneProcessingJob($event, $app)\n    {\n        array_pop(static::$processingJobs);\n\n        if (empty(static::$processingJobs)) {\n            static::store($app[EntriesRepository::class]);\n\n            if ($event->connectionName !== 'sync') {\n                static::stopRecording();\n            }\n        }\n    }", "language": "php", "code": "protected static function storeIfDoneProcessingJob($event, $app)\n    {\n        array_pop(static::$processingJobs);\n\n        if (empty(static::$processingJobs)) {\n            static::store($app[EntriesRepository::class]);\n\n            if ($event->connectionName !== 'sync') {\n                static::stopRecording();\n            }\n        }\n    }", "code_tokens": ["protected", "static", "function", "storeIfDoneProcessingJob", "(", "$", "event", ",", "$", "app", ")", "{", "array_pop", "(", "static", "::", "$", "processingJobs", ")", ";", "if", "(", "empty", "(", "static", "::", "$", "processingJobs", ")", ")", "{", "static", "::", "store", "(", "$", "app", "[", "EntriesRepository", "::", "class", "]", ")", ";", "if", "(", "$", "event", "->", "connectionName", "!==", "'sync'", ")", "{", "static", "::", "stopRecording", "(", ")", ";", "}", "}", "}"], "docstring": "Store the recorded entries if totally done processing the current job.\n\n@param  \\Illuminate\\Queue\\Events\\JobProcessed $event\n@param  \\Illuminate\\Foundation\\Application  $app\n@return void", "docstring_tokens": ["Store", "the", "recorded", "entries", "if", "totally", "done", "processing", "the", "current", "job", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/ListensForStorageOpportunities.php#L82-L93", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/NotificationWatcher.php", "func_name": "NotificationWatcher.recordNotification", "original_string": "public function recordNotification(NotificationSent $event)\n    {\n        if (! Telescope::isRecording()) {\n            return;\n        }\n\n        Telescope::recordNotification(IncomingEntry::make([\n            'notification' => get_class($event->notification),\n            'queued' => in_array(ShouldQueue::class, class_implements($event->notification)),\n            'notifiable' => $this->formatNotifiable($event->notifiable),\n            'channel' => $event->channel,\n            'response' => $event->response,\n        ])->tags($this->tags($event)));\n    }", "language": "php", "code": "public function recordNotification(NotificationSent $event)\n    {\n        if (! Telescope::isRecording()) {\n            return;\n        }\n\n        Telescope::recordNotification(IncomingEntry::make([\n            'notification' => get_class($event->notification),\n            'queued' => in_array(ShouldQueue::class, class_implements($event->notification)),\n            'notifiable' => $this->formatNotifiable($event->notifiable),\n            'channel' => $event->channel,\n            'response' => $event->response,\n        ])->tags($this->tags($event)));\n    }", "code_tokens": ["public", "function", "recordNotification", "(", "NotificationSent", "$", "event", ")", "{", "if", "(", "!", "Telescope", "::", "isRecording", "(", ")", ")", "{", "return", ";", "}", "Telescope", "::", "recordNotification", "(", "IncomingEntry", "::", "make", "(", "[", "'notification'", "=>", "get_class", "(", "$", "event", "->", "notification", ")", ",", "'queued'", "=>", "in_array", "(", "ShouldQueue", "::", "class", ",", "class_implements", "(", "$", "event", "->", "notification", ")", ")", ",", "'notifiable'", "=>", "$", "this", "->", "formatNotifiable", "(", "$", "event", "->", "notifiable", ")", ",", "'channel'", "=>", "$", "event", "->", "channel", ",", "'response'", "=>", "$", "event", "->", "response", ",", "]", ")", "->", "tags", "(", "$", "this", "->", "tags", "(", "$", "event", ")", ")", ")", ";", "}"], "docstring": "Record a new notification message was sent.\n\n@param  \\Illuminate\\Notifications\\Events\\NotificationSent  $event\n@return void", "docstring_tokens": ["Record", "a", "new", "notification", "message", "was", "sent", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/NotificationWatcher.php#L33-L46", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/NotificationWatcher.php", "func_name": "NotificationWatcher.tags", "original_string": "private function tags($event)\n    {\n        return array_merge([\n            $this->formatNotifiable($event->notifiable),\n        ], ExtractTags::from($event->notification));\n    }", "language": "php", "code": "private function tags($event)\n    {\n        return array_merge([\n            $this->formatNotifiable($event->notifiable),\n        ], ExtractTags::from($event->notification));\n    }", "code_tokens": ["private", "function", "tags", "(", "$", "event", ")", "{", "return", "array_merge", "(", "[", "$", "this", "->", "formatNotifiable", "(", "$", "event", "->", "notifiable", ")", ",", "]", ",", "ExtractTags", "::", "from", "(", "$", "event", "->", "notification", ")", ")", ";", "}"], "docstring": "Extract the tags for the given event.\n\n@param  \\Illuminate\\Notifications\\Events\\NotificationSent  $event\n@return array", "docstring_tokens": ["Extract", "the", "tags", "for", "the", "given", "event", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/NotificationWatcher.php#L54-L59", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/NotificationWatcher.php", "func_name": "NotificationWatcher.formatNotifiable", "original_string": "private function formatNotifiable($notifiable)\n    {\n        if ($notifiable instanceof Model) {\n            return FormatModel::given($notifiable);\n        } elseif ($notifiable instanceof AnonymousNotifiable) {\n            return 'Anonymous:'.implode(',', $notifiable->routes);\n        }\n\n        return get_class($notifiable);\n    }", "language": "php", "code": "private function formatNotifiable($notifiable)\n    {\n        if ($notifiable instanceof Model) {\n            return FormatModel::given($notifiable);\n        } elseif ($notifiable instanceof AnonymousNotifiable) {\n            return 'Anonymous:'.implode(',', $notifiable->routes);\n        }\n\n        return get_class($notifiable);\n    }", "code_tokens": ["private", "function", "formatNotifiable", "(", "$", "notifiable", ")", "{", "if", "(", "$", "notifiable", "instanceof", "Model", ")", "{", "return", "FormatModel", "::", "given", "(", "$", "notifiable", ")", ";", "}", "elseif", "(", "$", "notifiable", "instanceof", "AnonymousNotifiable", ")", "{", "return", "'Anonymous:'", ".", "implode", "(", "','", ",", "$", "notifiable", "->", "routes", ")", ";", "}", "return", "get_class", "(", "$", "notifiable", ")", ";", "}"], "docstring": "Format the given notifiable into a tag.\n\n@param  mixed  $notifiable\n@return string", "docstring_tokens": ["Format", "the", "given", "notifiable", "into", "a", "tag", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/NotificationWatcher.php#L67-L76", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/ExceptionContext.php", "func_name": "ExceptionContext.get", "original_string": "public static function get(Throwable $exception)\n    {\n        return collect(explode(\"\\n\", file_get_contents($exception->getFile())))\n            ->slice($exception->getLine() - 10, 20)\n            ->mapWithKeys(function ($value, $key) {\n                return [$key + 1 => $value];\n            })->all();\n    }", "language": "php", "code": "public static function get(Throwable $exception)\n    {\n        return collect(explode(\"\\n\", file_get_contents($exception->getFile())))\n            ->slice($exception->getLine() - 10, 20)\n            ->mapWithKeys(function ($value, $key) {\n                return [$key + 1 => $value];\n            })->all();\n    }", "code_tokens": ["public", "static", "function", "get", "(", "Throwable", "$", "exception", ")", "{", "return", "collect", "(", "explode", "(", "\"\\n\"", ",", "file_get_contents", "(", "$", "exception", "->", "getFile", "(", ")", ")", ")", ")", "->", "slice", "(", "$", "exception", "->", "getLine", "(", ")", "-", "10", ",", "20", ")", "->", "mapWithKeys", "(", "function", "(", "$", "value", ",", "$", "key", ")", "{", "return", "[", "$", "key", "+", "1", "=>", "$", "value", "]", ";", "}", ")", "->", "all", "(", ")", ";", "}"], "docstring": "Get the exception code context for the given exception.\n\n@param  \\Throwable  $exception\n@return array", "docstring_tokens": ["Get", "the", "exception", "code", "context", "for", "the", "given", "exception", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/ExceptionContext.php#L15-L22", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/LogWatcher.php", "func_name": "LogWatcher.recordLog", "original_string": "public function recordLog(MessageLogged $event)\n    {\n        if (! Telescope::isRecording() || $this->shouldIgnore($event)) {\n            return;\n        }\n\n        Telescope::recordLog(\n            IncomingEntry::make([\n                'level' => $event->level,\n                'message' => $event->message,\n                'context' => Arr::except($event->context, ['telescope']),\n            ])->tags($this->tags($event))\n        );\n    }", "language": "php", "code": "public function recordLog(MessageLogged $event)\n    {\n        if (! Telescope::isRecording() || $this->shouldIgnore($event)) {\n            return;\n        }\n\n        Telescope::recordLog(\n            IncomingEntry::make([\n                'level' => $event->level,\n                'message' => $event->message,\n                'context' => Arr::except($event->context, ['telescope']),\n            ])->tags($this->tags($event))\n        );\n    }", "code_tokens": ["public", "function", "recordLog", "(", "MessageLogged", "$", "event", ")", "{", "if", "(", "!", "Telescope", "::", "isRecording", "(", ")", "||", "$", "this", "->", "shouldIgnore", "(", "$", "event", ")", ")", "{", "return", ";", "}", "Telescope", "::", "recordLog", "(", "IncomingEntry", "::", "make", "(", "[", "'level'", "=>", "$", "event", "->", "level", ",", "'message'", "=>", "$", "event", "->", "message", ",", "'context'", "=>", "Arr", "::", "except", "(", "$", "event", "->", "context", ",", "[", "'telescope'", "]", ")", ",", "]", ")", "->", "tags", "(", "$", "this", "->", "tags", "(", "$", "event", ")", ")", ")", ";", "}"], "docstring": "Record a message was logged.\n\n@param  \\Illuminate\\Log\\Events\\MessageLogged  $event\n@return void", "docstring_tokens": ["Record", "a", "message", "was", "logged", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/LogWatcher.php#L30-L43", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Storage/EntryQueryOptions.php", "func_name": "EntryQueryOptions.fromRequest", "original_string": "public static function fromRequest(Request $request)\n    {\n        return (new static)\n                ->batchId($request->batch_id)\n                ->uuids($request->uuids)\n                ->beforeSequence($request->before)\n                ->tag($request->tag)\n                ->familyHash($request->family_hash)\n                ->limit($request->take ?? 50);\n    }", "language": "php", "code": "public static function fromRequest(Request $request)\n    {\n        return (new static)\n                ->batchId($request->batch_id)\n                ->uuids($request->uuids)\n                ->beforeSequence($request->before)\n                ->tag($request->tag)\n                ->familyHash($request->family_hash)\n                ->limit($request->take ?? 50);\n    }", "code_tokens": ["public", "static", "function", "fromRequest", "(", "Request", "$", "request", ")", "{", "return", "(", "new", "static", ")", "->", "batchId", "(", "$", "request", "->", "batch_id", ")", "->", "uuids", "(", "$", "request", "->", "uuids", ")", "->", "beforeSequence", "(", "$", "request", "->", "before", ")", "->", "tag", "(", "$", "request", "->", "tag", ")", "->", "familyHash", "(", "$", "request", "->", "family_hash", ")", "->", "limit", "(", "$", "request", "->", "take", "??", "50", ")", ";", "}"], "docstring": "Create new entry query options from the incoming request.\n\n@param  \\Illuminate\\Http\\Request  $request\n@return static", "docstring_tokens": ["Create", "new", "entry", "query", "options", "from", "the", "incoming", "request", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Storage/EntryQueryOptions.php#L57-L66", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/RequestWatcher.php", "func_name": "RequestWatcher.recordRequest", "original_string": "public function recordRequest(RequestHandled $event)\n    {\n        if (! Telescope::isRecording()) {\n            return;\n        }\n\n        Telescope::recordRequest(IncomingEntry::make([\n            'uri' => str_replace($event->request->root(), '', $event->request->fullUrl()) ?: '/',\n            'method' => $event->request->method(),\n            'controller_action' => optional($event->request->route())->getActionName(),\n            'middleware' => array_values(optional($event->request->route())->gatherMiddleware() ?? []),\n            'headers' => $this->headers($event->request->headers->all()),\n            'payload' => $this->payload($this->input($event->request)),\n            'session' => $this->payload($this->sessionVariables($event->request)),\n            'response_status' => $event->response->getStatusCode(),\n            'response' => $this->response($event->response),\n            'duration' => defined('LARAVEL_START') ? floor((microtime(true) - LARAVEL_START) * 1000) : null,\n        ]));\n    }", "language": "php", "code": "public function recordRequest(RequestHandled $event)\n    {\n        if (! Telescope::isRecording()) {\n            return;\n        }\n\n        Telescope::recordRequest(IncomingEntry::make([\n            'uri' => str_replace($event->request->root(), '', $event->request->fullUrl()) ?: '/',\n            'method' => $event->request->method(),\n            'controller_action' => optional($event->request->route())->getActionName(),\n            'middleware' => array_values(optional($event->request->route())->gatherMiddleware() ?? []),\n            'headers' => $this->headers($event->request->headers->all()),\n            'payload' => $this->payload($this->input($event->request)),\n            'session' => $this->payload($this->sessionVariables($event->request)),\n            'response_status' => $event->response->getStatusCode(),\n            'response' => $this->response($event->response),\n            'duration' => defined('LARAVEL_START') ? floor((microtime(true) - LARAVEL_START) * 1000) : null,\n        ]));\n    }", "code_tokens": ["public", "function", "recordRequest", "(", "RequestHandled", "$", "event", ")", "{", "if", "(", "!", "Telescope", "::", "isRecording", "(", ")", ")", "{", "return", ";", "}", "Telescope", "::", "recordRequest", "(", "IncomingEntry", "::", "make", "(", "[", "'uri'", "=>", "str_replace", "(", "$", "event", "->", "request", "->", "root", "(", ")", ",", "''", ",", "$", "event", "->", "request", "->", "fullUrl", "(", ")", ")", "?", ":", "'/'", ",", "'method'", "=>", "$", "event", "->", "request", "->", "method", "(", ")", ",", "'controller_action'", "=>", "optional", "(", "$", "event", "->", "request", "->", "route", "(", ")", ")", "->", "getActionName", "(", ")", ",", "'middleware'", "=>", "array_values", "(", "optional", "(", "$", "event", "->", "request", "->", "route", "(", ")", ")", "->", "gatherMiddleware", "(", ")", "??", "[", "]", ")", ",", "'headers'", "=>", "$", "this", "->", "headers", "(", "$", "event", "->", "request", "->", "headers", "->", "all", "(", ")", ")", ",", "'payload'", "=>", "$", "this", "->", "payload", "(", "$", "this", "->", "input", "(", "$", "event", "->", "request", ")", ")", ",", "'session'", "=>", "$", "this", "->", "payload", "(", "$", "this", "->", "sessionVariables", "(", "$", "event", "->", "request", ")", ")", ",", "'response_status'", "=>", "$", "event", "->", "response", "->", "getStatusCode", "(", ")", ",", "'response'", "=>", "$", "this", "->", "response", "(", "$", "event", "->", "response", ")", ",", "'duration'", "=>", "defined", "(", "'LARAVEL_START'", ")", "?", "floor", "(", "(", "microtime", "(", "true", ")", "-", "LARAVEL_START", ")", "*", "1000", ")", ":", "null", ",", "]", ")", ")", ";", "}"], "docstring": "Record an incoming HTTP request.\n\n@param  \\Illuminate\\Foundation\\Http\\Events\\RequestHandled  $event\n@return void", "docstring_tokens": ["Record", "an", "incoming", "HTTP", "request", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/RequestWatcher.php#L36-L54", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/RequestWatcher.php", "func_name": "RequestWatcher.headers", "original_string": "protected function headers($headers)\n    {\n        $headers = collect($headers)->map(function ($header) {\n            return $header[0];\n        })->toArray();\n\n        return $this->hideParameters($headers,\n            Telescope::$hiddenRequestHeaders\n        );\n    }", "language": "php", "code": "protected function headers($headers)\n    {\n        $headers = collect($headers)->map(function ($header) {\n            return $header[0];\n        })->toArray();\n\n        return $this->hideParameters($headers,\n            Telescope::$hiddenRequestHeaders\n        );\n    }", "code_tokens": ["protected", "function", "headers", "(", "$", "headers", ")", "{", "$", "headers", "=", "collect", "(", "$", "headers", ")", "->", "map", "(", "function", "(", "$", "header", ")", "{", "return", "$", "header", "[", "0", "]", ";", "}", ")", "->", "toArray", "(", ")", ";", "return", "$", "this", "->", "hideParameters", "(", "$", "headers", ",", "Telescope", "::", "$", "hiddenRequestHeaders", ")", ";", "}"], "docstring": "Format the given headers.\n\n@param  array  $headers\n@return array", "docstring_tokens": ["Format", "the", "given", "headers", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/RequestWatcher.php#L62-L71", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/RequestWatcher.php", "func_name": "RequestWatcher.hideParameters", "original_string": "protected function hideParameters($data, $hidden)\n    {\n        foreach ($hidden as $parameter) {\n            if (Arr::get($data, $parameter)) {\n                Arr::set($data, $parameter, '********');\n            }\n        }\n\n        return $data;\n    }", "language": "php", "code": "protected function hideParameters($data, $hidden)\n    {\n        foreach ($hidden as $parameter) {\n            if (Arr::get($data, $parameter)) {\n                Arr::set($data, $parameter, '********');\n            }\n        }\n\n        return $data;\n    }", "code_tokens": ["protected", "function", "hideParameters", "(", "$", "data", ",", "$", "hidden", ")", "{", "foreach", "(", "$", "hidden", "as", "$", "parameter", ")", "{", "if", "(", "Arr", "::", "get", "(", "$", "data", ",", "$", "parameter", ")", ")", "{", "Arr", "::", "set", "(", "$", "data", ",", "$", "parameter", ",", "'********'", ")", ";", "}", "}", "return", "$", "data", ";", "}"], "docstring": "Hide the given parameters.\n\n@param  array  $data\n@param  array  $hidden\n@return mixed", "docstring_tokens": ["Hide", "the", "given", "parameters", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/RequestWatcher.php#L93-L102", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/RequestWatcher.php", "func_name": "RequestWatcher.input", "original_string": "private function input(Request $request)\n    {\n        $files = $request->files->all();\n\n        array_walk_recursive($files, function (&$file) {\n            $file = [\n                'name' => $file->getClientOriginalName(),\n                'size' => $file->isFile() ? ($file->getSize() / 1000).'KB' : '0',\n            ];\n        });\n\n        return array_replace_recursive($request->input(), $files);\n    }", "language": "php", "code": "private function input(Request $request)\n    {\n        $files = $request->files->all();\n\n        array_walk_recursive($files, function (&$file) {\n            $file = [\n                'name' => $file->getClientOriginalName(),\n                'size' => $file->isFile() ? ($file->getSize() / 1000).'KB' : '0',\n            ];\n        });\n\n        return array_replace_recursive($request->input(), $files);\n    }", "code_tokens": ["private", "function", "input", "(", "Request", "$", "request", ")", "{", "$", "files", "=", "$", "request", "->", "files", "->", "all", "(", ")", ";", "array_walk_recursive", "(", "$", "files", ",", "function", "(", "&", "$", "file", ")", "{", "$", "file", "=", "[", "'name'", "=>", "$", "file", "->", "getClientOriginalName", "(", ")", ",", "'size'", "=>", "$", "file", "->", "isFile", "(", ")", "?", "(", "$", "file", "->", "getSize", "(", ")", "/", "1000", ")", ".", "'KB'", ":", "'0'", ",", "]", ";", "}", ")", ";", "return", "array_replace_recursive", "(", "$", "request", "->", "input", "(", ")", ",", "$", "files", ")", ";", "}"], "docstring": "Extract the input from the given request.\n\n@param  \\Illuminate\\Http\\Request  $request\n@return array", "docstring_tokens": ["Extract", "the", "input", "from", "the", "given", "request", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/RequestWatcher.php#L121-L133", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/RequestWatcher.php", "func_name": "RequestWatcher.response", "original_string": "protected function response(Response $response)\n    {\n        $content = $response->getContent();\n\n        if (is_string($content) &&\n            is_array(json_decode($content, true)) &&\n            json_last_error() === JSON_ERROR_NONE) {\n            return $this->contentWithinLimits($content)\n                    ? $this->hideParameters(json_decode($content, true), Telescope::$hiddenResponseParameters)\n                    : 'Purged By Telescope';\n        }\n\n        if ($response instanceof RedirectResponse) {\n            return 'Redirected to '.$response->getTargetUrl();\n        }\n\n        if ($response instanceof IlluminateResponse && $response->getOriginalContent() instanceof View) {\n            return [\n                'view' => $response->getOriginalContent()->getPath(),\n                'data' => $this->extractDataFromView($response->getOriginalContent()),\n            ];\n        }\n\n        return 'HTML Response';\n    }", "language": "php", "code": "protected function response(Response $response)\n    {\n        $content = $response->getContent();\n\n        if (is_string($content) &&\n            is_array(json_decode($content, true)) &&\n            json_last_error() === JSON_ERROR_NONE) {\n            return $this->contentWithinLimits($content)\n                    ? $this->hideParameters(json_decode($content, true), Telescope::$hiddenResponseParameters)\n                    : 'Purged By Telescope';\n        }\n\n        if ($response instanceof RedirectResponse) {\n            return 'Redirected to '.$response->getTargetUrl();\n        }\n\n        if ($response instanceof IlluminateResponse && $response->getOriginalContent() instanceof View) {\n            return [\n                'view' => $response->getOriginalContent()->getPath(),\n                'data' => $this->extractDataFromView($response->getOriginalContent()),\n            ];\n        }\n\n        return 'HTML Response';\n    }", "code_tokens": ["protected", "function", "response", "(", "Response", "$", "response", ")", "{", "$", "content", "=", "$", "response", "->", "getContent", "(", ")", ";", "if", "(", "is_string", "(", "$", "content", ")", "&&", "is_array", "(", "json_decode", "(", "$", "content", ",", "true", ")", ")", "&&", "json_last_error", "(", ")", "===", "JSON_ERROR_NONE", ")", "{", "return", "$", "this", "->", "contentWithinLimits", "(", "$", "content", ")", "?", "$", "this", "->", "hideParameters", "(", "json_decode", "(", "$", "content", ",", "true", ")", ",", "Telescope", "::", "$", "hiddenResponseParameters", ")", ":", "'Purged By Telescope'", ";", "}", "if", "(", "$", "response", "instanceof", "RedirectResponse", ")", "{", "return", "'Redirected to '", ".", "$", "response", "->", "getTargetUrl", "(", ")", ";", "}", "if", "(", "$", "response", "instanceof", "IlluminateResponse", "&&", "$", "response", "->", "getOriginalContent", "(", ")", "instanceof", "View", ")", "{", "return", "[", "'view'", "=>", "$", "response", "->", "getOriginalContent", "(", ")", "->", "getPath", "(", ")", ",", "'data'", "=>", "$", "this", "->", "extractDataFromView", "(", "$", "response", "->", "getOriginalContent", "(", ")", ")", ",", "]", ";", "}", "return", "'HTML Response'", ";", "}"], "docstring": "Format the given response object.\n\n@param  \\Symfony\\Component\\HttpFoundation\\Response  $response\n@return array|string", "docstring_tokens": ["Format", "the", "given", "response", "object", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/RequestWatcher.php#L141-L165", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/RequestWatcher.php", "func_name": "RequestWatcher.extractDataFromView", "original_string": "protected function extractDataFromView($view)\n    {\n        return collect($view->getData())->map(function ($value) {\n            if ($value instanceof Model) {\n                return FormatModel::given($value);\n            } elseif (is_object($value)) {\n                return [\n                    'class' => get_class($value),\n                    'properties' => json_decode(json_encode($value), true),\n                ];\n            } else {\n                return json_decode(json_encode($value), true);\n            }\n        })->toArray();\n    }", "language": "php", "code": "protected function extractDataFromView($view)\n    {\n        return collect($view->getData())->map(function ($value) {\n            if ($value instanceof Model) {\n                return FormatModel::given($value);\n            } elseif (is_object($value)) {\n                return [\n                    'class' => get_class($value),\n                    'properties' => json_decode(json_encode($value), true),\n                ];\n            } else {\n                return json_decode(json_encode($value), true);\n            }\n        })->toArray();\n    }", "code_tokens": ["protected", "function", "extractDataFromView", "(", "$", "view", ")", "{", "return", "collect", "(", "$", "view", "->", "getData", "(", ")", ")", "->", "map", "(", "function", "(", "$", "value", ")", "{", "if", "(", "$", "value", "instanceof", "Model", ")", "{", "return", "FormatModel", "::", "given", "(", "$", "value", ")", ";", "}", "elseif", "(", "is_object", "(", "$", "value", ")", ")", "{", "return", "[", "'class'", "=>", "get_class", "(", "$", "value", ")", ",", "'properties'", "=>", "json_decode", "(", "json_encode", "(", "$", "value", ")", ",", "true", ")", ",", "]", ";", "}", "else", "{", "return", "json_decode", "(", "json_encode", "(", "$", "value", ")", ",", "true", ")", ";", "}", "}", ")", "->", "toArray", "(", ")", ";", "}"], "docstring": "Extract the data from the given view in array form.\n\n@param  \\Illuminate\\View\\View  $view\n@return array", "docstring_tokens": ["Extract", "the", "data", "from", "the", "given", "view", "in", "array", "form", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/RequestWatcher.php#L186-L200", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/CommandWatcher.php", "func_name": "CommandWatcher.recordCommand", "original_string": "public function recordCommand(CommandFinished $event)\n    {\n        if (! Telescope::isRecording() || $this->shouldIgnore($event)) {\n            return;\n        }\n\n        Telescope::recordCommand(IncomingEntry::make([\n            'command' => $event->command ?? $event->input->getArguments()['command'] ?? 'default',\n            'exit_code' => $event->exitCode,\n            'arguments' => $event->input->getArguments(),\n            'options' => $event->input->getOptions(),\n        ]));\n    }", "language": "php", "code": "public function recordCommand(CommandFinished $event)\n    {\n        if (! Telescope::isRecording() || $this->shouldIgnore($event)) {\n            return;\n        }\n\n        Telescope::recordCommand(IncomingEntry::make([\n            'command' => $event->command ?? $event->input->getArguments()['command'] ?? 'default',\n            'exit_code' => $event->exitCode,\n            'arguments' => $event->input->getArguments(),\n            'options' => $event->input->getOptions(),\n        ]));\n    }", "code_tokens": ["public", "function", "recordCommand", "(", "CommandFinished", "$", "event", ")", "{", "if", "(", "!", "Telescope", "::", "isRecording", "(", ")", "||", "$", "this", "->", "shouldIgnore", "(", "$", "event", ")", ")", "{", "return", ";", "}", "Telescope", "::", "recordCommand", "(", "IncomingEntry", "::", "make", "(", "[", "'command'", "=>", "$", "event", "->", "command", "??", "$", "event", "->", "input", "->", "getArguments", "(", ")", "[", "'command'", "]", "??", "'default'", ",", "'exit_code'", "=>", "$", "event", "->", "exitCode", ",", "'arguments'", "=>", "$", "event", "->", "input", "->", "getArguments", "(", ")", ",", "'options'", "=>", "$", "event", "->", "input", "->", "getOptions", "(", ")", ",", "]", ")", ")", ";", "}"], "docstring": "Record an Artisan command was executed.\n\n@param  \\Illuminate\\Console\\Events\\CommandFinished  $event\n@return void", "docstring_tokens": ["Record", "an", "Artisan", "command", "was", "executed", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/CommandWatcher.php#L28-L40", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/CacheWatcher.php", "func_name": "CacheWatcher.recordCacheHit", "original_string": "public function recordCacheHit(CacheHit $event)\n    {\n        if (! Telescope::isRecording() || $this->shouldIgnore($event)) {\n            return;\n        }\n\n        Telescope::recordCache(IncomingEntry::make([\n            'type' => 'hit',\n            'key' => $event->key,\n            'value' => $event->value,\n        ]));\n    }", "language": "php", "code": "public function recordCacheHit(CacheHit $event)\n    {\n        if (! Telescope::isRecording() || $this->shouldIgnore($event)) {\n            return;\n        }\n\n        Telescope::recordCache(IncomingEntry::make([\n            'type' => 'hit',\n            'key' => $event->key,\n            'value' => $event->value,\n        ]));\n    }", "code_tokens": ["public", "function", "recordCacheHit", "(", "CacheHit", "$", "event", ")", "{", "if", "(", "!", "Telescope", "::", "isRecording", "(", ")", "||", "$", "this", "->", "shouldIgnore", "(", "$", "event", ")", ")", "{", "return", ";", "}", "Telescope", "::", "recordCache", "(", "IncomingEntry", "::", "make", "(", "[", "'type'", "=>", "'hit'", ",", "'key'", "=>", "$", "event", "->", "key", ",", "'value'", "=>", "$", "event", "->", "value", ",", "]", ")", ")", ";", "}"], "docstring": "Record a cache key was found.\n\n@param  \\Illuminate\\Cache\\Events\\CacheHit  $event\n@return void", "docstring_tokens": ["Record", "a", "cache", "key", "was", "found", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/CacheWatcher.php#L36-L47", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/CacheWatcher.php", "func_name": "CacheWatcher.recordCacheMissed", "original_string": "public function recordCacheMissed(CacheMissed $event)\n    {\n        if (! Telescope::isRecording() || $this->shouldIgnore($event)) {\n            return;\n        }\n\n        Telescope::recordCache(IncomingEntry::make([\n            'type' => 'missed',\n            'key' => $event->key,\n        ]));\n    }", "language": "php", "code": "public function recordCacheMissed(CacheMissed $event)\n    {\n        if (! Telescope::isRecording() || $this->shouldIgnore($event)) {\n            return;\n        }\n\n        Telescope::recordCache(IncomingEntry::make([\n            'type' => 'missed',\n            'key' => $event->key,\n        ]));\n    }", "code_tokens": ["public", "function", "recordCacheMissed", "(", "CacheMissed", "$", "event", ")", "{", "if", "(", "!", "Telescope", "::", "isRecording", "(", ")", "||", "$", "this", "->", "shouldIgnore", "(", "$", "event", ")", ")", "{", "return", ";", "}", "Telescope", "::", "recordCache", "(", "IncomingEntry", "::", "make", "(", "[", "'type'", "=>", "'missed'", ",", "'key'", "=>", "$", "event", "->", "key", ",", "]", ")", ")", ";", "}"], "docstring": "Record a missing cache key.\n\n@param  \\Illuminate\\Cache\\Events\\CacheMissed  $event\n@return void", "docstring_tokens": ["Record", "a", "missing", "cache", "key", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/CacheWatcher.php#L55-L65", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/Watchers/CacheWatcher.php", "func_name": "CacheWatcher.recordKeyWritten", "original_string": "public function recordKeyWritten(KeyWritten $event)\n    {\n        if (! Telescope::isRecording() || $this->shouldIgnore($event)) {\n            return;\n        }\n\n        Telescope::recordCache(IncomingEntry::make([\n            'type' => 'set',\n            'key' => $event->key,\n            'value' => $event->value,\n            'expiration' => $this->formatExpiration($event),\n        ]));\n    }", "language": "php", "code": "public function recordKeyWritten(KeyWritten $event)\n    {\n        if (! Telescope::isRecording() || $this->shouldIgnore($event)) {\n            return;\n        }\n\n        Telescope::recordCache(IncomingEntry::make([\n            'type' => 'set',\n            'key' => $event->key,\n            'value' => $event->value,\n            'expiration' => $this->formatExpiration($event),\n        ]));\n    }", "code_tokens": ["public", "function", "recordKeyWritten", "(", "KeyWritten", "$", "event", ")", "{", "if", "(", "!", "Telescope", "::", "isRecording", "(", ")", "||", "$", "this", "->", "shouldIgnore", "(", "$", "event", ")", ")", "{", "return", ";", "}", "Telescope", "::", "recordCache", "(", "IncomingEntry", "::", "make", "(", "[", "'type'", "=>", "'set'", ",", "'key'", "=>", "$", "event", "->", "key", ",", "'value'", "=>", "$", "event", "->", "value", ",", "'expiration'", "=>", "$", "this", "->", "formatExpiration", "(", "$", "event", ")", ",", "]", ")", ")", ";", "}"], "docstring": "Record a cache key was updated.\n\n@param  \\Illuminate\\Cache\\Events\\KeyWritten  $event\n@return void", "docstring_tokens": ["Record", "a", "cache", "key", "was", "updated", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/Watchers/CacheWatcher.php#L73-L85", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/IncomingEntry.php", "func_name": "IncomingEntry.user", "original_string": "public function user($user)\n    {\n        $this->user = $user;\n\n        $this->content = array_merge($this->content, [\n            'user' => [\n                'id' => $user->getAuthIdentifier(),\n                'name' => $user->name ?? null,\n                'email' => $user->email ?? null,\n            ],\n        ]);\n\n        $this->tags(['Auth:'.$user->getAuthIdentifier()]);\n\n        return $this;\n    }", "language": "php", "code": "public function user($user)\n    {\n        $this->user = $user;\n\n        $this->content = array_merge($this->content, [\n            'user' => [\n                'id' => $user->getAuthIdentifier(),\n                'name' => $user->name ?? null,\n                'email' => $user->email ?? null,\n            ],\n        ]);\n\n        $this->tags(['Auth:'.$user->getAuthIdentifier()]);\n\n        return $this;\n    }", "code_tokens": ["public", "function", "user", "(", "$", "user", ")", "{", "$", "this", "->", "user", "=", "$", "user", ";", "$", "this", "->", "content", "=", "array_merge", "(", "$", "this", "->", "content", ",", "[", "'user'", "=>", "[", "'id'", "=>", "$", "user", "->", "getAuthIdentifier", "(", ")", ",", "'name'", "=>", "$", "user", "->", "name", "??", "null", ",", "'email'", "=>", "$", "user", "->", "email", "??", "null", ",", "]", ",", "]", ")", ";", "$", "this", "->", "tags", "(", "[", "'Auth:'", ".", "$", "user", "->", "getAuthIdentifier", "(", ")", "]", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Set the currently authenticated user.\n\n@param  \\Illuminate\\Contracts\\Auth\\Authenticatable  $user\n@return $this", "docstring_tokens": ["Set", "the", "currently", "authenticated", "user", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/IncomingEntry.php#L126-L141", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/IncomingEntry.php", "func_name": "IncomingEntry.tags", "original_string": "public function tags(array $tags)\n    {\n        $this->tags = array_unique(array_merge($this->tags, $tags));\n\n        return $this;\n    }", "language": "php", "code": "public function tags(array $tags)\n    {\n        $this->tags = array_unique(array_merge($this->tags, $tags));\n\n        return $this;\n    }", "code_tokens": ["public", "function", "tags", "(", "array", "$", "tags", ")", "{", "$", "this", "->", "tags", "=", "array_unique", "(", "array_merge", "(", "$", "this", "->", "tags", ",", "$", "tags", ")", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Merge tags into the entry's existing tags.\n\n@param  array  $tags\n@return $this", "docstring_tokens": ["Merge", "tags", "into", "the", "entry", "s", "existing", "tags", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/IncomingEntry.php#L149-L154", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/IncomingEntry.php", "func_name": "IncomingEntry.hasMonitoredTag", "original_string": "public function hasMonitoredTag()\n    {\n        if (! empty($this->tags)) {\n            return app(EntriesRepository::class)->isMonitoring($this->tags);\n        }\n\n        return false;\n    }", "language": "php", "code": "public function hasMonitoredTag()\n    {\n        if (! empty($this->tags)) {\n            return app(EntriesRepository::class)->isMonitoring($this->tags);\n        }\n\n        return false;\n    }", "code_tokens": ["public", "function", "hasMonitoredTag", "(", ")", "{", "if", "(", "!", "empty", "(", "$", "this", "->", "tags", ")", ")", "{", "return", "app", "(", "EntriesRepository", "::", "class", ")", "->", "isMonitoring", "(", "$", "this", "->", "tags", ")", ";", "}", "return", "false", ";", "}"], "docstring": "Determine if the incoming entry has a monitored tag.\n\n@return bool", "docstring_tokens": ["Determine", "if", "the", "incoming", "entry", "has", "a", "monitored", "tag", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/IncomingEntry.php#L161-L168", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/IncomingEntry.php", "func_name": "IncomingEntry.toArray", "original_string": "public function toArray()\n    {\n        return [\n            'uuid' => $this->uuid,\n            'batch_id' => $this->batchId,\n            'type' => $this->type,\n            'content' => $this->content,\n            'created_at' => $this->recordedAt->toDateTimeString(),\n        ];\n    }", "language": "php", "code": "public function toArray()\n    {\n        return [\n            'uuid' => $this->uuid,\n            'batch_id' => $this->batchId,\n            'type' => $this->type,\n            'content' => $this->content,\n            'created_at' => $this->recordedAt->toDateTimeString(),\n        ];\n    }", "code_tokens": ["public", "function", "toArray", "(", ")", "{", "return", "[", "'uuid'", "=>", "$", "this", "->", "uuid", ",", "'batch_id'", "=>", "$", "this", "->", "batchId", ",", "'type'", "=>", "$", "this", "->", "type", ",", "'content'", "=>", "$", "this", "->", "content", ",", "'created_at'", "=>", "$", "this", "->", "recordedAt", "->", "toDateTimeString", "(", ")", ",", "]", ";", "}"], "docstring": "Get an array representation of the entry for storage.\n\n@return array", "docstring_tokens": ["Get", "an", "array", "representation", "of", "the", "entry", "for", "storage", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/IncomingEntry.php#L236-L245", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/IncomingDumpEntry.php", "func_name": "IncomingDumpEntry.assignEntryPointFromBatch", "original_string": "public function assignEntryPointFromBatch(array $batch)\n    {\n        $entryPoint = collect($batch)->first(function ($entry) {\n            return in_array($entry->type, [EntryType::REQUEST, EntryType::JOB, EntryType::COMMAND]);\n        });\n\n        if (! $entryPoint) {\n            return;\n        }\n\n        $this->content = array_merge($this->content, [\n            'entry_point_type' => $entryPoint->type,\n            'entry_point_uuid' => $entryPoint->uuid,\n            'entry_point_description' => $this->entryPointDescription($entryPoint),\n        ]);\n    }", "language": "php", "code": "public function assignEntryPointFromBatch(array $batch)\n    {\n        $entryPoint = collect($batch)->first(function ($entry) {\n            return in_array($entry->type, [EntryType::REQUEST, EntryType::JOB, EntryType::COMMAND]);\n        });\n\n        if (! $entryPoint) {\n            return;\n        }\n\n        $this->content = array_merge($this->content, [\n            'entry_point_type' => $entryPoint->type,\n            'entry_point_uuid' => $entryPoint->uuid,\n            'entry_point_description' => $this->entryPointDescription($entryPoint),\n        ]);\n    }", "code_tokens": ["public", "function", "assignEntryPointFromBatch", "(", "array", "$", "batch", ")", "{", "$", "entryPoint", "=", "collect", "(", "$", "batch", ")", "->", "first", "(", "function", "(", "$", "entry", ")", "{", "return", "in_array", "(", "$", "entry", "->", "type", ",", "[", "EntryType", "::", "REQUEST", ",", "EntryType", "::", "JOB", ",", "EntryType", "::", "COMMAND", "]", ")", ";", "}", ")", ";", "if", "(", "!", "$", "entryPoint", ")", "{", "return", ";", "}", "$", "this", "->", "content", "=", "array_merge", "(", "$", "this", "->", "content", ",", "[", "'entry_point_type'", "=>", "$", "entryPoint", "->", "type", ",", "'entry_point_uuid'", "=>", "$", "entryPoint", "->", "uuid", ",", "'entry_point_description'", "=>", "$", "this", "->", "entryPointDescription", "(", "$", "entryPoint", ")", ",", "]", ")", ";", "}"], "docstring": "Assign entry point parameters from the given batch entries.\n\n@param  array  $batch\n@return void", "docstring_tokens": ["Assign", "entry", "point", "parameters", "from", "the", "given", "batch", "entries", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/IncomingDumpEntry.php#L23-L38", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/IncomingDumpEntry.php", "func_name": "IncomingDumpEntry.entryPointDescription", "original_string": "private function entryPointDescription($entryPoint)\n    {\n        switch ($entryPoint->type) {\n            case EntryType::REQUEST:\n                return $entryPoint->content['method'].' '.$entryPoint->content['uri'];\n\n            case EntryType::JOB:\n                return $entryPoint->content['name'];\n\n            case EntryType::COMMAND:\n                return $entryPoint->content['command'];\n        }\n\n        return '';\n    }", "language": "php", "code": "private function entryPointDescription($entryPoint)\n    {\n        switch ($entryPoint->type) {\n            case EntryType::REQUEST:\n                return $entryPoint->content['method'].' '.$entryPoint->content['uri'];\n\n            case EntryType::JOB:\n                return $entryPoint->content['name'];\n\n            case EntryType::COMMAND:\n                return $entryPoint->content['command'];\n        }\n\n        return '';\n    }", "code_tokens": ["private", "function", "entryPointDescription", "(", "$", "entryPoint", ")", "{", "switch", "(", "$", "entryPoint", "->", "type", ")", "{", "case", "EntryType", "::", "REQUEST", ":", "return", "$", "entryPoint", "->", "content", "[", "'method'", "]", ".", "' '", ".", "$", "entryPoint", "->", "content", "[", "'uri'", "]", ";", "case", "EntryType", "::", "JOB", ":", "return", "$", "entryPoint", "->", "content", "[", "'name'", "]", ";", "case", "EntryType", "::", "COMMAND", ":", "return", "$", "entryPoint", "->", "content", "[", "'command'", "]", ";", "}", "return", "''", ";", "}"], "docstring": "Description for the entry point.\n\n@param  \\Laravel\\Telescope\\IncomingDumpEntry  $entryPoint\n@return string", "docstring_tokens": ["Description", "for", "the", "entry", "point", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/IncomingDumpEntry.php#L46-L60", "partition": "train"}
{"repo": "laravel/telescope", "path": "src/EntryResult.php", "func_name": "EntryResult.jsonSerialize", "original_string": "public function jsonSerialize()\n    {\n        return [\n            'id' => $this->id,\n            'sequence' => $this->sequence,\n            'batch_id' => $this->batchId,\n            'type' => $this->type,\n            'content' => $this->content,\n            'tags' => $this->tags,\n            'family_hash' => $this->familyHash,\n            'created_at' => $this->createdAt->toDateTimeString(),\n        ];\n    }", "language": "php", "code": "public function jsonSerialize()\n    {\n        return [\n            'id' => $this->id,\n            'sequence' => $this->sequence,\n            'batch_id' => $this->batchId,\n            'type' => $this->type,\n            'content' => $this->content,\n            'tags' => $this->tags,\n            'family_hash' => $this->familyHash,\n            'created_at' => $this->createdAt->toDateTimeString(),\n        ];\n    }", "code_tokens": ["public", "function", "jsonSerialize", "(", ")", "{", "return", "[", "'id'", "=>", "$", "this", "->", "id", ",", "'sequence'", "=>", "$", "this", "->", "sequence", ",", "'batch_id'", "=>", "$", "this", "->", "batchId", ",", "'type'", "=>", "$", "this", "->", "type", ",", "'content'", "=>", "$", "this", "->", "content", ",", "'tags'", "=>", "$", "this", "->", "tags", ",", "'family_hash'", "=>", "$", "this", "->", "familyHash", ",", "'created_at'", "=>", "$", "this", "->", "createdAt", "->", "toDateTimeString", "(", ")", ",", "]", ";", "}"], "docstring": "Get the array representation of the entry.\n\n@return array", "docstring_tokens": ["Get", "the", "array", "representation", "of", "the", "entry", "."], "sha": "e5f9512a41f21319d9c99cef618baba0d9206dce", "url": "https://github.com/laravel/telescope/blob/e5f9512a41f21319d9c99cef618baba0d9206dce/src/EntryResult.php#L94-L106", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/ExecutionEnvironment/GitInfoCollector.php", "func_name": "GitInfoCollector.collect", "original_string": "public function collect() : GitInfo\n    {\n        $branch = $this->collectBranch();\n        $commit = $this->collectCommit();\n        $remotes = $this->collectRemotes();\n\n        return new GitInfo($branch, $commit, $remotes);\n    }", "language": "php", "code": "public function collect() : GitInfo\n    {\n        $branch = $this->collectBranch();\n        $commit = $this->collectCommit();\n        $remotes = $this->collectRemotes();\n\n        return new GitInfo($branch, $commit, $remotes);\n    }", "code_tokens": ["public", "function", "collect", "(", ")", ":", "GitInfo", "{", "$", "branch", "=", "$", "this", "->", "collectBranch", "(", ")", ";", "$", "commit", "=", "$", "this", "->", "collectCommit", "(", ")", ";", "$", "remotes", "=", "$", "this", "->", "collectRemotes", "(", ")", ";", "return", "new", "GitInfo", "(", "$", "branch", ",", "$", "commit", ",", "$", "remotes", ")", ";", "}"], "docstring": "Collect git repository info.", "docstring_tokens": ["Collect", "git", "repository", "info", "."], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/ExecutionEnvironment/GitInfoCollector.php#L38-L45", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/LanguageServer/Message.php", "func_name": "Message.parse", "original_string": "public static function parse(string $msg): Message\n    {\n        $obj = new self;\n        $parts = explode(\"\\r\\n\", $msg);\n        $obj->body = MessageBody::parse(array_pop($parts));\n        foreach ($parts as $line) {\n            if ($line) {\n                $pair = explode(': ', $line);\n                $obj->headers[$pair[0]] = $pair[1];\n            }\n        }\n        return $obj;\n    }", "language": "php", "code": "public static function parse(string $msg): Message\n    {\n        $obj = new self;\n        $parts = explode(\"\\r\\n\", $msg);\n        $obj->body = MessageBody::parse(array_pop($parts));\n        foreach ($parts as $line) {\n            if ($line) {\n                $pair = explode(': ', $line);\n                $obj->headers[$pair[0]] = $pair[1];\n            }\n        }\n        return $obj;\n    }", "code_tokens": ["public", "static", "function", "parse", "(", "string", "$", "msg", ")", ":", "Message", "{", "$", "obj", "=", "new", "self", ";", "$", "parts", "=", "explode", "(", "\"\\r\\n\"", ",", "$", "msg", ")", ";", "$", "obj", "->", "body", "=", "MessageBody", "::", "parse", "(", "array_pop", "(", "$", "parts", ")", ")", ";", "foreach", "(", "$", "parts", "as", "$", "line", ")", "{", "if", "(", "$", "line", ")", "{", "$", "pair", "=", "explode", "(", "': '", ",", "$", "line", ")", ";", "$", "obj", "->", "headers", "[", "$", "pair", "[", "0", "]", "]", "=", "$", "pair", "[", "1", "]", ";", "}", "}", "return", "$", "obj", ";", "}"], "docstring": "Parses a message\n\n@param string $msg\n@return Message\n@psalm-suppress UnusedMethod", "docstring_tokens": ["Parses", "a", "message"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/LanguageServer/Message.php#L30-L42", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/Visitor/SimpleNameResolver.php", "func_name": "SimpleNameResolver.resolveName", "original_string": "protected function resolveName(Name $name, $type) {\n        $resolvedName = $this->nameContext->getResolvedName($name, $type);\n        if (null !== $resolvedName) {\n            $name->setAttribute('resolvedName', $resolvedName->toString());\n        }\n        return $name;\n    }", "language": "php", "code": "protected function resolveName(Name $name, $type) {\n        $resolvedName = $this->nameContext->getResolvedName($name, $type);\n        if (null !== $resolvedName) {\n            $name->setAttribute('resolvedName', $resolvedName->toString());\n        }\n        return $name;\n    }", "code_tokens": ["protected", "function", "resolveName", "(", "Name", "$", "name", ",", "$", "type", ")", "{", "$", "resolvedName", "=", "$", "this", "->", "nameContext", "->", "getResolvedName", "(", "$", "name", ",", "$", "type", ")", ";", "if", "(", "null", "!==", "$", "resolvedName", ")", "{", "$", "name", "->", "setAttribute", "(", "'resolvedName'", ",", "$", "resolvedName", "->", "toString", "(", ")", ")", ";", "}", "return", "$", "name", ";", "}"], "docstring": "Resolve name, according to name resolver options.\n\n@param Name $name Function or constant name to resolve\n@param int  $type One of Stmt\\Use_::TYPE_*\n\n@return Name Resolved name, or original name with attribute", "docstring_tokens": ["Resolve", "name", "according", "to", "name", "resolver", "options", "."], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/Visitor/SimpleNameResolver.php#L194-L200", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/Fork/Pool.php", "func_name": "Pool.streamForParent", "original_string": "private static function streamForParent(array $sockets)\n    {\n        list($for_read, $for_write) = $sockets;\n\n        // The parent will not use the write channel, so it\n        // must be closed to prevent deadlock.\n        fclose($for_write);\n\n        // stream_select will be used to read multiple streams, so these\n        // must be set to non-blocking mode.\n        if (!stream_set_blocking($for_read, false)) {\n            error_log('unable to set read stream to non-blocking');\n            exit(self::EXIT_FAILURE);\n        }\n\n        return $for_read;\n    }", "language": "php", "code": "private static function streamForParent(array $sockets)\n    {\n        list($for_read, $for_write) = $sockets;\n\n        // The parent will not use the write channel, so it\n        // must be closed to prevent deadlock.\n        fclose($for_write);\n\n        // stream_select will be used to read multiple streams, so these\n        // must be set to non-blocking mode.\n        if (!stream_set_blocking($for_read, false)) {\n            error_log('unable to set read stream to non-blocking');\n            exit(self::EXIT_FAILURE);\n        }\n\n        return $for_read;\n    }", "code_tokens": ["private", "static", "function", "streamForParent", "(", "array", "$", "sockets", ")", "{", "list", "(", "$", "for_read", ",", "$", "for_write", ")", "=", "$", "sockets", ";", "fclose", "(", "$", "for_write", ")", ";", "if", "(", "!", "stream_set_blocking", "(", "$", "for_read", ",", "false", ")", ")", "{", "error_log", "(", "'unable to set read stream to non-blocking'", ")", ";", "exit", "(", "self", "::", "EXIT_FAILURE", ")", ";", "}", "return", "$", "for_read", ";", "}"], "docstring": "Prepare the socket pair to be used in a parent process and\nreturn the stream the parent will use to read results.\n\n@param resource[] $sockets the socket pair for IPC\n\n@return resource", "docstring_tokens": ["Prepare", "the", "socket", "pair", "to", "be", "used", "in", "a", "parent", "process", "and", "return", "the", "stream", "the", "parent", "will", "use", "to", "read", "results", "."], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/Fork/Pool.php#L137-L153", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/Fork/Pool.php", "func_name": "Pool.readResultsFromChildren", "original_string": "private function readResultsFromChildren()\n    {\n        // Create an array of all active streams, indexed by\n        // resource id.\n        $streams = [];\n        foreach ($this->read_streams as $stream) {\n            $streams[intval($stream)] = $stream;\n        }\n\n        // Create an array for the content received on each stream,\n        // indexed by resource id.\n        $content = array_fill_keys(array_keys($streams), '');\n\n        // Read the data off of all the stream.\n        while (count($streams) > 0) {\n            $needs_read = array_values($streams);\n            $needs_write = null;\n            $needs_except = null;\n\n            // Wait for data on at least one stream.\n            $num = stream_select($needs_read, $needs_write, $needs_except, null /* no timeout */);\n            if ($num === false) {\n                error_log('unable to select on read stream');\n                exit(self::EXIT_FAILURE);\n            }\n\n            // For each stream that was ready, read the content.\n            foreach ($needs_read as $file) {\n                $buffer = fread($file, 1024);\n                if ($buffer) {\n                    $content[intval($file)] .= $buffer;\n                }\n\n                // If the stream has closed, stop trying to select on it.\n                if (feof($file)) {\n                    fclose($file);\n                    unset($streams[intval($file)]);\n                }\n            }\n        }\n\n        // Unmarshal the content into its original form.\n        return array_values(\n            array_map(\n                /**\n                 * @param string $data\n                 *\n                 * @return array\n                 */\n                function ($data) {\n                    /** @var array */\n                    $result = unserialize($data);\n                    /** @psalm-suppress DocblockTypeContradiction */\n                    if (!\\is_array($result)) {\n                        error_log(\n                            'Child terminated without returning a serialized array - response type=' . gettype($result)\n                        );\n                        $this->did_have_error = true;\n                    }\n\n                    return $result;\n                },\n                $content\n            )\n        );\n    }", "language": "php", "code": "private function readResultsFromChildren()\n    {\n        // Create an array of all active streams, indexed by\n        // resource id.\n        $streams = [];\n        foreach ($this->read_streams as $stream) {\n            $streams[intval($stream)] = $stream;\n        }\n\n        // Create an array for the content received on each stream,\n        // indexed by resource id.\n        $content = array_fill_keys(array_keys($streams), '');\n\n        // Read the data off of all the stream.\n        while (count($streams) > 0) {\n            $needs_read = array_values($streams);\n            $needs_write = null;\n            $needs_except = null;\n\n            // Wait for data on at least one stream.\n            $num = stream_select($needs_read, $needs_write, $needs_except, null /* no timeout */);\n            if ($num === false) {\n                error_log('unable to select on read stream');\n                exit(self::EXIT_FAILURE);\n            }\n\n            // For each stream that was ready, read the content.\n            foreach ($needs_read as $file) {\n                $buffer = fread($file, 1024);\n                if ($buffer) {\n                    $content[intval($file)] .= $buffer;\n                }\n\n                // If the stream has closed, stop trying to select on it.\n                if (feof($file)) {\n                    fclose($file);\n                    unset($streams[intval($file)]);\n                }\n            }\n        }\n\n        // Unmarshal the content into its original form.\n        return array_values(\n            array_map(\n                /**\n                 * @param string $data\n                 *\n                 * @return array\n                 */\n                function ($data) {\n                    /** @var array */\n                    $result = unserialize($data);\n                    /** @psalm-suppress DocblockTypeContradiction */\n                    if (!\\is_array($result)) {\n                        error_log(\n                            'Child terminated without returning a serialized array - response type=' . gettype($result)\n                        );\n                        $this->did_have_error = true;\n                    }\n\n                    return $result;\n                },\n                $content\n            )\n        );\n    }", "code_tokens": ["private", "function", "readResultsFromChildren", "(", ")", "{", "$", "streams", "=", "[", "]", ";", "foreach", "(", "$", "this", "->", "read_streams", "as", "$", "stream", ")", "{", "$", "streams", "[", "intval", "(", "$", "stream", ")", "]", "=", "$", "stream", ";", "}", "$", "content", "=", "array_fill_keys", "(", "array_keys", "(", "$", "streams", ")", ",", "''", ")", ";", "while", "(", "count", "(", "$", "streams", ")", ">", "0", ")", "{", "$", "needs_read", "=", "array_values", "(", "$", "streams", ")", ";", "$", "needs_write", "=", "null", ";", "$", "needs_except", "=", "null", ";", "$", "num", "=", "stream_select", "(", "$", "needs_read", ",", "$", "needs_write", ",", "$", "needs_except", ",", "null", ")", ";", "if", "(", "$", "num", "===", "false", ")", "{", "error_log", "(", "'unable to select on read stream'", ")", ";", "exit", "(", "self", "::", "EXIT_FAILURE", ")", ";", "}", "foreach", "(", "$", "needs_read", "as", "$", "file", ")", "{", "$", "buffer", "=", "fread", "(", "$", "file", ",", "1024", ")", ";", "if", "(", "$", "buffer", ")", "{", "$", "content", "[", "intval", "(", "$", "file", ")", "]", ".=", "$", "buffer", ";", "}", "if", "(", "feof", "(", "$", "file", ")", ")", "{", "fclose", "(", "$", "file", ")", ";", "unset", "(", "$", "streams", "[", "intval", "(", "$", "file", ")", "]", ")", ";", "}", "}", "}", "return", "array_values", "(", "array_map", "(", "function", "(", "$", "data", ")", "{", "$", "result", "=", "unserialize", "(", "$", "data", ")", ";", "if", "(", "!", "\\", "is_array", "(", "$", "result", ")", ")", "{", "error_log", "(", "'Child terminated without returning a serialized array - response type='", ".", "gettype", "(", "$", "result", ")", ")", ";", "$", "this", "->", "did_have_error", "=", "true", ";", "}", "return", "$", "result", ";", "}", ",", "$", "content", ")", ")", ";", "}"], "docstring": "Read the results that each child process has serialized on their write streams.\nThe results are returned in an array, one for each worker. The order of the results\nis not maintained.\n\n@return array\n\n@psalm-suppress MixedAssignment\n@psalm-suppress MixedOperand", "docstring_tokens": ["Read", "the", "results", "that", "each", "child", "process", "has", "serialized", "on", "their", "write", "streams", ".", "The", "results", "are", "returned", "in", "an", "array", "one", "for", "each", "worker", ".", "The", "order", "of", "the", "results", "is", "not", "maintained", "."], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/Fork/Pool.php#L184-L249", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/Fork/Pool.php", "func_name": "Pool.wait", "original_string": "public function wait(): array\n    {\n        // Read all the streams from child processes into an array.\n        $content = $this->readResultsFromChildren();\n\n        // Wait for all children to return\n        foreach ($this->child_pid_list as $child_pid) {\n            $process_lookup = posix_kill($child_pid, 0);\n\n            $status = 0;\n\n            if ($process_lookup) {\n                /**\n                 * @psalm-suppress UndefinedConstant - does not exist on windows\n                 * @psalm-suppress MixedArgument\n                 */\n                posix_kill($child_pid, SIGALRM);\n\n                if (pcntl_waitpid($child_pid, $status) < 0) {\n                    error_log(posix_strerror(posix_get_last_error()));\n                }\n            }\n\n            // Check to see if the child died a graceful death\n            if (pcntl_wifsignaled($status)) {\n                $return_code = pcntl_wexitstatus($status);\n                $term_sig = pcntl_wtermsig($status);\n\n                /**\n                 * @psalm-suppress UndefinedConstant - does not exist on windows\n                 */\n                if ($term_sig !== SIGALRM) {\n                    $this->did_have_error = true;\n                    error_log(\"Child terminated with return code $return_code and signal $term_sig\");\n                }\n            }\n        }\n\n        return $content;\n    }", "language": "php", "code": "public function wait(): array\n    {\n        // Read all the streams from child processes into an array.\n        $content = $this->readResultsFromChildren();\n\n        // Wait for all children to return\n        foreach ($this->child_pid_list as $child_pid) {\n            $process_lookup = posix_kill($child_pid, 0);\n\n            $status = 0;\n\n            if ($process_lookup) {\n                /**\n                 * @psalm-suppress UndefinedConstant - does not exist on windows\n                 * @psalm-suppress MixedArgument\n                 */\n                posix_kill($child_pid, SIGALRM);\n\n                if (pcntl_waitpid($child_pid, $status) < 0) {\n                    error_log(posix_strerror(posix_get_last_error()));\n                }\n            }\n\n            // Check to see if the child died a graceful death\n            if (pcntl_wifsignaled($status)) {\n                $return_code = pcntl_wexitstatus($status);\n                $term_sig = pcntl_wtermsig($status);\n\n                /**\n                 * @psalm-suppress UndefinedConstant - does not exist on windows\n                 */\n                if ($term_sig !== SIGALRM) {\n                    $this->did_have_error = true;\n                    error_log(\"Child terminated with return code $return_code and signal $term_sig\");\n                }\n            }\n        }\n\n        return $content;\n    }", "code_tokens": ["public", "function", "wait", "(", ")", ":", "array", "{", "$", "content", "=", "$", "this", "->", "readResultsFromChildren", "(", ")", ";", "foreach", "(", "$", "this", "->", "child_pid_list", "as", "$", "child_pid", ")", "{", "$", "process_lookup", "=", "posix_kill", "(", "$", "child_pid", ",", "0", ")", ";", "$", "status", "=", "0", ";", "if", "(", "$", "process_lookup", ")", "{", "posix_kill", "(", "$", "child_pid", ",", "SIGALRM", ")", ";", "if", "(", "pcntl_waitpid", "(", "$", "child_pid", ",", "$", "status", ")", "<", "0", ")", "{", "error_log", "(", "posix_strerror", "(", "posix_get_last_error", "(", ")", ")", ")", ";", "}", "}", "if", "(", "pcntl_wifsignaled", "(", "$", "status", ")", ")", "{", "$", "return_code", "=", "pcntl_wexitstatus", "(", "$", "status", ")", ";", "$", "term_sig", "=", "pcntl_wtermsig", "(", "$", "status", ")", ";", "if", "(", "$", "term_sig", "!==", "SIGALRM", ")", "{", "$", "this", "->", "did_have_error", "=", "true", ";", "error_log", "(", "\"Child terminated with return code $return_code and signal $term_sig\"", ")", ";", "}", "}", "}", "return", "$", "content", ";", "}"], "docstring": "Wait for all child processes to complete\n\n@return array", "docstring_tokens": ["Wait", "for", "all", "child", "processes", "to", "complete"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/Fork/Pool.php#L256-L295", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/Traverser/CustomTraverser.php", "func_name": "CustomTraverser.traverseNode", "original_string": "protected function traverseNode(Node $node) : Node\n    {\n        foreach ($node->getSubNodeNames() as $name) {\n            $subNode =& $node->$name;\n\n            if (\\is_array($subNode)) {\n                $subNode = $this->traverseArray($subNode);\n                if ($this->stopTraversal) {\n                    break;\n                }\n            } elseif ($subNode instanceof Node) {\n                $traverseChildren = true;\n                foreach ($this->visitors as $visitor) {\n                    $return = $visitor->enterNode($subNode, $traverseChildren);\n                    if (null !== $return) {\n                        if ($return instanceof Node) {\n                            $subNode = $return;\n                        } elseif (self::DONT_TRAVERSE_CHILDREN === $return) {\n                            $traverseChildren = false;\n                        } elseif (self::STOP_TRAVERSAL === $return) {\n                            $this->stopTraversal = true;\n                            break 2;\n                        } else {\n                            throw new \\LogicException(\n                                'enterNode() returned invalid value of type ' . gettype($return)\n                            );\n                        }\n                    }\n                }\n\n                if ($traverseChildren) {\n                    $subNode = $this->traverseNode($subNode);\n                    if ($this->stopTraversal) {\n                        break;\n                    }\n                }\n\n                foreach ($this->visitors as $visitor) {\n                    $return = $visitor->leaveNode($subNode);\n                    if (null !== $return) {\n                        if ($return instanceof Node) {\n                            $subNode = $return;\n                        } elseif (self::STOP_TRAVERSAL === $return) {\n                            $this->stopTraversal = true;\n                            break 2;\n                        } elseif (\\is_array($return)) {\n                            throw new \\LogicException(\n                                'leaveNode() may only return an array ' .\n                                'if the parent structure is an array'\n                            );\n                        } else {\n                            throw new \\LogicException(\n                                'leaveNode() returned invalid value of type ' . gettype($return)\n                            );\n                        }\n                    }\n                }\n            }\n        }\n\n        return $node;\n    }", "language": "php", "code": "protected function traverseNode(Node $node) : Node\n    {\n        foreach ($node->getSubNodeNames() as $name) {\n            $subNode =& $node->$name;\n\n            if (\\is_array($subNode)) {\n                $subNode = $this->traverseArray($subNode);\n                if ($this->stopTraversal) {\n                    break;\n                }\n            } elseif ($subNode instanceof Node) {\n                $traverseChildren = true;\n                foreach ($this->visitors as $visitor) {\n                    $return = $visitor->enterNode($subNode, $traverseChildren);\n                    if (null !== $return) {\n                        if ($return instanceof Node) {\n                            $subNode = $return;\n                        } elseif (self::DONT_TRAVERSE_CHILDREN === $return) {\n                            $traverseChildren = false;\n                        } elseif (self::STOP_TRAVERSAL === $return) {\n                            $this->stopTraversal = true;\n                            break 2;\n                        } else {\n                            throw new \\LogicException(\n                                'enterNode() returned invalid value of type ' . gettype($return)\n                            );\n                        }\n                    }\n                }\n\n                if ($traverseChildren) {\n                    $subNode = $this->traverseNode($subNode);\n                    if ($this->stopTraversal) {\n                        break;\n                    }\n                }\n\n                foreach ($this->visitors as $visitor) {\n                    $return = $visitor->leaveNode($subNode);\n                    if (null !== $return) {\n                        if ($return instanceof Node) {\n                            $subNode = $return;\n                        } elseif (self::STOP_TRAVERSAL === $return) {\n                            $this->stopTraversal = true;\n                            break 2;\n                        } elseif (\\is_array($return)) {\n                            throw new \\LogicException(\n                                'leaveNode() may only return an array ' .\n                                'if the parent structure is an array'\n                            );\n                        } else {\n                            throw new \\LogicException(\n                                'leaveNode() returned invalid value of type ' . gettype($return)\n                            );\n                        }\n                    }\n                }\n            }\n        }\n\n        return $node;\n    }", "code_tokens": ["protected", "function", "traverseNode", "(", "Node", "$", "node", ")", ":", "Node", "{", "foreach", "(", "$", "node", "->", "getSubNodeNames", "(", ")", "as", "$", "name", ")", "{", "$", "subNode", "=", "&", "$", "node", "->", "$", "name", ";", "if", "(", "\\", "is_array", "(", "$", "subNode", ")", ")", "{", "$", "subNode", "=", "$", "this", "->", "traverseArray", "(", "$", "subNode", ")", ";", "if", "(", "$", "this", "->", "stopTraversal", ")", "{", "break", ";", "}", "}", "elseif", "(", "$", "subNode", "instanceof", "Node", ")", "{", "$", "traverseChildren", "=", "true", ";", "foreach", "(", "$", "this", "->", "visitors", "as", "$", "visitor", ")", "{", "$", "return", "=", "$", "visitor", "->", "enterNode", "(", "$", "subNode", ",", "$", "traverseChildren", ")", ";", "if", "(", "null", "!==", "$", "return", ")", "{", "if", "(", "$", "return", "instanceof", "Node", ")", "{", "$", "subNode", "=", "$", "return", ";", "}", "elseif", "(", "self", "::", "DONT_TRAVERSE_CHILDREN", "===", "$", "return", ")", "{", "$", "traverseChildren", "=", "false", ";", "}", "elseif", "(", "self", "::", "STOP_TRAVERSAL", "===", "$", "return", ")", "{", "$", "this", "->", "stopTraversal", "=", "true", ";", "break", "2", ";", "}", "else", "{", "throw", "new", "\\", "LogicException", "(", "'enterNode() returned invalid value of type '", ".", "gettype", "(", "$", "return", ")", ")", ";", "}", "}", "}", "if", "(", "$", "traverseChildren", ")", "{", "$", "subNode", "=", "$", "this", "->", "traverseNode", "(", "$", "subNode", ")", ";", "if", "(", "$", "this", "->", "stopTraversal", ")", "{", "break", ";", "}", "}", "foreach", "(", "$", "this", "->", "visitors", "as", "$", "visitor", ")", "{", "$", "return", "=", "$", "visitor", "->", "leaveNode", "(", "$", "subNode", ")", ";", "if", "(", "null", "!==", "$", "return", ")", "{", "if", "(", "$", "return", "instanceof", "Node", ")", "{", "$", "subNode", "=", "$", "return", ";", "}", "elseif", "(", "self", "::", "STOP_TRAVERSAL", "===", "$", "return", ")", "{", "$", "this", "->", "stopTraversal", "=", "true", ";", "break", "2", ";", "}", "elseif", "(", "\\", "is_array", "(", "$", "return", ")", ")", "{", "throw", "new", "\\", "LogicException", "(", "'leaveNode() may only return an array '", ".", "'if the parent structure is an array'", ")", ";", "}", "else", "{", "throw", "new", "\\", "LogicException", "(", "'leaveNode() returned invalid value of type '", ".", "gettype", "(", "$", "return", ")", ")", ";", "}", "}", "}", "}", "}", "return", "$", "node", ";", "}"], "docstring": "Recursively traverse a node.\n\n@param Node $node Node to traverse.\n\n@return Node Result of traversal (may be original node or new one)", "docstring_tokens": ["Recursively", "traverse", "a", "node", "."], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/Traverser/CustomTraverser.php#L25-L86", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/Analyzer/ClassLikeAnalyzer.php", "func_name": "ClassLikeAnalyzer.getFQCLNFromNameObject", "original_string": "public static function getFQCLNFromNameObject(\n        PhpParser\\Node\\Name $class_name,\n        Aliases $aliases\n    ) {\n        /** @var string|null */\n        $resolved_name = $class_name->getAttribute('resolvedName');\n\n        if ($resolved_name) {\n            return $resolved_name;\n        }\n\n        if ($class_name instanceof PhpParser\\Node\\Name\\FullyQualified) {\n            return implode('\\\\', $class_name->parts);\n        }\n\n        if (in_array($class_name->parts[0], ['self', 'static', 'parent'], true)) {\n            return $class_name->parts[0];\n        }\n\n        return Type::getFQCLNFromString(\n            implode('\\\\', $class_name->parts),\n            $aliases\n        );\n    }", "language": "php", "code": "public static function getFQCLNFromNameObject(\n        PhpParser\\Node\\Name $class_name,\n        Aliases $aliases\n    ) {\n        /** @var string|null */\n        $resolved_name = $class_name->getAttribute('resolvedName');\n\n        if ($resolved_name) {\n            return $resolved_name;\n        }\n\n        if ($class_name instanceof PhpParser\\Node\\Name\\FullyQualified) {\n            return implode('\\\\', $class_name->parts);\n        }\n\n        if (in_array($class_name->parts[0], ['self', 'static', 'parent'], true)) {\n            return $class_name->parts[0];\n        }\n\n        return Type::getFQCLNFromString(\n            implode('\\\\', $class_name->parts),\n            $aliases\n        );\n    }", "code_tokens": ["public", "static", "function", "getFQCLNFromNameObject", "(", "PhpParser", "\\", "Node", "\\", "Name", "$", "class_name", ",", "Aliases", "$", "aliases", ")", "{", "$", "resolved_name", "=", "$", "class_name", "->", "getAttribute", "(", "'resolvedName'", ")", ";", "if", "(", "$", "resolved_name", ")", "{", "return", "$", "resolved_name", ";", "}", "if", "(", "$", "class_name", "instanceof", "PhpParser", "\\", "Node", "\\", "Name", "\\", "FullyQualified", ")", "{", "return", "implode", "(", "'\\\\'", ",", "$", "class_name", "->", "parts", ")", ";", "}", "if", "(", "in_array", "(", "$", "class_name", "->", "parts", "[", "0", "]", ",", "[", "'self'", ",", "'static'", ",", "'parent'", "]", ",", "true", ")", ")", "{", "return", "$", "class_name", "->", "parts", "[", "0", "]", ";", "}", "return", "Type", "::", "getFQCLNFromString", "(", "implode", "(", "'\\\\'", ",", "$", "class_name", "->", "parts", ")", ",", "$", "aliases", ")", ";", "}"], "docstring": "Gets the fully-qualified class name from a Name object\n\n@param  PhpParser\\Node\\Name      $class_name\n@param  Aliases                  $aliases\n\n@return string", "docstring_tokens": ["Gets", "the", "fully", "-", "qualified", "class", "name", "from", "a", "Name", "object"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/Analyzer/ClassLikeAnalyzer.php#L356-L379", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/Analyzer/ClassLikeAnalyzer.php", "func_name": "ClassLikeAnalyzer.getTypeFromValue", "original_string": "public static function getTypeFromValue($value)\n    {\n        switch (gettype($value)) {\n            case 'boolean':\n                if ($value) {\n                    return Type::getTrue();\n                }\n\n                return Type::getFalse();\n\n            case 'integer':\n                return Type::getInt(false, $value);\n\n            case 'double':\n                return Type::getFloat($value);\n\n            case 'string':\n                return Type::getString($value);\n\n            case 'array':\n                return Type::getArray();\n\n            case 'NULL':\n                return Type::getNull();\n\n            default:\n                return Type::getMixed();\n        }\n    }", "language": "php", "code": "public static function getTypeFromValue($value)\n    {\n        switch (gettype($value)) {\n            case 'boolean':\n                if ($value) {\n                    return Type::getTrue();\n                }\n\n                return Type::getFalse();\n\n            case 'integer':\n                return Type::getInt(false, $value);\n\n            case 'double':\n                return Type::getFloat($value);\n\n            case 'string':\n                return Type::getString($value);\n\n            case 'array':\n                return Type::getArray();\n\n            case 'NULL':\n                return Type::getNull();\n\n            default:\n                return Type::getMixed();\n        }\n    }", "code_tokens": ["public", "static", "function", "getTypeFromValue", "(", "$", "value", ")", "{", "switch", "(", "gettype", "(", "$", "value", ")", ")", "{", "case", "'boolean'", ":", "if", "(", "$", "value", ")", "{", "return", "Type", "::", "getTrue", "(", ")", ";", "}", "return", "Type", "::", "getFalse", "(", ")", ";", "case", "'integer'", ":", "return", "Type", "::", "getInt", "(", "false", ",", "$", "value", ")", ";", "case", "'double'", ":", "return", "Type", "::", "getFloat", "(", "$", "value", ")", ";", "case", "'string'", ":", "return", "Type", "::", "getString", "(", "$", "value", ")", ";", "case", "'array'", ":", "return", "Type", "::", "getArray", "(", ")", ";", "case", "'NULL'", ":", "return", "Type", "::", "getNull", "(", ")", ";", "default", ":", "return", "Type", "::", "getMixed", "(", ")", ";", "}", "}"], "docstring": "Gets the Psalm type from a particular value\n\n@param  mixed $value\n\n@return Type\\Union", "docstring_tokens": ["Gets", "the", "Psalm", "type", "from", "a", "particular", "value"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/Analyzer/ClassLikeAnalyzer.php#L440-L468", "partition": "train"}
{"repo": "vimeo/psalm", "path": "examples/plugins/composer-based/echo-checker/EchoChecker.php", "func_name": "EchoChecker.afterStatementAnalysis", "original_string": "public static function afterStatementAnalysis(\n        PhpParser\\Node\\Stmt $stmt,\n        Context $context,\n        StatementsSource $statements_source,\n        Codebase $codebase,\n        array &$file_replacements = []\n    ) {\n        if ($stmt instanceof PhpParser\\Node\\Stmt\\Echo_) {\n            foreach ($stmt->exprs as $expr) {\n                if (!isset($expr->inferredType) || $expr->inferredType->hasMixed()) {\n                    if (IssueBuffer::accepts(\n                        new ArgumentTypeCoercion(\n                            'Echo requires an unescaped string, ' . $expr->inferredType . ' provided',\n                            new CodeLocation($statements_source, $expr),\n                            'echo'\n                        ),\n                        $statements_source->getSuppressedIssues()\n                    )) {\n                        // keep soldiering on\n                    }\n\n                    continue;\n                }\n\n                $types = $expr->inferredType->getTypes();\n\n                foreach ($types as $type) {\n                    if ($type instanceof \\Psalm\\Type\\Atomic\\TString\n                        && !$type instanceof \\Psalm\\Type\\Atomic\\TLiteralString\n                        && !$type instanceof \\Psalm\\Type\\Atomic\\THtmlEscapedString\n                    ) {\n                        if (IssueBuffer::accepts(\n                            new ArgumentTypeCoercion(\n                                'Echo requires an unescaped string, ' . $expr->inferredType . ' provided',\n                                new CodeLocation($statements_source, $expr),\n                                'echo'\n                            ),\n                            $statements_source->getSuppressedIssues()\n                        )) {\n                            // keep soldiering on\n                        }\n                    }\n                }\n            }\n        }\n    }", "language": "php", "code": "public static function afterStatementAnalysis(\n        PhpParser\\Node\\Stmt $stmt,\n        Context $context,\n        StatementsSource $statements_source,\n        Codebase $codebase,\n        array &$file_replacements = []\n    ) {\n        if ($stmt instanceof PhpParser\\Node\\Stmt\\Echo_) {\n            foreach ($stmt->exprs as $expr) {\n                if (!isset($expr->inferredType) || $expr->inferredType->hasMixed()) {\n                    if (IssueBuffer::accepts(\n                        new ArgumentTypeCoercion(\n                            'Echo requires an unescaped string, ' . $expr->inferredType . ' provided',\n                            new CodeLocation($statements_source, $expr),\n                            'echo'\n                        ),\n                        $statements_source->getSuppressedIssues()\n                    )) {\n                        // keep soldiering on\n                    }\n\n                    continue;\n                }\n\n                $types = $expr->inferredType->getTypes();\n\n                foreach ($types as $type) {\n                    if ($type instanceof \\Psalm\\Type\\Atomic\\TString\n                        && !$type instanceof \\Psalm\\Type\\Atomic\\TLiteralString\n                        && !$type instanceof \\Psalm\\Type\\Atomic\\THtmlEscapedString\n                    ) {\n                        if (IssueBuffer::accepts(\n                            new ArgumentTypeCoercion(\n                                'Echo requires an unescaped string, ' . $expr->inferredType . ' provided',\n                                new CodeLocation($statements_source, $expr),\n                                'echo'\n                            ),\n                            $statements_source->getSuppressedIssues()\n                        )) {\n                            // keep soldiering on\n                        }\n                    }\n                }\n            }\n        }\n    }", "code_tokens": ["public", "static", "function", "afterStatementAnalysis", "(", "PhpParser", "\\", "Node", "\\", "Stmt", "$", "stmt", ",", "Context", "$", "context", ",", "StatementsSource", "$", "statements_source", ",", "Codebase", "$", "codebase", ",", "array", "&", "$", "file_replacements", "=", "[", "]", ")", "{", "if", "(", "$", "stmt", "instanceof", "PhpParser", "\\", "Node", "\\", "Stmt", "\\", "Echo_", ")", "{", "foreach", "(", "$", "stmt", "->", "exprs", "as", "$", "expr", ")", "{", "if", "(", "!", "isset", "(", "$", "expr", "->", "inferredType", ")", "||", "$", "expr", "->", "inferredType", "->", "hasMixed", "(", ")", ")", "{", "if", "(", "IssueBuffer", "::", "accepts", "(", "new", "ArgumentTypeCoercion", "(", "'Echo requires an unescaped string, '", ".", "$", "expr", "->", "inferredType", ".", "' provided'", ",", "new", "CodeLocation", "(", "$", "statements_source", ",", "$", "expr", ")", ",", "'echo'", ")", ",", "$", "statements_source", "->", "getSuppressedIssues", "(", ")", ")", ")", "{", "}", "continue", ";", "}", "$", "types", "=", "$", "expr", "->", "inferredType", "->", "getTypes", "(", ")", ";", "foreach", "(", "$", "types", "as", "$", "type", ")", "{", "if", "(", "$", "type", "instanceof", "\\", "Psalm", "\\", "Type", "\\", "Atomic", "\\", "TString", "&&", "!", "$", "type", "instanceof", "\\", "Psalm", "\\", "Type", "\\", "Atomic", "\\", "TLiteralString", "&&", "!", "$", "type", "instanceof", "\\", "Psalm", "\\", "Type", "\\", "Atomic", "\\", "THtmlEscapedString", ")", "{", "if", "(", "IssueBuffer", "::", "accepts", "(", "new", "ArgumentTypeCoercion", "(", "'Echo requires an unescaped string, '", ".", "$", "expr", "->", "inferredType", ".", "' provided'", ",", "new", "CodeLocation", "(", "$", "statements_source", ",", "$", "expr", ")", ",", "'echo'", ")", ",", "$", "statements_source", "->", "getSuppressedIssues", "(", ")", ")", ")", "{", "}", "}", "}", "}", "}", "}"], "docstring": "Called after a statement has been checked\n\n@param  FileManipulation[]   $file_replacements\n\n@return null|false", "docstring_tokens": ["Called", "after", "a", "statement", "has", "been", "checked"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/examples/plugins/composer-based/echo-checker/EchoChecker.php#L23-L68", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/Codebase/Scanner.php", "func_name": "Scanner.fileExistsForClassLike", "original_string": "private function fileExistsForClassLike(ClassLikes $classlikes, $fq_class_name)\n    {\n        $fq_class_name_lc = strtolower($fq_class_name);\n\n        if (isset($this->classlike_files[$fq_class_name_lc])) {\n            return true;\n        }\n\n        if ($fq_class_name === 'self') {\n            return false;\n        }\n\n        if (isset($this->existing_classlikes_lc[$fq_class_name_lc])) {\n            throw new \\InvalidArgumentException('Why are you asking about a builtin class?');\n        }\n\n        $composer_file_path = $this->config->getComposerFilePathForClassLike($fq_class_name);\n\n        if ($composer_file_path && file_exists($composer_file_path)) {\n            if ($this->debug_output) {\n                echo 'Using composer to locate file for ' . $fq_class_name . \"\\n\";\n            }\n\n            $classlikes->addFullyQualifiedClassLikeName(\n                $fq_class_name_lc,\n                realpath($composer_file_path)\n            );\n\n            return true;\n        }\n\n        $old_level = error_reporting();\n\n        if (!$this->debug_output) {\n            error_reporting(E_ERROR);\n        }\n\n        try {\n            if ($this->debug_output) {\n                echo 'Using reflection to locate file for ' . $fq_class_name . \"\\n\";\n            }\n\n            /** @psalm-suppress TypeCoercion */\n            $reflected_class = new \\ReflectionClass($fq_class_name);\n        } catch (\\Throwable $e) {\n            error_reporting($old_level);\n\n            // do not cache any results here (as case-sensitive filenames can screw things up)\n\n            return false;\n        }\n\n        error_reporting($old_level);\n\n        /** @psalm-suppress MixedMethodCall due to Reflection class weirdness */\n        $file_path = (string)$reflected_class->getFileName();\n\n        // if the file was autoloaded but exists in evaled code only, return false\n        if (!file_exists($file_path)) {\n            return false;\n        }\n\n        $new_fq_class_name = $reflected_class->getName();\n\n        if (strtolower($new_fq_class_name) !== strtolower($fq_class_name)) {\n            $classlikes->addClassAlias($new_fq_class_name, strtolower($fq_class_name));\n            $fq_class_name_lc = strtolower($new_fq_class_name);\n        }\n\n        $fq_class_name = $new_fq_class_name;\n        $classlikes->addFullyQualifiedClassLikeName($fq_class_name_lc);\n\n        if ($reflected_class->isInterface()) {\n            $classlikes->addFullyQualifiedInterfaceName($fq_class_name, $file_path);\n        } elseif ($reflected_class->isTrait()) {\n            $classlikes->addFullyQualifiedTraitName($fq_class_name, $file_path);\n        } else {\n            $classlikes->addFullyQualifiedClassName($fq_class_name, $file_path);\n        }\n\n        return true;\n    }", "language": "php", "code": "private function fileExistsForClassLike(ClassLikes $classlikes, $fq_class_name)\n    {\n        $fq_class_name_lc = strtolower($fq_class_name);\n\n        if (isset($this->classlike_files[$fq_class_name_lc])) {\n            return true;\n        }\n\n        if ($fq_class_name === 'self') {\n            return false;\n        }\n\n        if (isset($this->existing_classlikes_lc[$fq_class_name_lc])) {\n            throw new \\InvalidArgumentException('Why are you asking about a builtin class?');\n        }\n\n        $composer_file_path = $this->config->getComposerFilePathForClassLike($fq_class_name);\n\n        if ($composer_file_path && file_exists($composer_file_path)) {\n            if ($this->debug_output) {\n                echo 'Using composer to locate file for ' . $fq_class_name . \"\\n\";\n            }\n\n            $classlikes->addFullyQualifiedClassLikeName(\n                $fq_class_name_lc,\n                realpath($composer_file_path)\n            );\n\n            return true;\n        }\n\n        $old_level = error_reporting();\n\n        if (!$this->debug_output) {\n            error_reporting(E_ERROR);\n        }\n\n        try {\n            if ($this->debug_output) {\n                echo 'Using reflection to locate file for ' . $fq_class_name . \"\\n\";\n            }\n\n            /** @psalm-suppress TypeCoercion */\n            $reflected_class = new \\ReflectionClass($fq_class_name);\n        } catch (\\Throwable $e) {\n            error_reporting($old_level);\n\n            // do not cache any results here (as case-sensitive filenames can screw things up)\n\n            return false;\n        }\n\n        error_reporting($old_level);\n\n        /** @psalm-suppress MixedMethodCall due to Reflection class weirdness */\n        $file_path = (string)$reflected_class->getFileName();\n\n        // if the file was autoloaded but exists in evaled code only, return false\n        if (!file_exists($file_path)) {\n            return false;\n        }\n\n        $new_fq_class_name = $reflected_class->getName();\n\n        if (strtolower($new_fq_class_name) !== strtolower($fq_class_name)) {\n            $classlikes->addClassAlias($new_fq_class_name, strtolower($fq_class_name));\n            $fq_class_name_lc = strtolower($new_fq_class_name);\n        }\n\n        $fq_class_name = $new_fq_class_name;\n        $classlikes->addFullyQualifiedClassLikeName($fq_class_name_lc);\n\n        if ($reflected_class->isInterface()) {\n            $classlikes->addFullyQualifiedInterfaceName($fq_class_name, $file_path);\n        } elseif ($reflected_class->isTrait()) {\n            $classlikes->addFullyQualifiedTraitName($fq_class_name, $file_path);\n        } else {\n            $classlikes->addFullyQualifiedClassName($fq_class_name, $file_path);\n        }\n\n        return true;\n    }", "code_tokens": ["private", "function", "fileExistsForClassLike", "(", "ClassLikes", "$", "classlikes", ",", "$", "fq_class_name", ")", "{", "$", "fq_class_name_lc", "=", "strtolower", "(", "$", "fq_class_name", ")", ";", "if", "(", "isset", "(", "$", "this", "->", "classlike_files", "[", "$", "fq_class_name_lc", "]", ")", ")", "{", "return", "true", ";", "}", "if", "(", "$", "fq_class_name", "===", "'self'", ")", "{", "return", "false", ";", "}", "if", "(", "isset", "(", "$", "this", "->", "existing_classlikes_lc", "[", "$", "fq_class_name_lc", "]", ")", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "'Why are you asking about a builtin class?'", ")", ";", "}", "$", "composer_file_path", "=", "$", "this", "->", "config", "->", "getComposerFilePathForClassLike", "(", "$", "fq_class_name", ")", ";", "if", "(", "$", "composer_file_path", "&&", "file_exists", "(", "$", "composer_file_path", ")", ")", "{", "if", "(", "$", "this", "->", "debug_output", ")", "{", "echo", "'Using composer to locate file for '", ".", "$", "fq_class_name", ".", "\"\\n\"", ";", "}", "$", "classlikes", "->", "addFullyQualifiedClassLikeName", "(", "$", "fq_class_name_lc", ",", "realpath", "(", "$", "composer_file_path", ")", ")", ";", "return", "true", ";", "}", "$", "old_level", "=", "error_reporting", "(", ")", ";", "if", "(", "!", "$", "this", "->", "debug_output", ")", "{", "error_reporting", "(", "E_ERROR", ")", ";", "}", "try", "{", "if", "(", "$", "this", "->", "debug_output", ")", "{", "echo", "'Using reflection to locate file for '", ".", "$", "fq_class_name", ".", "\"\\n\"", ";", "}", "$", "reflected_class", "=", "new", "\\", "ReflectionClass", "(", "$", "fq_class_name", ")", ";", "}", "catch", "(", "\\", "Throwable", "$", "e", ")", "{", "error_reporting", "(", "$", "old_level", ")", ";", "return", "false", ";", "}", "error_reporting", "(", "$", "old_level", ")", ";", "$", "file_path", "=", "(", "string", ")", "$", "reflected_class", "->", "getFileName", "(", ")", ";", "if", "(", "!", "file_exists", "(", "$", "file_path", ")", ")", "{", "return", "false", ";", "}", "$", "new_fq_class_name", "=", "$", "reflected_class", "->", "getName", "(", ")", ";", "if", "(", "strtolower", "(", "$", "new_fq_class_name", ")", "!==", "strtolower", "(", "$", "fq_class_name", ")", ")", "{", "$", "classlikes", "->", "addClassAlias", "(", "$", "new_fq_class_name", ",", "strtolower", "(", "$", "fq_class_name", ")", ")", ";", "$", "fq_class_name_lc", "=", "strtolower", "(", "$", "new_fq_class_name", ")", ";", "}", "$", "fq_class_name", "=", "$", "new_fq_class_name", ";", "$", "classlikes", "->", "addFullyQualifiedClassLikeName", "(", "$", "fq_class_name_lc", ")", ";", "if", "(", "$", "reflected_class", "->", "isInterface", "(", ")", ")", "{", "$", "classlikes", "->", "addFullyQualifiedInterfaceName", "(", "$", "fq_class_name", ",", "$", "file_path", ")", ";", "}", "elseif", "(", "$", "reflected_class", "->", "isTrait", "(", ")", ")", "{", "$", "classlikes", "->", "addFullyQualifiedTraitName", "(", "$", "fq_class_name", ",", "$", "file_path", ")", ";", "}", "else", "{", "$", "classlikes", "->", "addFullyQualifiedClassName", "(", "$", "fq_class_name", ",", "$", "file_path", ")", ";", "}", "return", "true", ";", "}"], "docstring": "Checks whether a class exists, and if it does then records what file it's in\nfor later checking\n\n@param  string $fq_class_name\n\n@return bool", "docstring_tokens": ["Checks", "whether", "a", "class", "exists", "and", "if", "it", "does", "then", "records", "what", "file", "it", "s", "in", "for", "later", "checking"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/Codebase/Scanner.php#L677-L758", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/Analyzer/TypeAnalyzer.php", "func_name": "TypeAnalyzer.isContainedByInPhp", "original_string": "public static function isContainedByInPhp(\n        Type\\Union $input_type = null,\n        Type\\Union $container_type\n    ) {\n        if (!$input_type) {\n            return false;\n        }\n\n        if ($input_type->getId() === $container_type->getId()) {\n            return true;\n        }\n\n        if ($input_type->isNullable() && !$container_type->isNullable()) {\n            return false;\n        }\n\n        $input_type_not_null = clone $input_type;\n        $input_type_not_null->removeType('null');\n\n        $container_type_not_null = clone $container_type;\n        $container_type_not_null->removeType('null');\n\n        if ($input_type_not_null->getId() === $container_type_not_null->getId()) {\n            return true;\n        }\n\n        if ($input_type_not_null->hasArray() && $container_type_not_null->hasType('iterable')) {\n            return true;\n        }\n\n        return false;\n    }", "language": "php", "code": "public static function isContainedByInPhp(\n        Type\\Union $input_type = null,\n        Type\\Union $container_type\n    ) {\n        if (!$input_type) {\n            return false;\n        }\n\n        if ($input_type->getId() === $container_type->getId()) {\n            return true;\n        }\n\n        if ($input_type->isNullable() && !$container_type->isNullable()) {\n            return false;\n        }\n\n        $input_type_not_null = clone $input_type;\n        $input_type_not_null->removeType('null');\n\n        $container_type_not_null = clone $container_type;\n        $container_type_not_null->removeType('null');\n\n        if ($input_type_not_null->getId() === $container_type_not_null->getId()) {\n            return true;\n        }\n\n        if ($input_type_not_null->hasArray() && $container_type_not_null->hasType('iterable')) {\n            return true;\n        }\n\n        return false;\n    }", "code_tokens": ["public", "static", "function", "isContainedByInPhp", "(", "Type", "\\", "Union", "$", "input_type", "=", "null", ",", "Type", "\\", "Union", "$", "container_type", ")", "{", "if", "(", "!", "$", "input_type", ")", "{", "return", "false", ";", "}", "if", "(", "$", "input_type", "->", "getId", "(", ")", "===", "$", "container_type", "->", "getId", "(", ")", ")", "{", "return", "true", ";", "}", "if", "(", "$", "input_type", "->", "isNullable", "(", ")", "&&", "!", "$", "container_type", "->", "isNullable", "(", ")", ")", "{", "return", "false", ";", "}", "$", "input_type_not_null", "=", "clone", "$", "input_type", ";", "$", "input_type_not_null", "->", "removeType", "(", "'null'", ")", ";", "$", "container_type_not_null", "=", "clone", "$", "container_type", ";", "$", "container_type_not_null", "->", "removeType", "(", "'null'", ")", ";", "if", "(", "$", "input_type_not_null", "->", "getId", "(", ")", "===", "$", "container_type_not_null", "->", "getId", "(", ")", ")", "{", "return", "true", ";", "}", "if", "(", "$", "input_type_not_null", "->", "hasArray", "(", ")", "&&", "$", "container_type_not_null", "->", "hasType", "(", "'iterable'", ")", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}"], "docstring": "Used for comparing signature typehints, uses PHP's light contravariance rules\n\n@param  Type\\Union   $input_type\n@param  Type\\Union   $container_type\n\n@return bool", "docstring_tokens": ["Used", "for", "comparing", "signature", "typehints", "uses", "PHP", "s", "light", "contravariance", "rules"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/Analyzer/TypeAnalyzer.php#L181-L212", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/Analyzer/TypeAnalyzer.php", "func_name": "TypeAnalyzer.isSimplyContainedBy", "original_string": "public static function isSimplyContainedBy(\n        Type\\Union $input_type,\n        Type\\Union $container_type\n    ) {\n        if ($input_type->getId() === $container_type->getId()) {\n            return true;\n        }\n\n        if ($input_type->isNullable() && !$container_type->isNullable()) {\n            return false;\n        }\n\n        $input_type_not_null = clone $input_type;\n        $input_type_not_null->removeType('null');\n\n        $container_type_not_null = clone $container_type;\n        $container_type_not_null->removeType('null');\n\n        return (bool) array_intersect_key(\n            $input_type_not_null->getTypes(),\n            $container_type_not_null->getTypes()\n        );\n    }", "language": "php", "code": "public static function isSimplyContainedBy(\n        Type\\Union $input_type,\n        Type\\Union $container_type\n    ) {\n        if ($input_type->getId() === $container_type->getId()) {\n            return true;\n        }\n\n        if ($input_type->isNullable() && !$container_type->isNullable()) {\n            return false;\n        }\n\n        $input_type_not_null = clone $input_type;\n        $input_type_not_null->removeType('null');\n\n        $container_type_not_null = clone $container_type;\n        $container_type_not_null->removeType('null');\n\n        return (bool) array_intersect_key(\n            $input_type_not_null->getTypes(),\n            $container_type_not_null->getTypes()\n        );\n    }", "code_tokens": ["public", "static", "function", "isSimplyContainedBy", "(", "Type", "\\", "Union", "$", "input_type", ",", "Type", "\\", "Union", "$", "container_type", ")", "{", "if", "(", "$", "input_type", "->", "getId", "(", ")", "===", "$", "container_type", "->", "getId", "(", ")", ")", "{", "return", "true", ";", "}", "if", "(", "$", "input_type", "->", "isNullable", "(", ")", "&&", "!", "$", "container_type", "->", "isNullable", "(", ")", ")", "{", "return", "false", ";", "}", "$", "input_type_not_null", "=", "clone", "$", "input_type", ";", "$", "input_type_not_null", "->", "removeType", "(", "'null'", ")", ";", "$", "container_type_not_null", "=", "clone", "$", "container_type", ";", "$", "container_type_not_null", "->", "removeType", "(", "'null'", ")", ";", "return", "(", "bool", ")", "array_intersect_key", "(", "$", "input_type_not_null", "->", "getTypes", "(", ")", ",", "$", "container_type_not_null", "->", "getTypes", "(", ")", ")", ";", "}"], "docstring": "Used for comparing docblock types to signature types before we know about all types\n\n@param  Type\\Union   $input_type\n@param  Type\\Union   $container_type\n\n@return bool", "docstring_tokens": ["Used", "for", "comparing", "docblock", "types", "to", "signature", "types", "before", "we", "know", "about", "all", "types"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/Analyzer/TypeAnalyzer.php#L222-L244", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/ExecutionEnvironment/BuildInfoCollector.php", "func_name": "BuildInfoCollector.fillJenkins", "original_string": "protected function fillJenkins() : self\n    {\n        if (isset($this->env['JENKINS_URL']) && isset($this->env['BUILD_NUMBER'])) {\n            $this->readEnv['CI_BUILD_NUMBER'] = $this->env['BUILD_NUMBER'];\n            $this->readEnv['CI_BUILD_URL'] = $this->env['JENKINS_URL'];\n            $this->env['CI_NAME'] = 'jenkins';\n\n            // backup\n            $this->readEnv['BUILD_NUMBER'] = $this->env['BUILD_NUMBER'];\n            $this->readEnv['JENKINS_URL'] = $this->env['JENKINS_URL'];\n            $this->readEnv['CI_NAME'] = $this->env['CI_NAME'];\n        }\n\n        return $this;\n    }", "language": "php", "code": "protected function fillJenkins() : self\n    {\n        if (isset($this->env['JENKINS_URL']) && isset($this->env['BUILD_NUMBER'])) {\n            $this->readEnv['CI_BUILD_NUMBER'] = $this->env['BUILD_NUMBER'];\n            $this->readEnv['CI_BUILD_URL'] = $this->env['JENKINS_URL'];\n            $this->env['CI_NAME'] = 'jenkins';\n\n            // backup\n            $this->readEnv['BUILD_NUMBER'] = $this->env['BUILD_NUMBER'];\n            $this->readEnv['JENKINS_URL'] = $this->env['JENKINS_URL'];\n            $this->readEnv['CI_NAME'] = $this->env['CI_NAME'];\n        }\n\n        return $this;\n    }", "code_tokens": ["protected", "function", "fillJenkins", "(", ")", ":", "self", "{", "if", "(", "isset", "(", "$", "this", "->", "env", "[", "'JENKINS_URL'", "]", ")", "&&", "isset", "(", "$", "this", "->", "env", "[", "'BUILD_NUMBER'", "]", ")", ")", "{", "$", "this", "->", "readEnv", "[", "'CI_BUILD_NUMBER'", "]", "=", "$", "this", "->", "env", "[", "'BUILD_NUMBER'", "]", ";", "$", "this", "->", "readEnv", "[", "'CI_BUILD_URL'", "]", "=", "$", "this", "->", "env", "[", "'JENKINS_URL'", "]", ";", "$", "this", "->", "env", "[", "'CI_NAME'", "]", "=", "'jenkins'", ";", "$", "this", "->", "readEnv", "[", "'BUILD_NUMBER'", "]", "=", "$", "this", "->", "env", "[", "'BUILD_NUMBER'", "]", ";", "$", "this", "->", "readEnv", "[", "'JENKINS_URL'", "]", "=", "$", "this", "->", "env", "[", "'JENKINS_URL'", "]", ";", "$", "this", "->", "readEnv", "[", "'CI_NAME'", "]", "=", "$", "this", "->", "env", "[", "'CI_NAME'", "]", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Fill Jenkins environment variables.\n\n\"JENKINS_URL\", \"BUILD_NUMBER\" must be set.\n\n@return $this", "docstring_tokens": ["Fill", "Jenkins", "environment", "variables", "."], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/ExecutionEnvironment/BuildInfoCollector.php#L184-L198", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/ExecutionEnvironment/BuildInfoCollector.php", "func_name": "BuildInfoCollector.fillScrutinizer", "original_string": "protected function fillScrutinizer() : self\n    {\n        if (isset($this->env['SCRUTINIZER']) && $this->env['SCRUTINIZER']) {\n            $this->readEnv['CI_JOB_ID'] = $this->env['SCRUTINIZER_INSPECTION_UUID'];\n            $this->readEnv['CI_BRANCH'] = $this->env['SCRUTINIZER_BRANCH'];\n            $this->readEnv['CI_PR_NUMBER'] = $this->env['SCRUTINIZER_PR_NUMBER'] ?? '';\n\n            // backup\n            $this->readEnv['CI_NAME'] = 'Scrutinizer';\n\n            $repo_slug = (string) $this->env['SCRUTINIZER_PROJECT'] ?? '';\n\n            if ($repo_slug) {\n                $slug_parts = explode('/', $repo_slug);\n\n                if ($this->readEnv['CI_PR_NUMBER']) {\n                    $this->readEnv['CI_PR_REPO_OWNER'] = $slug_parts[1];\n                    $this->readEnv['CI_PR_REPO_NAME'] = $slug_parts[2];\n                } else {\n                    $this->readEnv['CI_REPO_OWNER'] = $slug_parts[1];\n                    $this->readEnv['CI_REPO_NAME'] = $slug_parts[2];\n                }\n            }\n        }\n\n        return $this;\n    }", "language": "php", "code": "protected function fillScrutinizer() : self\n    {\n        if (isset($this->env['SCRUTINIZER']) && $this->env['SCRUTINIZER']) {\n            $this->readEnv['CI_JOB_ID'] = $this->env['SCRUTINIZER_INSPECTION_UUID'];\n            $this->readEnv['CI_BRANCH'] = $this->env['SCRUTINIZER_BRANCH'];\n            $this->readEnv['CI_PR_NUMBER'] = $this->env['SCRUTINIZER_PR_NUMBER'] ?? '';\n\n            // backup\n            $this->readEnv['CI_NAME'] = 'Scrutinizer';\n\n            $repo_slug = (string) $this->env['SCRUTINIZER_PROJECT'] ?? '';\n\n            if ($repo_slug) {\n                $slug_parts = explode('/', $repo_slug);\n\n                if ($this->readEnv['CI_PR_NUMBER']) {\n                    $this->readEnv['CI_PR_REPO_OWNER'] = $slug_parts[1];\n                    $this->readEnv['CI_PR_REPO_NAME'] = $slug_parts[2];\n                } else {\n                    $this->readEnv['CI_REPO_OWNER'] = $slug_parts[1];\n                    $this->readEnv['CI_REPO_NAME'] = $slug_parts[2];\n                }\n            }\n        }\n\n        return $this;\n    }", "code_tokens": ["protected", "function", "fillScrutinizer", "(", ")", ":", "self", "{", "if", "(", "isset", "(", "$", "this", "->", "env", "[", "'SCRUTINIZER'", "]", ")", "&&", "$", "this", "->", "env", "[", "'SCRUTINIZER'", "]", ")", "{", "$", "this", "->", "readEnv", "[", "'CI_JOB_ID'", "]", "=", "$", "this", "->", "env", "[", "'SCRUTINIZER_INSPECTION_UUID'", "]", ";", "$", "this", "->", "readEnv", "[", "'CI_BRANCH'", "]", "=", "$", "this", "->", "env", "[", "'SCRUTINIZER_BRANCH'", "]", ";", "$", "this", "->", "readEnv", "[", "'CI_PR_NUMBER'", "]", "=", "$", "this", "->", "env", "[", "'SCRUTINIZER_PR_NUMBER'", "]", "??", "''", ";", "$", "this", "->", "readEnv", "[", "'CI_NAME'", "]", "=", "'Scrutinizer'", ";", "$", "repo_slug", "=", "(", "string", ")", "$", "this", "->", "env", "[", "'SCRUTINIZER_PROJECT'", "]", "??", "''", ";", "if", "(", "$", "repo_slug", ")", "{", "$", "slug_parts", "=", "explode", "(", "'/'", ",", "$", "repo_slug", ")", ";", "if", "(", "$", "this", "->", "readEnv", "[", "'CI_PR_NUMBER'", "]", ")", "{", "$", "this", "->", "readEnv", "[", "'CI_PR_REPO_OWNER'", "]", "=", "$", "slug_parts", "[", "1", "]", ";", "$", "this", "->", "readEnv", "[", "'CI_PR_REPO_NAME'", "]", "=", "$", "slug_parts", "[", "2", "]", ";", "}", "else", "{", "$", "this", "->", "readEnv", "[", "'CI_REPO_OWNER'", "]", "=", "$", "slug_parts", "[", "1", "]", ";", "$", "this", "->", "readEnv", "[", "'CI_REPO_NAME'", "]", "=", "$", "slug_parts", "[", "2", "]", ";", "}", "}", "}", "return", "$", "this", ";", "}"], "docstring": "Fill Scrutinizer environment variables.\n\n\"JENKINS_URL\", \"BUILD_NUMBER\" must be set.\n\n@return $this", "docstring_tokens": ["Fill", "Scrutinizer", "environment", "variables", "."], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/ExecutionEnvironment/BuildInfoCollector.php#L207-L233", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/Analyzer/MethodAnalyzer.php", "func_name": "MethodAnalyzer.checkStatic", "original_string": "public static function checkStatic(\n        $method_id,\n        $self_call,\n        $is_context_dynamic,\n        Codebase $codebase,\n        CodeLocation $code_location,\n        array $suppressed_issues,\n        &$is_dynamic_this_method = false\n    ) {\n        $codebase_methods = $codebase->methods;\n\n        if ($method_id === 'Closure::fromcallable') {\n            return true;\n        }\n\n        $original_method_id = $method_id;\n\n        $method_id = $codebase_methods->getDeclaringMethodId($method_id);\n\n        if (!$method_id) {\n            throw new \\LogicException('Declaring method for ' . $original_method_id . ' should not be null');\n        }\n\n        $storage = $codebase_methods->getStorage($method_id);\n\n        if (!$storage->is_static) {\n            if ($self_call) {\n                if (!$is_context_dynamic) {\n                    if (IssueBuffer::accepts(\n                        new NonStaticSelfCall(\n                            'Method ' . $codebase_methods->getCasedMethodId($method_id) .\n                                ' is not static, but is called ' .\n                                'using self::',\n                            $code_location\n                        ),\n                        $suppressed_issues\n                    )) {\n                        return false;\n                    }\n                } else {\n                    $is_dynamic_this_method = true;\n                }\n            } else {\n                if (IssueBuffer::accepts(\n                    new InvalidStaticInvocation(\n                        'Method ' . $codebase_methods->getCasedMethodId($method_id) .\n                            ' is not static, but is called ' .\n                            'statically',\n                        $code_location\n                    ),\n                    $suppressed_issues\n                )) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }", "language": "php", "code": "public static function checkStatic(\n        $method_id,\n        $self_call,\n        $is_context_dynamic,\n        Codebase $codebase,\n        CodeLocation $code_location,\n        array $suppressed_issues,\n        &$is_dynamic_this_method = false\n    ) {\n        $codebase_methods = $codebase->methods;\n\n        if ($method_id === 'Closure::fromcallable') {\n            return true;\n        }\n\n        $original_method_id = $method_id;\n\n        $method_id = $codebase_methods->getDeclaringMethodId($method_id);\n\n        if (!$method_id) {\n            throw new \\LogicException('Declaring method for ' . $original_method_id . ' should not be null');\n        }\n\n        $storage = $codebase_methods->getStorage($method_id);\n\n        if (!$storage->is_static) {\n            if ($self_call) {\n                if (!$is_context_dynamic) {\n                    if (IssueBuffer::accepts(\n                        new NonStaticSelfCall(\n                            'Method ' . $codebase_methods->getCasedMethodId($method_id) .\n                                ' is not static, but is called ' .\n                                'using self::',\n                            $code_location\n                        ),\n                        $suppressed_issues\n                    )) {\n                        return false;\n                    }\n                } else {\n                    $is_dynamic_this_method = true;\n                }\n            } else {\n                if (IssueBuffer::accepts(\n                    new InvalidStaticInvocation(\n                        'Method ' . $codebase_methods->getCasedMethodId($method_id) .\n                            ' is not static, but is called ' .\n                            'statically',\n                        $code_location\n                    ),\n                    $suppressed_issues\n                )) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }", "code_tokens": ["public", "static", "function", "checkStatic", "(", "$", "method_id", ",", "$", "self_call", ",", "$", "is_context_dynamic", ",", "Codebase", "$", "codebase", ",", "CodeLocation", "$", "code_location", ",", "array", "$", "suppressed_issues", ",", "&", "$", "is_dynamic_this_method", "=", "false", ")", "{", "$", "codebase_methods", "=", "$", "codebase", "->", "methods", ";", "if", "(", "$", "method_id", "===", "'Closure::fromcallable'", ")", "{", "return", "true", ";", "}", "$", "original_method_id", "=", "$", "method_id", ";", "$", "method_id", "=", "$", "codebase_methods", "->", "getDeclaringMethodId", "(", "$", "method_id", ")", ";", "if", "(", "!", "$", "method_id", ")", "{", "throw", "new", "\\", "LogicException", "(", "'Declaring method for '", ".", "$", "original_method_id", ".", "' should not be null'", ")", ";", "}", "$", "storage", "=", "$", "codebase_methods", "->", "getStorage", "(", "$", "method_id", ")", ";", "if", "(", "!", "$", "storage", "->", "is_static", ")", "{", "if", "(", "$", "self_call", ")", "{", "if", "(", "!", "$", "is_context_dynamic", ")", "{", "if", "(", "IssueBuffer", "::", "accepts", "(", "new", "NonStaticSelfCall", "(", "'Method '", ".", "$", "codebase_methods", "->", "getCasedMethodId", "(", "$", "method_id", ")", ".", "' is not static, but is called '", ".", "'using self::'", ",", "$", "code_location", ")", ",", "$", "suppressed_issues", ")", ")", "{", "return", "false", ";", "}", "}", "else", "{", "$", "is_dynamic_this_method", "=", "true", ";", "}", "}", "else", "{", "if", "(", "IssueBuffer", "::", "accepts", "(", "new", "InvalidStaticInvocation", "(", "'Method '", ".", "$", "codebase_methods", "->", "getCasedMethodId", "(", "$", "method_id", ")", ".", "' is not static, but is called '", ".", "'statically'", ",", "$", "code_location", ")", ",", "$", "suppressed_issues", ")", ")", "{", "return", "false", ";", "}", "}", "}", "return", "true", ";", "}"], "docstring": "Determines whether a given method is static or not\n\n@param  string          $method_id\n@param  bool            $self_call\n@param  bool            $is_context_dynamic\n@param  CodeLocation    $code_location\n@param  array<string>   $suppressed_issues\n@param  bool            $is_dynamic_this_method\n\n@return bool", "docstring_tokens": ["Determines", "whether", "a", "given", "method", "is", "static", "or", "not"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/Analyzer/MethodAnalyzer.php#L81-L139", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Type/Algebra.php", "func_name": "Algebra.simplifyCNF", "original_string": "public static function simplifyCNF(array $clauses)\n    {\n        $cloned_clauses = [];\n\n        // avoid strict duplicates\n        foreach ($clauses as $clause) {\n            $unique_clause = clone $clause;\n            foreach ($unique_clause->possibilities as $var_id => $possibilities) {\n                if (count($possibilities)) {\n                    $unique_clause->possibilities[$var_id] = array_unique($possibilities);\n                }\n            }\n            $cloned_clauses[$clause->getHash()] = $unique_clause;\n        }\n\n        // remove impossible types\n        foreach ($cloned_clauses as $clause_a) {\n            if (count($clause_a->possibilities) !== 1 || count(array_values($clause_a->possibilities)[0]) !== 1) {\n                continue;\n            }\n\n            if (!$clause_a->reconcilable || $clause_a->wedge) {\n                continue;\n            }\n\n            $clause_var = array_keys($clause_a->possibilities)[0];\n            $only_type = array_pop(array_values($clause_a->possibilities)[0]);\n            $negated_clause_type = self::negateType($only_type);\n\n            foreach ($cloned_clauses as $clause_b) {\n                if ($clause_a === $clause_b || !$clause_b->reconcilable || $clause_b->wedge) {\n                    continue;\n                }\n\n                if (isset($clause_b->possibilities[$clause_var]) &&\n                    in_array($negated_clause_type, $clause_b->possibilities[$clause_var], true)\n                ) {\n                    $clause_b->possibilities[$clause_var] = array_filter(\n                        $clause_b->possibilities[$clause_var],\n                        /**\n                         * @param string $possible_type\n                         *\n                         * @return bool\n                         */\n                        function ($possible_type) use ($negated_clause_type) {\n                            return $possible_type !== $negated_clause_type;\n                        }\n                    );\n\n                    if (count($clause_b->possibilities[$clause_var]) === 0) {\n                        unset($clause_b->possibilities[$clause_var]);\n                        $clause_b->impossibilities = null;\n                    }\n                }\n            }\n        }\n\n        $deduped_clauses = [];\n\n        // avoid strict duplicates\n        foreach ($cloned_clauses as $clause) {\n            $deduped_clauses[$clause->getHash()] = clone $clause;\n        }\n\n        $deduped_clauses = array_filter(\n            $deduped_clauses,\n            /**\n             * @return bool\n             */\n            function (Clause $clause) {\n                return count($clause->possibilities) || $clause->wedge;\n            }\n        );\n\n        $simplified_clauses = [];\n\n        foreach ($deduped_clauses as $clause_a) {\n            $is_redundant = false;\n\n            foreach ($deduped_clauses as $clause_b) {\n                if ($clause_a === $clause_b\n                    || !$clause_b->reconcilable\n                    || $clause_b->wedge\n                    || $clause_a->wedge\n                ) {\n                    continue;\n                }\n\n                if ($clause_a->contains($clause_b)) {\n                    $is_redundant = true;\n                    break;\n                }\n            }\n\n            if (!$is_redundant) {\n                $simplified_clauses[] = $clause_a;\n            }\n        }\n\n        return $simplified_clauses;\n    }", "language": "php", "code": "public static function simplifyCNF(array $clauses)\n    {\n        $cloned_clauses = [];\n\n        // avoid strict duplicates\n        foreach ($clauses as $clause) {\n            $unique_clause = clone $clause;\n            foreach ($unique_clause->possibilities as $var_id => $possibilities) {\n                if (count($possibilities)) {\n                    $unique_clause->possibilities[$var_id] = array_unique($possibilities);\n                }\n            }\n            $cloned_clauses[$clause->getHash()] = $unique_clause;\n        }\n\n        // remove impossible types\n        foreach ($cloned_clauses as $clause_a) {\n            if (count($clause_a->possibilities) !== 1 || count(array_values($clause_a->possibilities)[0]) !== 1) {\n                continue;\n            }\n\n            if (!$clause_a->reconcilable || $clause_a->wedge) {\n                continue;\n            }\n\n            $clause_var = array_keys($clause_a->possibilities)[0];\n            $only_type = array_pop(array_values($clause_a->possibilities)[0]);\n            $negated_clause_type = self::negateType($only_type);\n\n            foreach ($cloned_clauses as $clause_b) {\n                if ($clause_a === $clause_b || !$clause_b->reconcilable || $clause_b->wedge) {\n                    continue;\n                }\n\n                if (isset($clause_b->possibilities[$clause_var]) &&\n                    in_array($negated_clause_type, $clause_b->possibilities[$clause_var], true)\n                ) {\n                    $clause_b->possibilities[$clause_var] = array_filter(\n                        $clause_b->possibilities[$clause_var],\n                        /**\n                         * @param string $possible_type\n                         *\n                         * @return bool\n                         */\n                        function ($possible_type) use ($negated_clause_type) {\n                            return $possible_type !== $negated_clause_type;\n                        }\n                    );\n\n                    if (count($clause_b->possibilities[$clause_var]) === 0) {\n                        unset($clause_b->possibilities[$clause_var]);\n                        $clause_b->impossibilities = null;\n                    }\n                }\n            }\n        }\n\n        $deduped_clauses = [];\n\n        // avoid strict duplicates\n        foreach ($cloned_clauses as $clause) {\n            $deduped_clauses[$clause->getHash()] = clone $clause;\n        }\n\n        $deduped_clauses = array_filter(\n            $deduped_clauses,\n            /**\n             * @return bool\n             */\n            function (Clause $clause) {\n                return count($clause->possibilities) || $clause->wedge;\n            }\n        );\n\n        $simplified_clauses = [];\n\n        foreach ($deduped_clauses as $clause_a) {\n            $is_redundant = false;\n\n            foreach ($deduped_clauses as $clause_b) {\n                if ($clause_a === $clause_b\n                    || !$clause_b->reconcilable\n                    || $clause_b->wedge\n                    || $clause_a->wedge\n                ) {\n                    continue;\n                }\n\n                if ($clause_a->contains($clause_b)) {\n                    $is_redundant = true;\n                    break;\n                }\n            }\n\n            if (!$is_redundant) {\n                $simplified_clauses[] = $clause_a;\n            }\n        }\n\n        return $simplified_clauses;\n    }", "code_tokens": ["public", "static", "function", "simplifyCNF", "(", "array", "$", "clauses", ")", "{", "$", "cloned_clauses", "=", "[", "]", ";", "foreach", "(", "$", "clauses", "as", "$", "clause", ")", "{", "$", "unique_clause", "=", "clone", "$", "clause", ";", "foreach", "(", "$", "unique_clause", "->", "possibilities", "as", "$", "var_id", "=>", "$", "possibilities", ")", "{", "if", "(", "count", "(", "$", "possibilities", ")", ")", "{", "$", "unique_clause", "->", "possibilities", "[", "$", "var_id", "]", "=", "array_unique", "(", "$", "possibilities", ")", ";", "}", "}", "$", "cloned_clauses", "[", "$", "clause", "->", "getHash", "(", ")", "]", "=", "$", "unique_clause", ";", "}", "foreach", "(", "$", "cloned_clauses", "as", "$", "clause_a", ")", "{", "if", "(", "count", "(", "$", "clause_a", "->", "possibilities", ")", "!==", "1", "||", "count", "(", "array_values", "(", "$", "clause_a", "->", "possibilities", ")", "[", "0", "]", ")", "!==", "1", ")", "{", "continue", ";", "}", "if", "(", "!", "$", "clause_a", "->", "reconcilable", "||", "$", "clause_a", "->", "wedge", ")", "{", "continue", ";", "}", "$", "clause_var", "=", "array_keys", "(", "$", "clause_a", "->", "possibilities", ")", "[", "0", "]", ";", "$", "only_type", "=", "array_pop", "(", "array_values", "(", "$", "clause_a", "->", "possibilities", ")", "[", "0", "]", ")", ";", "$", "negated_clause_type", "=", "self", "::", "negateType", "(", "$", "only_type", ")", ";", "foreach", "(", "$", "cloned_clauses", "as", "$", "clause_b", ")", "{", "if", "(", "$", "clause_a", "===", "$", "clause_b", "||", "!", "$", "clause_b", "->", "reconcilable", "||", "$", "clause_b", "->", "wedge", ")", "{", "continue", ";", "}", "if", "(", "isset", "(", "$", "clause_b", "->", "possibilities", "[", "$", "clause_var", "]", ")", "&&", "in_array", "(", "$", "negated_clause_type", ",", "$", "clause_b", "->", "possibilities", "[", "$", "clause_var", "]", ",", "true", ")", ")", "{", "$", "clause_b", "->", "possibilities", "[", "$", "clause_var", "]", "=", "array_filter", "(", "$", "clause_b", "->", "possibilities", "[", "$", "clause_var", "]", ",", "function", "(", "$", "possible_type", ")", "use", "(", "$", "negated_clause_type", ")", "{", "return", "$", "possible_type", "!==", "$", "negated_clause_type", ";", "}", ")", ";", "if", "(", "count", "(", "$", "clause_b", "->", "possibilities", "[", "$", "clause_var", "]", ")", "===", "0", ")", "{", "unset", "(", "$", "clause_b", "->", "possibilities", "[", "$", "clause_var", "]", ")", ";", "$", "clause_b", "->", "impossibilities", "=", "null", ";", "}", "}", "}", "}", "$", "deduped_clauses", "=", "[", "]", ";", "foreach", "(", "$", "cloned_clauses", "as", "$", "clause", ")", "{", "$", "deduped_clauses", "[", "$", "clause", "->", "getHash", "(", ")", "]", "=", "clone", "$", "clause", ";", "}", "$", "deduped_clauses", "=", "array_filter", "(", "$", "deduped_clauses", ",", "function", "(", "Clause", "$", "clause", ")", "{", "return", "count", "(", "$", "clause", "->", "possibilities", ")", "||", "$", "clause", "->", "wedge", ";", "}", ")", ";", "$", "simplified_clauses", "=", "[", "]", ";", "foreach", "(", "$", "deduped_clauses", "as", "$", "clause_a", ")", "{", "$", "is_redundant", "=", "false", ";", "foreach", "(", "$", "deduped_clauses", "as", "$", "clause_b", ")", "{", "if", "(", "$", "clause_a", "===", "$", "clause_b", "||", "!", "$", "clause_b", "->", "reconcilable", "||", "$", "clause_b", "->", "wedge", "||", "$", "clause_a", "->", "wedge", ")", "{", "continue", ";", "}", "if", "(", "$", "clause_a", "->", "contains", "(", "$", "clause_b", ")", ")", "{", "$", "is_redundant", "=", "true", ";", "break", ";", "}", "}", "if", "(", "!", "$", "is_redundant", ")", "{", "$", "simplified_clauses", "[", "]", "=", "$", "clause_a", ";", "}", "}", "return", "$", "simplified_clauses", ";", "}"], "docstring": "This is a very simple simplification heuristic\nfor CNF formulae.\n\nIt simplifies formulae:\n($a) && ($a || $b) => $a\n(!$a) && (!$b) && ($a || $b || $c) => $c\n\n@param  array<int, Clause>  $clauses\n\n@return array<int, Clause>", "docstring_tokens": ["This", "is", "a", "very", "simple", "simplification", "heuristic", "for", "CNF", "formulae", "."], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Type/Algebra.php#L222-L322", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Type/Algebra.php", "func_name": "Algebra.getTruthsFromFormula", "original_string": "public static function getTruthsFromFormula(\n        array $clauses,\n        array &$cond_referenced_var_ids = []\n    ) {\n        $truths = [];\n\n        if (empty($clauses)) {\n            return [];\n        }\n\n        foreach ($clauses as $clause) {\n            if (!$clause->reconcilable) {\n                continue;\n            }\n\n            foreach ($clause->possibilities as $var => $possible_types) {\n                // if there's only one possible type, return it\n                if (count($clause->possibilities) === 1 && count($possible_types) === 1) {\n                    if (isset($truths[$var])) {\n                        $truths[$var][] = [array_pop($possible_types)];\n                    } else {\n                        $truths[$var] = [[array_pop($possible_types)]];\n                    }\n                } elseif (count($clause->possibilities) === 1) {\n                    // if there's only one active clause, return all the non-negation clause members ORed together\n                    $things_that_can_be_said = array_filter(\n                        $possible_types,\n                        /**\n                         * @param  string $possible_type\n                         *\n                         * @return bool\n                         *\n                         * @psalm-suppress MixedOperand\n                         */\n                        function ($possible_type) {\n                            return $possible_type[0] !== '!';\n                        }\n                    );\n\n                    if ($things_that_can_be_said && count($things_that_can_be_said) === count($possible_types)) {\n                        $things_that_can_be_said = array_unique($things_that_can_be_said);\n\n                        if ($clause->generated && count($possible_types) > 1) {\n                            unset($cond_referenced_var_ids[$var]);\n                        }\n\n                        /** @var array<int, string> $things_that_can_be_said */\n                        $truths[$var] = [$things_that_can_be_said];\n                    }\n                }\n            }\n        }\n\n        return $truths;\n    }", "language": "php", "code": "public static function getTruthsFromFormula(\n        array $clauses,\n        array &$cond_referenced_var_ids = []\n    ) {\n        $truths = [];\n\n        if (empty($clauses)) {\n            return [];\n        }\n\n        foreach ($clauses as $clause) {\n            if (!$clause->reconcilable) {\n                continue;\n            }\n\n            foreach ($clause->possibilities as $var => $possible_types) {\n                // if there's only one possible type, return it\n                if (count($clause->possibilities) === 1 && count($possible_types) === 1) {\n                    if (isset($truths[$var])) {\n                        $truths[$var][] = [array_pop($possible_types)];\n                    } else {\n                        $truths[$var] = [[array_pop($possible_types)]];\n                    }\n                } elseif (count($clause->possibilities) === 1) {\n                    // if there's only one active clause, return all the non-negation clause members ORed together\n                    $things_that_can_be_said = array_filter(\n                        $possible_types,\n                        /**\n                         * @param  string $possible_type\n                         *\n                         * @return bool\n                         *\n                         * @psalm-suppress MixedOperand\n                         */\n                        function ($possible_type) {\n                            return $possible_type[0] !== '!';\n                        }\n                    );\n\n                    if ($things_that_can_be_said && count($things_that_can_be_said) === count($possible_types)) {\n                        $things_that_can_be_said = array_unique($things_that_can_be_said);\n\n                        if ($clause->generated && count($possible_types) > 1) {\n                            unset($cond_referenced_var_ids[$var]);\n                        }\n\n                        /** @var array<int, string> $things_that_can_be_said */\n                        $truths[$var] = [$things_that_can_be_said];\n                    }\n                }\n            }\n        }\n\n        return $truths;\n    }", "code_tokens": ["public", "static", "function", "getTruthsFromFormula", "(", "array", "$", "clauses", ",", "array", "&", "$", "cond_referenced_var_ids", "=", "[", "]", ")", "{", "$", "truths", "=", "[", "]", ";", "if", "(", "empty", "(", "$", "clauses", ")", ")", "{", "return", "[", "]", ";", "}", "foreach", "(", "$", "clauses", "as", "$", "clause", ")", "{", "if", "(", "!", "$", "clause", "->", "reconcilable", ")", "{", "continue", ";", "}", "foreach", "(", "$", "clause", "->", "possibilities", "as", "$", "var", "=>", "$", "possible_types", ")", "{", "if", "(", "count", "(", "$", "clause", "->", "possibilities", ")", "===", "1", "&&", "count", "(", "$", "possible_types", ")", "===", "1", ")", "{", "if", "(", "isset", "(", "$", "truths", "[", "$", "var", "]", ")", ")", "{", "$", "truths", "[", "$", "var", "]", "[", "]", "=", "[", "array_pop", "(", "$", "possible_types", ")", "]", ";", "}", "else", "{", "$", "truths", "[", "$", "var", "]", "=", "[", "[", "array_pop", "(", "$", "possible_types", ")", "]", "]", ";", "}", "}", "elseif", "(", "count", "(", "$", "clause", "->", "possibilities", ")", "===", "1", ")", "{", "$", "things_that_can_be_said", "=", "array_filter", "(", "$", "possible_types", ",", "function", "(", "$", "possible_type", ")", "{", "return", "$", "possible_type", "[", "0", "]", "!==", "'!'", ";", "}", ")", ";", "if", "(", "$", "things_that_can_be_said", "&&", "count", "(", "$", "things_that_can_be_said", ")", "===", "count", "(", "$", "possible_types", ")", ")", "{", "$", "things_that_can_be_said", "=", "array_unique", "(", "$", "things_that_can_be_said", ")", ";", "if", "(", "$", "clause", "->", "generated", "&&", "count", "(", "$", "possible_types", ")", ">", "1", ")", "{", "unset", "(", "$", "cond_referenced_var_ids", "[", "$", "var", "]", ")", ";", "}", "$", "truths", "[", "$", "var", "]", "=", "[", "$", "things_that_can_be_said", "]", ";", "}", "}", "}", "}", "return", "$", "truths", ";", "}"], "docstring": "Look for clauses with only one possible value\n\n@param  array<int, Clause>  $clauses\n@param  array<string, bool> $cond_referenced_var_ids\n\n@return array<string, array<int, array<int, string>>>", "docstring_tokens": ["Look", "for", "clauses", "with", "only", "one", "possible", "value"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Type/Algebra.php#L332-L386", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/LanguageServer/Client/TextDocument.php", "func_name": "TextDocument.publishDiagnostics", "original_string": "public function publishDiagnostics(string $uri, array $diagnostics): Promise\n    {\n        return $this->handler->notify('textDocument/publishDiagnostics', [\n            'uri' => $uri,\n            'diagnostics' => $diagnostics\n        ]);\n    }", "language": "php", "code": "public function publishDiagnostics(string $uri, array $diagnostics): Promise\n    {\n        return $this->handler->notify('textDocument/publishDiagnostics', [\n            'uri' => $uri,\n            'diagnostics' => $diagnostics\n        ]);\n    }", "code_tokens": ["public", "function", "publishDiagnostics", "(", "string", "$", "uri", ",", "array", "$", "diagnostics", ")", ":", "Promise", "{", "return", "$", "this", "->", "handler", "->", "notify", "(", "'textDocument/publishDiagnostics'", ",", "[", "'uri'", "=>", "$", "uri", ",", "'diagnostics'", "=>", "$", "diagnostics", "]", ")", ";", "}"], "docstring": "Diagnostics notification are sent from the server to the client to signal results of validation runs.\n\n@param string $uri\n@param Diagnostic[] $diagnostics\n@return Promise <void>", "docstring_tokens": ["Diagnostics", "notification", "are", "sent", "from", "the", "server", "to", "the", "client", "to", "signal", "results", "of", "validation", "runs", "."], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/LanguageServer/Client/TextDocument.php#L40-L46", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/LanguageServer/Client/TextDocument.php", "func_name": "TextDocument.xcontent", "original_string": "public function xcontent(TextDocumentIdentifier $textDocument): Promise\n    {\n        return call(\n            /**\n             * @return \\Generator<int, mixed, mixed, TextDocumentItem>\n             */\n            function () use ($textDocument) {\n                $result = yield $this->handler->request(\n                    'textDocument/xcontent',\n                    ['textDocument' => $textDocument]\n                );\n\n                /** @var TextDocumentItem */\n                return $this->mapper->map($result, new TextDocumentItem);\n            }\n        );\n    }", "language": "php", "code": "public function xcontent(TextDocumentIdentifier $textDocument): Promise\n    {\n        return call(\n            /**\n             * @return \\Generator<int, mixed, mixed, TextDocumentItem>\n             */\n            function () use ($textDocument) {\n                $result = yield $this->handler->request(\n                    'textDocument/xcontent',\n                    ['textDocument' => $textDocument]\n                );\n\n                /** @var TextDocumentItem */\n                return $this->mapper->map($result, new TextDocumentItem);\n            }\n        );\n    }", "code_tokens": ["public", "function", "xcontent", "(", "TextDocumentIdentifier", "$", "textDocument", ")", ":", "Promise", "{", "return", "call", "(", "function", "(", ")", "use", "(", "$", "textDocument", ")", "{", "$", "result", "=", "yield", "$", "this", "->", "handler", "->", "request", "(", "'textDocument/xcontent'", ",", "[", "'textDocument'", "=>", "$", "textDocument", "]", ")", ";", "return", "$", "this", "->", "mapper", "->", "map", "(", "$", "result", ",", "new", "TextDocumentItem", ")", ";", "}", ")", ";", "}"], "docstring": "The content request is sent from a server to a client\nto request the current content of a text document identified by the URI\n\n@param TextDocumentIdentifier $textDocument The document to get the content for\n@return Promise<TextDocumentItem> The document's current content", "docstring_tokens": ["The", "content", "request", "is", "sent", "from", "a", "server", "to", "a", "client", "to", "request", "the", "current", "content", "of", "a", "text", "document", "identified", "by", "the", "URI"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/LanguageServer/Client/TextDocument.php#L55-L71", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/Analyzer/StatementsAnalyzer.php", "func_name": "StatementsAnalyzer.getFirstAppearance", "original_string": "public function getFirstAppearance($var_id)\n    {\n        return isset($this->all_vars[$var_id]) ? $this->all_vars[$var_id] : null;\n    }", "language": "php", "code": "public function getFirstAppearance($var_id)\n    {\n        return isset($this->all_vars[$var_id]) ? $this->all_vars[$var_id] : null;\n    }", "code_tokens": ["public", "function", "getFirstAppearance", "(", "$", "var_id", ")", "{", "return", "isset", "(", "$", "this", "->", "all_vars", "[", "$", "var_id", "]", ")", "?", "$", "this", "->", "all_vars", "[", "$", "var_id", "]", ":", "null", ";", "}"], "docstring": "The first appearance of the variable in this set of statements being evaluated\n\n@param  string  $var_id\n\n@return CodeLocation|null", "docstring_tokens": ["The", "first", "appearance", "of", "the", "variable", "in", "this", "set", "of", "statements", "being", "evaluated"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/Analyzer/StatementsAnalyzer.php#L1593-L1596", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/Codebase/Properties.php", "func_name": "Properties.propertyExists", "original_string": "public function propertyExists(\n        string $property_id,\n        bool $read_mode,\n        StatementsSource $source = null,\n        Context $context = null,\n        CodeLocation $code_location = null\n    ) {\n        // remove trailing backslash if it exists\n        $property_id = preg_replace('/^\\\\\\\\/', '', $property_id);\n\n        list($fq_class_name, $property_name) = explode('::$', $property_id);\n\n        if ($this->property_existence_provider->has($fq_class_name)) {\n            $property_exists = $this->property_existence_provider->doesPropertyExist(\n                $fq_class_name,\n                $property_name,\n                $read_mode,\n                $source,\n                $context,\n                $code_location\n            );\n\n            if ($property_exists !== null) {\n                return $property_exists;\n            }\n        }\n\n        $class_storage = $this->classlike_storage_provider->get($fq_class_name);\n\n        if (isset($class_storage->declaring_property_ids[$property_name])) {\n            $declaring_property_class = $class_storage->declaring_property_ids[$property_name];\n\n            if ($context && $context->calling_method_id) {\n                $this->file_reference_provider->addMethodReferenceToClassMember(\n                    $context->calling_method_id,\n                    strtolower($declaring_property_class) . '::$' . $property_name\n                );\n            } elseif ($source) {\n                $this->file_reference_provider->addFileReferenceToClassMember(\n                    $source->getFilePath(),\n                    strtolower($declaring_property_class) . '::$' . $property_name\n                );\n            }\n\n            if ($this->collect_locations && $code_location) {\n                $this->file_reference_provider->addCallingLocationForClassProperty(\n                    $code_location,\n                    strtolower($declaring_property_class) . '::$' . $property_name\n                );\n            }\n\n            return true;\n        }\n\n        if ($context && $context->calling_method_id) {\n            $this->file_reference_provider->addMethodReferenceToMissingClassMember(\n                $context->calling_method_id,\n                strtolower($fq_class_name) . '::$' . $property_name\n            );\n        } elseif ($source) {\n            $this->file_reference_provider->addFileReferenceToMissingClassMember(\n                $source->getFilePath(),\n                strtolower($fq_class_name) . '::$' . $property_name\n            );\n        }\n\n        return false;\n    }", "language": "php", "code": "public function propertyExists(\n        string $property_id,\n        bool $read_mode,\n        StatementsSource $source = null,\n        Context $context = null,\n        CodeLocation $code_location = null\n    ) {\n        // remove trailing backslash if it exists\n        $property_id = preg_replace('/^\\\\\\\\/', '', $property_id);\n\n        list($fq_class_name, $property_name) = explode('::$', $property_id);\n\n        if ($this->property_existence_provider->has($fq_class_name)) {\n            $property_exists = $this->property_existence_provider->doesPropertyExist(\n                $fq_class_name,\n                $property_name,\n                $read_mode,\n                $source,\n                $context,\n                $code_location\n            );\n\n            if ($property_exists !== null) {\n                return $property_exists;\n            }\n        }\n\n        $class_storage = $this->classlike_storage_provider->get($fq_class_name);\n\n        if (isset($class_storage->declaring_property_ids[$property_name])) {\n            $declaring_property_class = $class_storage->declaring_property_ids[$property_name];\n\n            if ($context && $context->calling_method_id) {\n                $this->file_reference_provider->addMethodReferenceToClassMember(\n                    $context->calling_method_id,\n                    strtolower($declaring_property_class) . '::$' . $property_name\n                );\n            } elseif ($source) {\n                $this->file_reference_provider->addFileReferenceToClassMember(\n                    $source->getFilePath(),\n                    strtolower($declaring_property_class) . '::$' . $property_name\n                );\n            }\n\n            if ($this->collect_locations && $code_location) {\n                $this->file_reference_provider->addCallingLocationForClassProperty(\n                    $code_location,\n                    strtolower($declaring_property_class) . '::$' . $property_name\n                );\n            }\n\n            return true;\n        }\n\n        if ($context && $context->calling_method_id) {\n            $this->file_reference_provider->addMethodReferenceToMissingClassMember(\n                $context->calling_method_id,\n                strtolower($fq_class_name) . '::$' . $property_name\n            );\n        } elseif ($source) {\n            $this->file_reference_provider->addFileReferenceToMissingClassMember(\n                $source->getFilePath(),\n                strtolower($fq_class_name) . '::$' . $property_name\n            );\n        }\n\n        return false;\n    }", "code_tokens": ["public", "function", "propertyExists", "(", "string", "$", "property_id", ",", "bool", "$", "read_mode", ",", "StatementsSource", "$", "source", "=", "null", ",", "Context", "$", "context", "=", "null", ",", "CodeLocation", "$", "code_location", "=", "null", ")", "{", "$", "property_id", "=", "preg_replace", "(", "'/^\\\\\\\\/'", ",", "''", ",", "$", "property_id", ")", ";", "list", "(", "$", "fq_class_name", ",", "$", "property_name", ")", "=", "explode", "(", "'::$'", ",", "$", "property_id", ")", ";", "if", "(", "$", "this", "->", "property_existence_provider", "->", "has", "(", "$", "fq_class_name", ")", ")", "{", "$", "property_exists", "=", "$", "this", "->", "property_existence_provider", "->", "doesPropertyExist", "(", "$", "fq_class_name", ",", "$", "property_name", ",", "$", "read_mode", ",", "$", "source", ",", "$", "context", ",", "$", "code_location", ")", ";", "if", "(", "$", "property_exists", "!==", "null", ")", "{", "return", "$", "property_exists", ";", "}", "}", "$", "class_storage", "=", "$", "this", "->", "classlike_storage_provider", "->", "get", "(", "$", "fq_class_name", ")", ";", "if", "(", "isset", "(", "$", "class_storage", "->", "declaring_property_ids", "[", "$", "property_name", "]", ")", ")", "{", "$", "declaring_property_class", "=", "$", "class_storage", "->", "declaring_property_ids", "[", "$", "property_name", "]", ";", "if", "(", "$", "context", "&&", "$", "context", "->", "calling_method_id", ")", "{", "$", "this", "->", "file_reference_provider", "->", "addMethodReferenceToClassMember", "(", "$", "context", "->", "calling_method_id", ",", "strtolower", "(", "$", "declaring_property_class", ")", ".", "'::$'", ".", "$", "property_name", ")", ";", "}", "elseif", "(", "$", "source", ")", "{", "$", "this", "->", "file_reference_provider", "->", "addFileReferenceToClassMember", "(", "$", "source", "->", "getFilePath", "(", ")", ",", "strtolower", "(", "$", "declaring_property_class", ")", ".", "'::$'", ".", "$", "property_name", ")", ";", "}", "if", "(", "$", "this", "->", "collect_locations", "&&", "$", "code_location", ")", "{", "$", "this", "->", "file_reference_provider", "->", "addCallingLocationForClassProperty", "(", "$", "code_location", ",", "strtolower", "(", "$", "declaring_property_class", ")", ".", "'::$'", ".", "$", "property_name", ")", ";", "}", "return", "true", ";", "}", "if", "(", "$", "context", "&&", "$", "context", "->", "calling_method_id", ")", "{", "$", "this", "->", "file_reference_provider", "->", "addMethodReferenceToMissingClassMember", "(", "$", "context", "->", "calling_method_id", ",", "strtolower", "(", "$", "fq_class_name", ")", ".", "'::$'", ".", "$", "property_name", ")", ";", "}", "elseif", "(", "$", "source", ")", "{", "$", "this", "->", "file_reference_provider", "->", "addFileReferenceToMissingClassMember", "(", "$", "source", "->", "getFilePath", "(", ")", ",", "strtolower", "(", "$", "fq_class_name", ")", ".", "'::$'", ".", "$", "property_name", ")", ";", "}", "return", "false", ";", "}"], "docstring": "Whether or not a given property exists\n\n@return bool", "docstring_tokens": ["Whether", "or", "not", "a", "given", "property", "exists"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/Codebase/Properties.php#L69-L136", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Context.php", "func_name": "Context.update", "original_string": "public function update(\n        Context $start_context,\n        Context $end_context,\n        $has_leaving_statements,\n        array $vars_to_update,\n        array &$updated_vars\n    ) {\n        foreach ($start_context->vars_in_scope as $var_id => $old_type) {\n            // this is only true if there was some sort of type negation\n            if (in_array($var_id, $vars_to_update, true)) {\n                // if we're leaving, we're effectively deleting the possibility of the if types\n                $new_type = !$has_leaving_statements && $end_context->hasVariable($var_id)\n                    ? $end_context->vars_in_scope[$var_id]\n                    : null;\n\n                $existing_type = isset($this->vars_in_scope[$var_id]) ? $this->vars_in_scope[$var_id] : null;\n\n                if (!$existing_type) {\n                    if ($new_type) {\n                        $this->vars_in_scope[$var_id] = clone $new_type;\n                        $updated_vars[$var_id] = true;\n                    }\n\n                    continue;\n                }\n\n                // if the type changed within the block of statements, process the replacement\n                // also never allow ourselves to remove all types from a union\n                if ((!$new_type || !$old_type->equals($new_type))\n                    && ($new_type || count($existing_type->getTypes()) > 1)\n                ) {\n                    $existing_type->substitute($old_type, $new_type);\n\n                    if ($new_type && $new_type->from_docblock) {\n                        $existing_type->setFromDocblock();\n                    }\n\n                    $updated_vars[$var_id] = true;\n                }\n            }\n        }\n    }", "language": "php", "code": "public function update(\n        Context $start_context,\n        Context $end_context,\n        $has_leaving_statements,\n        array $vars_to_update,\n        array &$updated_vars\n    ) {\n        foreach ($start_context->vars_in_scope as $var_id => $old_type) {\n            // this is only true if there was some sort of type negation\n            if (in_array($var_id, $vars_to_update, true)) {\n                // if we're leaving, we're effectively deleting the possibility of the if types\n                $new_type = !$has_leaving_statements && $end_context->hasVariable($var_id)\n                    ? $end_context->vars_in_scope[$var_id]\n                    : null;\n\n                $existing_type = isset($this->vars_in_scope[$var_id]) ? $this->vars_in_scope[$var_id] : null;\n\n                if (!$existing_type) {\n                    if ($new_type) {\n                        $this->vars_in_scope[$var_id] = clone $new_type;\n                        $updated_vars[$var_id] = true;\n                    }\n\n                    continue;\n                }\n\n                // if the type changed within the block of statements, process the replacement\n                // also never allow ourselves to remove all types from a union\n                if ((!$new_type || !$old_type->equals($new_type))\n                    && ($new_type || count($existing_type->getTypes()) > 1)\n                ) {\n                    $existing_type->substitute($old_type, $new_type);\n\n                    if ($new_type && $new_type->from_docblock) {\n                        $existing_type->setFromDocblock();\n                    }\n\n                    $updated_vars[$var_id] = true;\n                }\n            }\n        }\n    }", "code_tokens": ["public", "function", "update", "(", "Context", "$", "start_context", ",", "Context", "$", "end_context", ",", "$", "has_leaving_statements", ",", "array", "$", "vars_to_update", ",", "array", "&", "$", "updated_vars", ")", "{", "foreach", "(", "$", "start_context", "->", "vars_in_scope", "as", "$", "var_id", "=>", "$", "old_type", ")", "{", "if", "(", "in_array", "(", "$", "var_id", ",", "$", "vars_to_update", ",", "true", ")", ")", "{", "$", "new_type", "=", "!", "$", "has_leaving_statements", "&&", "$", "end_context", "->", "hasVariable", "(", "$", "var_id", ")", "?", "$", "end_context", "->", "vars_in_scope", "[", "$", "var_id", "]", ":", "null", ";", "$", "existing_type", "=", "isset", "(", "$", "this", "->", "vars_in_scope", "[", "$", "var_id", "]", ")", "?", "$", "this", "->", "vars_in_scope", "[", "$", "var_id", "]", ":", "null", ";", "if", "(", "!", "$", "existing_type", ")", "{", "if", "(", "$", "new_type", ")", "{", "$", "this", "->", "vars_in_scope", "[", "$", "var_id", "]", "=", "clone", "$", "new_type", ";", "$", "updated_vars", "[", "$", "var_id", "]", "=", "true", ";", "}", "continue", ";", "}", "if", "(", "(", "!", "$", "new_type", "||", "!", "$", "old_type", "->", "equals", "(", "$", "new_type", ")", ")", "&&", "(", "$", "new_type", "||", "count", "(", "$", "existing_type", "->", "getTypes", "(", ")", ")", ">", "1", ")", ")", "{", "$", "existing_type", "->", "substitute", "(", "$", "old_type", ",", "$", "new_type", ")", ";", "if", "(", "$", "new_type", "&&", "$", "new_type", "->", "from_docblock", ")", "{", "$", "existing_type", "->", "setFromDocblock", "(", ")", ";", "}", "$", "updated_vars", "[", "$", "var_id", "]", "=", "true", ";", "}", "}", "}", "}"], "docstring": "Updates the parent context, looking at the changes within a block and then applying those changes, where\nnecessary, to the parent context\n\n@param  Context     $start_context\n@param  Context     $end_context\n@param  bool        $has_leaving_statements   whether or not the parent scope is abandoned between\n$start_context and $end_context\n@param  array       $vars_to_update\n@param  array       $updated_vars\n\n@return void", "docstring_tokens": ["Updates", "the", "parent", "context", "looking", "at", "the", "changes", "within", "a", "block", "and", "then", "applying", "those", "changes", "where", "necessary", "to", "the", "parent", "context"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Context.php#L328-L369", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Config.php", "func_name": "Config.getConfigForPath", "original_string": "public static function getConfigForPath($path, $base_dir, $output_format)\n    {\n        $config_path = self::locateConfigFile($path);\n\n        if (!$config_path) {\n            if ($output_format === ProjectAnalyzer::TYPE_CONSOLE) {\n                exit(\n                    'Could not locate a config XML file in path ' . $path . '. Have you run \\'psalm --init\\' ?' .\n                    PHP_EOL\n                );\n            }\n            throw new ConfigException('Config not found for path ' . $path);\n        }\n\n        return self::loadFromXMLFile($config_path, $base_dir);\n    }", "language": "php", "code": "public static function getConfigForPath($path, $base_dir, $output_format)\n    {\n        $config_path = self::locateConfigFile($path);\n\n        if (!$config_path) {\n            if ($output_format === ProjectAnalyzer::TYPE_CONSOLE) {\n                exit(\n                    'Could not locate a config XML file in path ' . $path . '. Have you run \\'psalm --init\\' ?' .\n                    PHP_EOL\n                );\n            }\n            throw new ConfigException('Config not found for path ' . $path);\n        }\n\n        return self::loadFromXMLFile($config_path, $base_dir);\n    }", "code_tokens": ["public", "static", "function", "getConfigForPath", "(", "$", "path", ",", "$", "base_dir", ",", "$", "output_format", ")", "{", "$", "config_path", "=", "self", "::", "locateConfigFile", "(", "$", "path", ")", ";", "if", "(", "!", "$", "config_path", ")", "{", "if", "(", "$", "output_format", "===", "ProjectAnalyzer", "::", "TYPE_CONSOLE", ")", "{", "exit", "(", "'Could not locate a config XML file in path '", ".", "$", "path", ".", "'. Have you run \\'psalm --init\\' ?'", ".", "PHP_EOL", ")", ";", "}", "throw", "new", "ConfigException", "(", "'Config not found for path '", ".", "$", "path", ")", ";", "}", "return", "self", "::", "loadFromXMLFile", "(", "$", "config_path", ",", "$", "base_dir", ")", ";", "}"], "docstring": "Gets a Config object from an XML file.\n\nSearches up a folder hierarchy for the most immediate config.\n\n@param  string $path\n@param  string $base_dir\n@param  string $output_format\n\n@throws ConfigException if a config path is not found\n\n@return Config\n@psalm-suppress MixedArgument", "docstring_tokens": ["Gets", "a", "Config", "object", "from", "an", "XML", "file", "."], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Config.php#L417-L432", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Config.php", "func_name": "Config.locateConfigFile", "original_string": "public static function locateConfigFile(string $path)\n    {\n        $dir_path = realpath($path);\n\n        if ($dir_path === false) {\n            throw new ConfigException('Config not found for path ' . $path);\n        }\n\n        if (!is_dir($dir_path)) {\n            $dir_path = dirname($dir_path);\n        }\n\n        do {\n            $maybe_path = $dir_path . DIRECTORY_SEPARATOR . Config::DEFAULT_FILE_NAME;\n\n            if (file_exists($maybe_path) || file_exists($maybe_path .= '.dist')) {\n                return $maybe_path;\n            }\n\n            $dir_path = dirname($dir_path);\n        } while (dirname($dir_path) !== $dir_path);\n        return null;\n    }", "language": "php", "code": "public static function locateConfigFile(string $path)\n    {\n        $dir_path = realpath($path);\n\n        if ($dir_path === false) {\n            throw new ConfigException('Config not found for path ' . $path);\n        }\n\n        if (!is_dir($dir_path)) {\n            $dir_path = dirname($dir_path);\n        }\n\n        do {\n            $maybe_path = $dir_path . DIRECTORY_SEPARATOR . Config::DEFAULT_FILE_NAME;\n\n            if (file_exists($maybe_path) || file_exists($maybe_path .= '.dist')) {\n                return $maybe_path;\n            }\n\n            $dir_path = dirname($dir_path);\n        } while (dirname($dir_path) !== $dir_path);\n        return null;\n    }", "code_tokens": ["public", "static", "function", "locateConfigFile", "(", "string", "$", "path", ")", "{", "$", "dir_path", "=", "realpath", "(", "$", "path", ")", ";", "if", "(", "$", "dir_path", "===", "false", ")", "{", "throw", "new", "ConfigException", "(", "'Config not found for path '", ".", "$", "path", ")", ";", "}", "if", "(", "!", "is_dir", "(", "$", "dir_path", ")", ")", "{", "$", "dir_path", "=", "dirname", "(", "$", "dir_path", ")", ";", "}", "do", "{", "$", "maybe_path", "=", "$", "dir_path", ".", "DIRECTORY_SEPARATOR", ".", "Config", "::", "DEFAULT_FILE_NAME", ";", "if", "(", "file_exists", "(", "$", "maybe_path", ")", "||", "file_exists", "(", "$", "maybe_path", ".=", "'.dist'", ")", ")", "{", "return", "$", "maybe_path", ";", "}", "$", "dir_path", "=", "dirname", "(", "$", "dir_path", ")", ";", "}", "while", "(", "dirname", "(", "$", "dir_path", ")", "!==", "$", "dir_path", ")", ";", "return", "null", ";", "}"], "docstring": "Searches up a folder hierarchy for the most immediate config.\n\n@throws ConfigException\n@return ?string", "docstring_tokens": ["Searches", "up", "a", "folder", "hierarchy", "for", "the", "most", "immediate", "config", "."], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Config.php#L440-L462", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Config.php", "func_name": "Config.loadFromXMLFile", "original_string": "public static function loadFromXMLFile($file_path, $base_dir)\n    {\n        $file_contents = file_get_contents($file_path);\n\n        if ($file_contents === false) {\n            throw new \\InvalidArgumentException('Cannot open ' . $file_path);\n        }\n\n        try {\n            $config = self::loadFromXML($base_dir, $file_contents);\n            $config->hash = sha1($file_contents);\n        } catch (ConfigException $e) {\n            throw new ConfigException(\n                'Problem parsing ' . $file_path . \":\\n\" . '  ' . $e->getMessage()\n            );\n        }\n\n        return $config;\n    }", "language": "php", "code": "public static function loadFromXMLFile($file_path, $base_dir)\n    {\n        $file_contents = file_get_contents($file_path);\n\n        if ($file_contents === false) {\n            throw new \\InvalidArgumentException('Cannot open ' . $file_path);\n        }\n\n        try {\n            $config = self::loadFromXML($base_dir, $file_contents);\n            $config->hash = sha1($file_contents);\n        } catch (ConfigException $e) {\n            throw new ConfigException(\n                'Problem parsing ' . $file_path . \":\\n\" . '  ' . $e->getMessage()\n            );\n        }\n\n        return $config;\n    }", "code_tokens": ["public", "static", "function", "loadFromXMLFile", "(", "$", "file_path", ",", "$", "base_dir", ")", "{", "$", "file_contents", "=", "file_get_contents", "(", "$", "file_path", ")", ";", "if", "(", "$", "file_contents", "===", "false", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "'Cannot open '", ".", "$", "file_path", ")", ";", "}", "try", "{", "$", "config", "=", "self", "::", "loadFromXML", "(", "$", "base_dir", ",", "$", "file_contents", ")", ";", "$", "config", "->", "hash", "=", "sha1", "(", "$", "file_contents", ")", ";", "}", "catch", "(", "ConfigException", "$", "e", ")", "{", "throw", "new", "ConfigException", "(", "'Problem parsing '", ".", "$", "file_path", ".", "\":\\n\"", ".", "'  '", ".", "$", "e", "->", "getMessage", "(", ")", ")", ";", "}", "return", "$", "config", ";", "}"], "docstring": "Creates a new config object from the file\n\n@param  string           $file_path\n@param  string           $base_dir\n\n@return self", "docstring_tokens": ["Creates", "a", "new", "config", "object", "from", "the", "file"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Config.php#L472-L490", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/Diff/FileDiffer.php", "func_name": "FileDiffer.coalesceReplacements", "original_string": "private static function coalesceReplacements(array $diff)\n    {\n        $newDiff = [];\n        $c = \\count($diff);\n        for ($i = 0; $i < $c; $i++) {\n            $diffType = $diff[$i]->type;\n            if ($diffType !== DiffElem::TYPE_REMOVE) {\n                $newDiff[] = $diff[$i];\n                continue;\n            }\n\n            $j = $i;\n            while ($j < $c && $diff[$j]->type === DiffElem::TYPE_REMOVE) {\n                $j++;\n            }\n\n            $k = $j;\n            while ($k < $c && $diff[$k]->type === DiffElem::TYPE_ADD) {\n                $k++;\n            }\n\n            if ($j - $i === $k - $j) {\n                $len = $j - $i;\n                for ($n = 0; $n < $len; $n++) {\n                    $newDiff[] = new DiffElem(\n                        DiffElem::TYPE_REPLACE,\n                        $diff[$i + $n]->old,\n                        $diff[$j + $n]->new\n                    );\n                }\n            } else {\n                for (; $i < $k; $i++) {\n                    $newDiff[] = $diff[$i];\n                }\n            }\n\n            /** @psalm-suppress LoopInvalidation */\n            $i = $k - 1;\n        }\n        return $newDiff;\n    }", "language": "php", "code": "private static function coalesceReplacements(array $diff)\n    {\n        $newDiff = [];\n        $c = \\count($diff);\n        for ($i = 0; $i < $c; $i++) {\n            $diffType = $diff[$i]->type;\n            if ($diffType !== DiffElem::TYPE_REMOVE) {\n                $newDiff[] = $diff[$i];\n                continue;\n            }\n\n            $j = $i;\n            while ($j < $c && $diff[$j]->type === DiffElem::TYPE_REMOVE) {\n                $j++;\n            }\n\n            $k = $j;\n            while ($k < $c && $diff[$k]->type === DiffElem::TYPE_ADD) {\n                $k++;\n            }\n\n            if ($j - $i === $k - $j) {\n                $len = $j - $i;\n                for ($n = 0; $n < $len; $n++) {\n                    $newDiff[] = new DiffElem(\n                        DiffElem::TYPE_REPLACE,\n                        $diff[$i + $n]->old,\n                        $diff[$j + $n]->new\n                    );\n                }\n            } else {\n                for (; $i < $k; $i++) {\n                    $newDiff[] = $diff[$i];\n                }\n            }\n\n            /** @psalm-suppress LoopInvalidation */\n            $i = $k - 1;\n        }\n        return $newDiff;\n    }", "code_tokens": ["private", "static", "function", "coalesceReplacements", "(", "array", "$", "diff", ")", "{", "$", "newDiff", "=", "[", "]", ";", "$", "c", "=", "\\", "count", "(", "$", "diff", ")", ";", "for", "(", "$", "i", "=", "0", ";", "$", "i", "<", "$", "c", ";", "$", "i", "++", ")", "{", "$", "diffType", "=", "$", "diff", "[", "$", "i", "]", "->", "type", ";", "if", "(", "$", "diffType", "!==", "DiffElem", "::", "TYPE_REMOVE", ")", "{", "$", "newDiff", "[", "]", "=", "$", "diff", "[", "$", "i", "]", ";", "continue", ";", "}", "$", "j", "=", "$", "i", ";", "while", "(", "$", "j", "<", "$", "c", "&&", "$", "diff", "[", "$", "j", "]", "->", "type", "===", "DiffElem", "::", "TYPE_REMOVE", ")", "{", "$", "j", "++", ";", "}", "$", "k", "=", "$", "j", ";", "while", "(", "$", "k", "<", "$", "c", "&&", "$", "diff", "[", "$", "k", "]", "->", "type", "===", "DiffElem", "::", "TYPE_ADD", ")", "{", "$", "k", "++", ";", "}", "if", "(", "$", "j", "-", "$", "i", "===", "$", "k", "-", "$", "j", ")", "{", "$", "len", "=", "$", "j", "-", "$", "i", ";", "for", "(", "$", "n", "=", "0", ";", "$", "n", "<", "$", "len", ";", "$", "n", "++", ")", "{", "$", "newDiff", "[", "]", "=", "new", "DiffElem", "(", "DiffElem", "::", "TYPE_REPLACE", ",", "$", "diff", "[", "$", "i", "+", "$", "n", "]", "->", "old", ",", "$", "diff", "[", "$", "j", "+", "$", "n", "]", "->", "new", ")", ";", "}", "}", "else", "{", "for", "(", ";", "$", "i", "<", "$", "k", ";", "$", "i", "++", ")", "{", "$", "newDiff", "[", "]", "=", "$", "diff", "[", "$", "i", "]", ";", "}", "}", "$", "i", "=", "$", "k", "-", "1", ";", "}", "return", "$", "newDiff", ";", "}"], "docstring": "Coalesce equal-length sequences of remove+add into a replace operation.\n\n@param DiffElem[] $diff\n@return DiffElem[]", "docstring_tokens": ["Coalesce", "equal", "-", "length", "sequences", "of", "remove", "+", "add", "into", "a", "replace", "operation", "."], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/Diff/FileDiffer.php#L257-L297", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Codebase.php", "func_name": "Codebase.scanFiles", "original_string": "public function scanFiles(int $threads = 1)\n    {\n        $has_changes = $this->scanner->scanFiles($this->classlikes, $threads);\n\n        if ($has_changes) {\n            $this->populator->populateCodebase($this);\n        }\n    }", "language": "php", "code": "public function scanFiles(int $threads = 1)\n    {\n        $has_changes = $this->scanner->scanFiles($this->classlikes, $threads);\n\n        if ($has_changes) {\n            $this->populator->populateCodebase($this);\n        }\n    }", "code_tokens": ["public", "function", "scanFiles", "(", "int", "$", "threads", "=", "1", ")", "{", "$", "has_changes", "=", "$", "this", "->", "scanner", "->", "scanFiles", "(", "$", "this", "->", "classlikes", ",", "$", "threads", ")", ";", "if", "(", "$", "has_changes", ")", "{", "$", "this", "->", "populator", "->", "populateCodebase", "(", "$", "this", ")", ";", "}", "}"], "docstring": "Scans all files their related files\n\n@return void", "docstring_tokens": ["Scans", "all", "files", "their", "related", "files"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Codebase.php#L383-L390", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Codebase.php", "func_name": "Codebase.isTypeContainedByType", "original_string": "public function isTypeContainedByType(\n        Type\\Union $input_type,\n        Type\\Union $container_type\n    ): bool {\n        return TypeAnalyzer::isContainedBy($this, $input_type, $container_type);\n    }", "language": "php", "code": "public function isTypeContainedByType(\n        Type\\Union $input_type,\n        Type\\Union $container_type\n    ): bool {\n        return TypeAnalyzer::isContainedBy($this, $input_type, $container_type);\n    }", "code_tokens": ["public", "function", "isTypeContainedByType", "(", "Type", "\\", "Union", "$", "input_type", ",", "Type", "\\", "Union", "$", "container_type", ")", ":", "bool", "{", "return", "TypeAnalyzer", "::", "isContainedBy", "(", "$", "this", ",", "$", "input_type", ",", "$", "container_type", ")", ";", "}"], "docstring": "Checks if type is a subtype of other\n\nGiven two types, checks if `$input_type` is a subtype of `$container_type`.\nIf you consider `Type\\Union` as a set of types, this will tell you\nif `$input_type` is fully contained in `$container_type`,\n\n$input_type \u2286 $container_type\n\nUseful for emitting issues like InvalidArgument, where argument at the call site\nshould be a subset of the function parameter type.", "docstring_tokens": ["Checks", "if", "type", "is", "a", "subtype", "of", "other"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Codebase.php#L1151-L1156", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Codebase.php", "func_name": "Codebase.canTypeBeContainedByType", "original_string": "public function canTypeBeContainedByType(\n        Type\\Union $input_type,\n        Type\\Union $container_type\n    ): bool {\n        return TypeAnalyzer::canBeContainedBy($this, $input_type, $container_type);\n    }", "language": "php", "code": "public function canTypeBeContainedByType(\n        Type\\Union $input_type,\n        Type\\Union $container_type\n    ): bool {\n        return TypeAnalyzer::canBeContainedBy($this, $input_type, $container_type);\n    }", "code_tokens": ["public", "function", "canTypeBeContainedByType", "(", "Type", "\\", "Union", "$", "input_type", ",", "Type", "\\", "Union", "$", "container_type", ")", ":", "bool", "{", "return", "TypeAnalyzer", "::", "canBeContainedBy", "(", "$", "this", ",", "$", "input_type", ",", "$", "container_type", ")", ";", "}"], "docstring": "Checks if type has any part that is a subtype of other\n\nGiven two types, checks if *any part* of `$input_type` is a subtype of `$container_type`.\nIf you consider `Type\\Union` as a set of types, this will tell you if intersection\nof `$input_type` with `$container_type` is not empty.\n\n$input_type \u2229 $container_type \u2260 \u2205 , e.g. they are not disjoint.\n\nUseful for emitting issues like PossiblyInvalidArgument, where argument at the call\nsite should be a subtype of the function parameter type, but it's has some types that are\nnot a subtype of the required type.", "docstring_tokens": ["Checks", "if", "type", "has", "any", "part", "that", "is", "a", "subtype", "of", "other"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Codebase.php#L1171-L1176", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/FileManipulation/FunctionDocblockManipulator.php", "func_name": "FunctionDocblockManipulator.setReturnType", "original_string": "public function setReturnType($php_type, $new_type, $phpdoc_type, $is_php_compatible, $description)\n    {\n        $new_type = str_replace(['<mixed, mixed>', '<array-key, mixed>', '<empty, empty>'], '', $new_type);\n\n        $this->new_php_return_type = $php_type;\n        $this->new_phpdoc_return_type = $phpdoc_type;\n        $this->new_psalm_return_type = $new_type;\n        $this->return_type_is_php_compatible = $is_php_compatible;\n        $this->return_type_description = $description;\n    }", "language": "php", "code": "public function setReturnType($php_type, $new_type, $phpdoc_type, $is_php_compatible, $description)\n    {\n        $new_type = str_replace(['<mixed, mixed>', '<array-key, mixed>', '<empty, empty>'], '', $new_type);\n\n        $this->new_php_return_type = $php_type;\n        $this->new_phpdoc_return_type = $phpdoc_type;\n        $this->new_psalm_return_type = $new_type;\n        $this->return_type_is_php_compatible = $is_php_compatible;\n        $this->return_type_description = $description;\n    }", "code_tokens": ["public", "function", "setReturnType", "(", "$", "php_type", ",", "$", "new_type", ",", "$", "phpdoc_type", ",", "$", "is_php_compatible", ",", "$", "description", ")", "{", "$", "new_type", "=", "str_replace", "(", "[", "'<mixed, mixed>'", ",", "'<array-key, mixed>'", ",", "'<empty, empty>'", "]", ",", "''", ",", "$", "new_type", ")", ";", "$", "this", "->", "new_php_return_type", "=", "$", "php_type", ";", "$", "this", "->", "new_phpdoc_return_type", "=", "$", "phpdoc_type", ";", "$", "this", "->", "new_psalm_return_type", "=", "$", "new_type", ";", "$", "this", "->", "return_type_is_php_compatible", "=", "$", "is_php_compatible", ";", "$", "this", "->", "return_type_description", "=", "$", "description", ";", "}"], "docstring": "Sets the new return type\n\n@param   ?string     $php_type\n@param   string      $new_type\n@param   string      $phpdoc_type\n@param   bool        $is_php_compatible\n@param   ?string     $description\n\n@return  void", "docstring_tokens": ["Sets", "the", "new", "return", "type"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/FileManipulation/FunctionDocblockManipulator.php#L253-L262", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/FileManipulation/FunctionDocblockManipulator.php", "func_name": "FunctionDocblockManipulator.setParamType", "original_string": "public function setParamType($param_name, $php_type, $new_type, $phpdoc_type, $is_php_compatible)\n    {\n        $new_type = str_replace(['<mixed, mixed>', '<array-key, mixed>', '<empty, empty>'], '', $new_type);\n\n        if ($php_type) {\n            $this->new_php_param_types[$param_name] = $php_type;\n        }\n        $this->new_phpdoc_param_types[$param_name] = $phpdoc_type;\n        $this->new_psalm_param_types[$param_name] = $new_type;\n        $this->param_type_is_php_compatible[$param_name] = $is_php_compatible;\n    }", "language": "php", "code": "public function setParamType($param_name, $php_type, $new_type, $phpdoc_type, $is_php_compatible)\n    {\n        $new_type = str_replace(['<mixed, mixed>', '<array-key, mixed>', '<empty, empty>'], '', $new_type);\n\n        if ($php_type) {\n            $this->new_php_param_types[$param_name] = $php_type;\n        }\n        $this->new_phpdoc_param_types[$param_name] = $phpdoc_type;\n        $this->new_psalm_param_types[$param_name] = $new_type;\n        $this->param_type_is_php_compatible[$param_name] = $is_php_compatible;\n    }", "code_tokens": ["public", "function", "setParamType", "(", "$", "param_name", ",", "$", "php_type", ",", "$", "new_type", ",", "$", "phpdoc_type", ",", "$", "is_php_compatible", ")", "{", "$", "new_type", "=", "str_replace", "(", "[", "'<mixed, mixed>'", ",", "'<array-key, mixed>'", ",", "'<empty, empty>'", "]", ",", "''", ",", "$", "new_type", ")", ";", "if", "(", "$", "php_type", ")", "{", "$", "this", "->", "new_php_param_types", "[", "$", "param_name", "]", "=", "$", "php_type", ";", "}", "$", "this", "->", "new_phpdoc_param_types", "[", "$", "param_name", "]", "=", "$", "phpdoc_type", ";", "$", "this", "->", "new_psalm_param_types", "[", "$", "param_name", "]", "=", "$", "new_type", ";", "$", "this", "->", "param_type_is_php_compatible", "[", "$", "param_name", "]", "=", "$", "is_php_compatible", ";", "}"], "docstring": "Sets a new param type\n\n@param   string      $param_name\n@param   ?string     $php_type\n@param   string      $new_type\n@param   string      $phpdoc_type\n@param   bool        $is_php_compatible\n\n@return  void", "docstring_tokens": ["Sets", "a", "new", "param", "type"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/FileManipulation/FunctionDocblockManipulator.php#L275-L285", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/LanguageServer/LanguageServer.php", "func_name": "LanguageServer.pathToUri", "original_string": "public static function pathToUri(string $filepath): string\n    {\n        $filepath = trim(str_replace('\\\\', '/', $filepath), '/');\n        $parts = explode('/', $filepath);\n        // Don't %-encode the colon after a Windows drive letter\n        $first = array_shift($parts);\n        if (substr($first, -1) !== ':') {\n            $first = rawurlencode($first);\n        }\n        $parts = array_map('rawurlencode', $parts);\n        array_unshift($parts, $first);\n        $filepath = implode('/', $parts);\n        return 'file:///' . $filepath;\n    }", "language": "php", "code": "public static function pathToUri(string $filepath): string\n    {\n        $filepath = trim(str_replace('\\\\', '/', $filepath), '/');\n        $parts = explode('/', $filepath);\n        // Don't %-encode the colon after a Windows drive letter\n        $first = array_shift($parts);\n        if (substr($first, -1) !== ':') {\n            $first = rawurlencode($first);\n        }\n        $parts = array_map('rawurlencode', $parts);\n        array_unshift($parts, $first);\n        $filepath = implode('/', $parts);\n        return 'file:///' . $filepath;\n    }", "code_tokens": ["public", "static", "function", "pathToUri", "(", "string", "$", "filepath", ")", ":", "string", "{", "$", "filepath", "=", "trim", "(", "str_replace", "(", "'\\\\'", ",", "'/'", ",", "$", "filepath", ")", ",", "'/'", ")", ";", "$", "parts", "=", "explode", "(", "'/'", ",", "$", "filepath", ")", ";", "$", "first", "=", "array_shift", "(", "$", "parts", ")", ";", "if", "(", "substr", "(", "$", "first", ",", "-", "1", ")", "!==", "':'", ")", "{", "$", "first", "=", "rawurlencode", "(", "$", "first", ")", ";", "}", "$", "parts", "=", "array_map", "(", "'rawurlencode'", ",", "$", "parts", ")", ";", "array_unshift", "(", "$", "parts", ",", "$", "first", ")", ";", "$", "filepath", "=", "implode", "(", "'/'", ",", "$", "parts", ")", ";", "return", "'file:///'", ".", "$", "filepath", ";", "}"], "docstring": "Transforms an absolute file path into a URI as used by the language server protocol.\n\n@param string $filepath\n@return string", "docstring_tokens": ["Transforms", "an", "absolute", "file", "path", "into", "a", "URI", "as", "used", "by", "the", "language", "server", "protocol", "."], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/LanguageServer/LanguageServer.php#L395-L408", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/LanguageServer/LanguageServer.php", "func_name": "LanguageServer.uriToPath", "original_string": "public static function uriToPath(string $uri)\n    {\n        $fragments = parse_url($uri);\n        if ($fragments === false || !isset($fragments['scheme']) || $fragments['scheme'] !== 'file') {\n            throw new \\InvalidArgumentException(\"Not a valid file URI: $uri\");\n        }\n        $filepath = urldecode((string) $fragments['path']);\n        if (strpos($filepath, ':') !== false) {\n            if ($filepath[0] === '/') {\n                $filepath = substr($filepath, 1);\n            }\n            $filepath = str_replace('/', '\\\\', $filepath);\n        }\n        return $filepath;\n    }", "language": "php", "code": "public static function uriToPath(string $uri)\n    {\n        $fragments = parse_url($uri);\n        if ($fragments === false || !isset($fragments['scheme']) || $fragments['scheme'] !== 'file') {\n            throw new \\InvalidArgumentException(\"Not a valid file URI: $uri\");\n        }\n        $filepath = urldecode((string) $fragments['path']);\n        if (strpos($filepath, ':') !== false) {\n            if ($filepath[0] === '/') {\n                $filepath = substr($filepath, 1);\n            }\n            $filepath = str_replace('/', '\\\\', $filepath);\n        }\n        return $filepath;\n    }", "code_tokens": ["public", "static", "function", "uriToPath", "(", "string", "$", "uri", ")", "{", "$", "fragments", "=", "parse_url", "(", "$", "uri", ")", ";", "if", "(", "$", "fragments", "===", "false", "||", "!", "isset", "(", "$", "fragments", "[", "'scheme'", "]", ")", "||", "$", "fragments", "[", "'scheme'", "]", "!==", "'file'", ")", "{", "throw", "new", "\\", "InvalidArgumentException", "(", "\"Not a valid file URI: $uri\"", ")", ";", "}", "$", "filepath", "=", "urldecode", "(", "(", "string", ")", "$", "fragments", "[", "'path'", "]", ")", ";", "if", "(", "strpos", "(", "$", "filepath", ",", "':'", ")", "!==", "false", ")", "{", "if", "(", "$", "filepath", "[", "0", "]", "===", "'/'", ")", "{", "$", "filepath", "=", "substr", "(", "$", "filepath", ",", "1", ")", ";", "}", "$", "filepath", "=", "str_replace", "(", "'/'", ",", "'\\\\'", ",", "$", "filepath", ")", ";", "}", "return", "$", "filepath", ";", "}"], "docstring": "Transforms URI into file path\n\n@param string $uri\n@return string", "docstring_tokens": ["Transforms", "URI", "into", "file", "path"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/LanguageServer/LanguageServer.php#L416-L430", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/Analyzer/FunctionLikeAnalyzer.php", "func_name": "FunctionLikeAnalyzer.addReturnTypes", "original_string": "public function addReturnTypes(Context $context)\n    {\n        if ($this->return_vars_in_scope !== null) {\n            $this->return_vars_in_scope = TypeAnalyzer::combineKeyedTypes(\n                $context->vars_in_scope,\n                $this->return_vars_in_scope\n            );\n        } else {\n            $this->return_vars_in_scope = $context->vars_in_scope;\n        }\n\n        if ($this->return_vars_possibly_in_scope !== null) {\n            $this->return_vars_possibly_in_scope = array_merge(\n                $context->vars_possibly_in_scope,\n                $this->return_vars_possibly_in_scope\n            );\n        } else {\n            $this->return_vars_possibly_in_scope = $context->vars_possibly_in_scope;\n        }\n    }", "language": "php", "code": "public function addReturnTypes(Context $context)\n    {\n        if ($this->return_vars_in_scope !== null) {\n            $this->return_vars_in_scope = TypeAnalyzer::combineKeyedTypes(\n                $context->vars_in_scope,\n                $this->return_vars_in_scope\n            );\n        } else {\n            $this->return_vars_in_scope = $context->vars_in_scope;\n        }\n\n        if ($this->return_vars_possibly_in_scope !== null) {\n            $this->return_vars_possibly_in_scope = array_merge(\n                $context->vars_possibly_in_scope,\n                $this->return_vars_possibly_in_scope\n            );\n        } else {\n            $this->return_vars_possibly_in_scope = $context->vars_possibly_in_scope;\n        }\n    }", "code_tokens": ["public", "function", "addReturnTypes", "(", "Context", "$", "context", ")", "{", "if", "(", "$", "this", "->", "return_vars_in_scope", "!==", "null", ")", "{", "$", "this", "->", "return_vars_in_scope", "=", "TypeAnalyzer", "::", "combineKeyedTypes", "(", "$", "context", "->", "vars_in_scope", ",", "$", "this", "->", "return_vars_in_scope", ")", ";", "}", "else", "{", "$", "this", "->", "return_vars_in_scope", "=", "$", "context", "->", "vars_in_scope", ";", "}", "if", "(", "$", "this", "->", "return_vars_possibly_in_scope", "!==", "null", ")", "{", "$", "this", "->", "return_vars_possibly_in_scope", "=", "array_merge", "(", "$", "context", "->", "vars_possibly_in_scope", ",", "$", "this", "->", "return_vars_possibly_in_scope", ")", ";", "}", "else", "{", "$", "this", "->", "return_vars_possibly_in_scope", "=", "$", "context", "->", "vars_possibly_in_scope", ";", "}", "}"], "docstring": "Adds return types for the given function\n\n@param   string  $return_type\n@param   Context $context\n\n@return  void", "docstring_tokens": ["Adds", "return", "types", "for", "the", "given", "function"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/Analyzer/FunctionLikeAnalyzer.php#L998-L1017", "partition": "train"}
{"repo": "vimeo/psalm", "path": "src/Psalm/Internal/LanguageServer/ClientHandler.php", "func_name": "ClientHandler.notify", "original_string": "public function notify(string $method, $params): Promise\n    {\n        return $this->protocolWriter->write(\n            new Message(\n                new AdvancedJsonRpc\\Notification($method, (object)$params)\n            )\n        );\n    }", "language": "php", "code": "public function notify(string $method, $params): Promise\n    {\n        return $this->protocolWriter->write(\n            new Message(\n                new AdvancedJsonRpc\\Notification($method, (object)$params)\n            )\n        );\n    }", "code_tokens": ["public", "function", "notify", "(", "string", "$", "method", ",", "$", "params", ")", ":", "Promise", "{", "return", "$", "this", "->", "protocolWriter", "->", "write", "(", "new", "Message", "(", "new", "AdvancedJsonRpc", "\\", "Notification", "(", "$", "method", ",", "(", "object", ")", "$", "params", ")", ")", ")", ";", "}"], "docstring": "Sends a notification to the client\n\n@param string $method The method to call\n@param array|object $params The method parameters\n@return Promise <null> Will be resolved as soon as the notification has been sent", "docstring_tokens": ["Sends", "a", "notification", "to", "the", "client"], "sha": "dd409871876fcafb4a85ac3901453fb05c46814c", "url": "https://github.com/vimeo/psalm/blob/dd409871876fcafb4a85ac3901453fb05c46814c/src/Psalm/Internal/LanguageServer/ClientHandler.php#L98-L105", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Interactions/WebDriverActions.php", "func_name": "WebDriverActions.moveByOffset", "original_string": "public function moveByOffset($x_offset, $y_offset)\n    {\n        $this->action->addAction(\n            new WebDriverMoveToOffsetAction($this->mouse, null, $x_offset, $y_offset)\n        );\n\n        return $this;\n    }", "language": "php", "code": "public function moveByOffset($x_offset, $y_offset)\n    {\n        $this->action->addAction(\n            new WebDriverMoveToOffsetAction($this->mouse, null, $x_offset, $y_offset)\n        );\n\n        return $this;\n    }", "code_tokens": ["public", "function", "moveByOffset", "(", "$", "x_offset", ",", "$", "y_offset", ")", "{", "$", "this", "->", "action", "->", "addAction", "(", "new", "WebDriverMoveToOffsetAction", "(", "$", "this", "->", "mouse", ",", "null", ",", "$", "x_offset", ",", "$", "y_offset", ")", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Mouse move by offset.\n\n@param int $x_offset\n@param int $y_offset\n@return WebDriverActions", "docstring_tokens": ["Mouse", "move", "by", "offset", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Interactions/WebDriverActions.php#L177-L184", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Cookie.php", "func_name": "Cookie.setDomain", "original_string": "public function setDomain($domain)\n    {\n        if (mb_strpos($domain, ':') !== false) {\n            throw new InvalidArgumentException(sprintf('Cookie domain \"%s\" should not contain a port', $domain));\n        }\n\n        $this->cookie['domain'] = $domain;\n    }", "language": "php", "code": "public function setDomain($domain)\n    {\n        if (mb_strpos($domain, ':') !== false) {\n            throw new InvalidArgumentException(sprintf('Cookie domain \"%s\" should not contain a port', $domain));\n        }\n\n        $this->cookie['domain'] = $domain;\n    }", "code_tokens": ["public", "function", "setDomain", "(", "$", "domain", ")", "{", "if", "(", "mb_strpos", "(", "$", "domain", ",", "':'", ")", "!==", "false", ")", "{", "throw", "new", "InvalidArgumentException", "(", "sprintf", "(", "'Cookie domain \"%s\" should not contain a port'", ",", "$", "domain", ")", ")", ";", "}", "$", "this", "->", "cookie", "[", "'domain'", "]", "=", "$", "domain", ";", "}"], "docstring": "The domain the cookie is visible to. Defaults to the current browsing context's document's URL domain if omitted.\n\n@param string $domain", "docstring_tokens": ["The", "domain", "the", "cookie", "is", "visible", "to", ".", "Defaults", "to", "the", "current", "browsing", "context", "s", "document", "s", "URL", "domain", "if", "omitted", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Cookie.php#L119-L126", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteKeyboard.php", "func_name": "RemoteKeyboard.sendKeys", "original_string": "public function sendKeys($keys)\n    {\n        $this->executor->execute(DriverCommand::SEND_KEYS_TO_ACTIVE_ELEMENT, [\n            'value' => WebDriverKeys::encode($keys),\n        ]);\n\n        return $this;\n    }", "language": "php", "code": "public function sendKeys($keys)\n    {\n        $this->executor->execute(DriverCommand::SEND_KEYS_TO_ACTIVE_ELEMENT, [\n            'value' => WebDriverKeys::encode($keys),\n        ]);\n\n        return $this;\n    }", "code_tokens": ["public", "function", "sendKeys", "(", "$", "keys", ")", "{", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "SEND_KEYS_TO_ACTIVE_ELEMENT", ",", "[", "'value'", "=>", "WebDriverKeys", "::", "encode", "(", "$", "keys", ")", ",", "]", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Send keys to active element\n@param string|array $keys\n@return $this", "docstring_tokens": ["Send", "keys", "to", "active", "element"], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteKeyboard.php#L44-L51", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteKeyboard.php", "func_name": "RemoteKeyboard.pressKey", "original_string": "public function pressKey($key)\n    {\n        $this->executor->execute(DriverCommand::SEND_KEYS_TO_ACTIVE_ELEMENT, [\n            'value' => [(string) $key],\n        ]);\n\n        return $this;\n    }", "language": "php", "code": "public function pressKey($key)\n    {\n        $this->executor->execute(DriverCommand::SEND_KEYS_TO_ACTIVE_ELEMENT, [\n            'value' => [(string) $key],\n        ]);\n\n        return $this;\n    }", "code_tokens": ["public", "function", "pressKey", "(", "$", "key", ")", "{", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "SEND_KEYS_TO_ACTIVE_ELEMENT", ",", "[", "'value'", "=>", "[", "(", "string", ")", "$", "key", "]", ",", "]", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Press a modifier key\n\n@see WebDriverKeys\n@param string $key\n@return $this", "docstring_tokens": ["Press", "a", "modifier", "key"], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteKeyboard.php#L60-L67", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteKeyboard.php", "func_name": "RemoteKeyboard.releaseKey", "original_string": "public function releaseKey($key)\n    {\n        $this->executor->execute(DriverCommand::SEND_KEYS_TO_ACTIVE_ELEMENT, [\n            'value' => [(string) $key],\n        ]);\n\n        return $this;\n    }", "language": "php", "code": "public function releaseKey($key)\n    {\n        $this->executor->execute(DriverCommand::SEND_KEYS_TO_ACTIVE_ELEMENT, [\n            'value' => [(string) $key],\n        ]);\n\n        return $this;\n    }", "code_tokens": ["public", "function", "releaseKey", "(", "$", "key", ")", "{", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "SEND_KEYS_TO_ACTIVE_ELEMENT", ",", "[", "'value'", "=>", "[", "(", "string", ")", "$", "key", "]", ",", "]", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Release a modifier key\n\n@see WebDriverKeys\n@param string $key\n@return $this", "docstring_tokens": ["Release", "a", "modifier", "key"], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteKeyboard.php#L76-L83", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverExpectedCondition.php", "func_name": "WebDriverExpectedCondition.titleContains", "original_string": "public static function titleContains($title)\n    {\n        return new static(\n            function (WebDriver $driver) use ($title) {\n                return mb_strpos($driver->getTitle(), $title) !== false;\n            }\n        );\n    }", "language": "php", "code": "public static function titleContains($title)\n    {\n        return new static(\n            function (WebDriver $driver) use ($title) {\n                return mb_strpos($driver->getTitle(), $title) !== false;\n            }\n        );\n    }", "code_tokens": ["public", "static", "function", "titleContains", "(", "$", "title", ")", "{", "return", "new", "static", "(", "function", "(", "WebDriver", "$", "driver", ")", "use", "(", "$", "title", ")", "{", "return", "mb_strpos", "(", "$", "driver", "->", "getTitle", "(", ")", ",", "$", "title", ")", "!==", "false", ";", "}", ")", ";", "}"], "docstring": "An expectation for checking substring of a page Title.\n\n@param string $title The expected substring of Title.\n@return static Condition returns whether current page title contains given string.", "docstring_tokens": ["An", "expectation", "for", "checking", "substring", "of", "a", "page", "Title", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverExpectedCondition.php#L71-L78", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverExpectedCondition.php", "func_name": "WebDriverExpectedCondition.titleMatches", "original_string": "public static function titleMatches($titleRegexp)\n    {\n        return new static(\n            function (WebDriver $driver) use ($titleRegexp) {\n                return (bool) preg_match($titleRegexp, $driver->getTitle());\n            }\n        );\n    }", "language": "php", "code": "public static function titleMatches($titleRegexp)\n    {\n        return new static(\n            function (WebDriver $driver) use ($titleRegexp) {\n                return (bool) preg_match($titleRegexp, $driver->getTitle());\n            }\n        );\n    }", "code_tokens": ["public", "static", "function", "titleMatches", "(", "$", "titleRegexp", ")", "{", "return", "new", "static", "(", "function", "(", "WebDriver", "$", "driver", ")", "use", "(", "$", "titleRegexp", ")", "{", "return", "(", "bool", ")", "preg_match", "(", "$", "titleRegexp", ",", "$", "driver", "->", "getTitle", "(", ")", ")", ";", "}", ")", ";", "}"], "docstring": "An expectation for checking current page title matches the given regular expression.\n\n@param string $titleRegexp The regular expression to test against.\n@return static Condition returns whether current page title matches the regular expression.", "docstring_tokens": ["An", "expectation", "for", "checking", "current", "page", "title", "matches", "the", "given", "regular", "expression", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverExpectedCondition.php#L86-L93", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverExpectedCondition.php", "func_name": "WebDriverExpectedCondition.urlContains", "original_string": "public static function urlContains($url)\n    {\n        return new static(\n            function (WebDriver $driver) use ($url) {\n                return mb_strpos($driver->getCurrentURL(), $url) !== false;\n            }\n        );\n    }", "language": "php", "code": "public static function urlContains($url)\n    {\n        return new static(\n            function (WebDriver $driver) use ($url) {\n                return mb_strpos($driver->getCurrentURL(), $url) !== false;\n            }\n        );\n    }", "code_tokens": ["public", "static", "function", "urlContains", "(", "$", "url", ")", "{", "return", "new", "static", "(", "function", "(", "WebDriver", "$", "driver", ")", "use", "(", "$", "url", ")", "{", "return", "mb_strpos", "(", "$", "driver", "->", "getCurrentURL", "(", ")", ",", "$", "url", ")", "!==", "false", ";", "}", ")", ";", "}"], "docstring": "An expectation for checking substring of the URL of a page.\n\n@param string $url The expected substring of the URL\n@return static Condition returns whether current URL contains given string.", "docstring_tokens": ["An", "expectation", "for", "checking", "substring", "of", "the", "URL", "of", "a", "page", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverExpectedCondition.php#L116-L123", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverExpectedCondition.php", "func_name": "WebDriverExpectedCondition.urlMatches", "original_string": "public static function urlMatches($urlRegexp)\n    {\n        return new static(\n            function (WebDriver $driver) use ($urlRegexp) {\n                return (bool) preg_match($urlRegexp, $driver->getCurrentURL());\n            }\n        );\n    }", "language": "php", "code": "public static function urlMatches($urlRegexp)\n    {\n        return new static(\n            function (WebDriver $driver) use ($urlRegexp) {\n                return (bool) preg_match($urlRegexp, $driver->getCurrentURL());\n            }\n        );\n    }", "code_tokens": ["public", "static", "function", "urlMatches", "(", "$", "urlRegexp", ")", "{", "return", "new", "static", "(", "function", "(", "WebDriver", "$", "driver", ")", "use", "(", "$", "urlRegexp", ")", "{", "return", "(", "bool", ")", "preg_match", "(", "$", "urlRegexp", ",", "$", "driver", "->", "getCurrentURL", "(", ")", ")", ";", "}", ")", ";", "}"], "docstring": "An expectation for checking current page URL matches the given regular expression.\n\n@param string $urlRegexp The regular expression to test against.\n@return static Condition returns whether current URL matches the regular expression.", "docstring_tokens": ["An", "expectation", "for", "checking", "current", "page", "URL", "matches", "the", "given", "regular", "expression", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverExpectedCondition.php#L131-L138", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverExpectedCondition.php", "func_name": "WebDriverExpectedCondition.presenceOfAllElementsLocatedBy", "original_string": "public static function presenceOfAllElementsLocatedBy(WebDriverBy $by)\n    {\n        return new static(\n            function (WebDriver $driver) use ($by) {\n                $elements = $driver->findElements($by);\n\n                return count($elements) > 0 ? $elements : null;\n            }\n        );\n    }", "language": "php", "code": "public static function presenceOfAllElementsLocatedBy(WebDriverBy $by)\n    {\n        return new static(\n            function (WebDriver $driver) use ($by) {\n                $elements = $driver->findElements($by);\n\n                return count($elements) > 0 ? $elements : null;\n            }\n        );\n    }", "code_tokens": ["public", "static", "function", "presenceOfAllElementsLocatedBy", "(", "WebDriverBy", "$", "by", ")", "{", "return", "new", "static", "(", "function", "(", "WebDriver", "$", "driver", ")", "use", "(", "$", "by", ")", "{", "$", "elements", "=", "$", "driver", "->", "findElements", "(", "$", "by", ")", ";", "return", "count", "(", "$", "elements", ")", ">", "0", "?", "$", "elements", ":", "null", ";", "}", ")", ";", "}"], "docstring": "An expectation for checking that there is at least one element present on a web page.\n\n@param WebDriverBy $by The locator used to find the element.\n@return static Condition return an array of WebDriverElement once they are located.", "docstring_tokens": ["An", "expectation", "for", "checking", "that", "there", "is", "at", "least", "one", "element", "present", "on", "a", "web", "page", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverExpectedCondition.php#L162-L171", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverExpectedCondition.php", "func_name": "WebDriverExpectedCondition.visibilityOfElementLocated", "original_string": "public static function visibilityOfElementLocated(WebDriverBy $by)\n    {\n        return new static(\n            function (WebDriver $driver) use ($by) {\n                try {\n                    $element = $driver->findElement($by);\n\n                    return $element->isDisplayed() ? $element : null;\n                } catch (StaleElementReferenceException $e) {\n                    return null;\n                }\n            }\n        );\n    }", "language": "php", "code": "public static function visibilityOfElementLocated(WebDriverBy $by)\n    {\n        return new static(\n            function (WebDriver $driver) use ($by) {\n                try {\n                    $element = $driver->findElement($by);\n\n                    return $element->isDisplayed() ? $element : null;\n                } catch (StaleElementReferenceException $e) {\n                    return null;\n                }\n            }\n        );\n    }", "code_tokens": ["public", "static", "function", "visibilityOfElementLocated", "(", "WebDriverBy", "$", "by", ")", "{", "return", "new", "static", "(", "function", "(", "WebDriver", "$", "driver", ")", "use", "(", "$", "by", ")", "{", "try", "{", "$", "element", "=", "$", "driver", "->", "findElement", "(", "$", "by", ")", ";", "return", "$", "element", "->", "isDisplayed", "(", ")", "?", "$", "element", ":", "null", ";", "}", "catch", "(", "StaleElementReferenceException", "$", "e", ")", "{", "return", "null", ";", "}", "}", ")", ";", "}"], "docstring": "An expectation for checking that an element is present on the DOM of a page and visible.\nVisibility means that the element is not only displayed but also has a height and width that is greater than 0.\n\n@param WebDriverBy $by The locator used to find the element.\n@return static Condition returns the WebDriverElement which is located and visible.", "docstring_tokens": ["An", "expectation", "for", "checking", "that", "an", "element", "is", "present", "on", "the", "DOM", "of", "a", "page", "and", "visible", ".", "Visibility", "means", "that", "the", "element", "is", "not", "only", "displayed", "but", "also", "has", "a", "height", "and", "width", "that", "is", "greater", "than", "0", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverExpectedCondition.php#L180-L193", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverExpectedCondition.php", "func_name": "WebDriverExpectedCondition.visibilityOfAnyElementLocated", "original_string": "public static function visibilityOfAnyElementLocated(WebDriverBy $by)\n    {\n        return new static(\n            function (WebDriver $driver) use ($by) {\n                $elements = $driver->findElements($by);\n                $visibleElements = [];\n\n                foreach ($elements as $element) {\n                    try {\n                        if ($element->isDisplayed()) {\n                            $visibleElements[] = $element;\n                        }\n                    } catch (StaleElementReferenceException $e) {\n                    }\n                }\n\n                return count($visibleElements) > 0 ? $visibleElements : null;\n            }\n        );\n    }", "language": "php", "code": "public static function visibilityOfAnyElementLocated(WebDriverBy $by)\n    {\n        return new static(\n            function (WebDriver $driver) use ($by) {\n                $elements = $driver->findElements($by);\n                $visibleElements = [];\n\n                foreach ($elements as $element) {\n                    try {\n                        if ($element->isDisplayed()) {\n                            $visibleElements[] = $element;\n                        }\n                    } catch (StaleElementReferenceException $e) {\n                    }\n                }\n\n                return count($visibleElements) > 0 ? $visibleElements : null;\n            }\n        );\n    }", "code_tokens": ["public", "static", "function", "visibilityOfAnyElementLocated", "(", "WebDriverBy", "$", "by", ")", "{", "return", "new", "static", "(", "function", "(", "WebDriver", "$", "driver", ")", "use", "(", "$", "by", ")", "{", "$", "elements", "=", "$", "driver", "->", "findElements", "(", "$", "by", ")", ";", "$", "visibleElements", "=", "[", "]", ";", "foreach", "(", "$", "elements", "as", "$", "element", ")", "{", "try", "{", "if", "(", "$", "element", "->", "isDisplayed", "(", ")", ")", "{", "$", "visibleElements", "[", "]", "=", "$", "element", ";", "}", "}", "catch", "(", "StaleElementReferenceException", "$", "e", ")", "{", "}", "}", "return", "count", "(", "$", "visibleElements", ")", ">", "0", "?", "$", "visibleElements", ":", "null", ";", "}", ")", ";", "}"], "docstring": "An expectation for checking than at least one element in an array of elements is present on the\nDOM of a page and visible.\nVisibility means that the element is not only displayed but also has a height and width that is greater than 0.\n\n@param WebDriverBy $by The located used to find the element.\n@return static Condition returns the array of WebDriverElement that are located and visible.", "docstring_tokens": ["An", "expectation", "for", "checking", "than", "at", "least", "one", "element", "in", "an", "array", "of", "elements", "is", "present", "on", "the", "DOM", "of", "a", "page", "and", "visible", ".", "Visibility", "means", "that", "the", "element", "is", "not", "only", "displayed", "but", "also", "has", "a", "height", "and", "width", "that", "is", "greater", "than", "0", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverExpectedCondition.php#L203-L222", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverExpectedCondition.php", "func_name": "WebDriverExpectedCondition.elementTextMatches", "original_string": "public static function elementTextMatches(WebDriverBy $by, $regexp)\n    {\n        return new static(\n            function (WebDriver $driver) use ($by, $regexp) {\n                try {\n                    return (bool) preg_match($regexp, $driver->findElement($by)->getText());\n                } catch (StaleElementReferenceException $e) {\n                    return null;\n                }\n            }\n        );\n    }", "language": "php", "code": "public static function elementTextMatches(WebDriverBy $by, $regexp)\n    {\n        return new static(\n            function (WebDriver $driver) use ($by, $regexp) {\n                try {\n                    return (bool) preg_match($regexp, $driver->findElement($by)->getText());\n                } catch (StaleElementReferenceException $e) {\n                    return null;\n                }\n            }\n        );\n    }", "code_tokens": ["public", "static", "function", "elementTextMatches", "(", "WebDriverBy", "$", "by", ",", "$", "regexp", ")", "{", "return", "new", "static", "(", "function", "(", "WebDriver", "$", "driver", ")", "use", "(", "$", "by", ",", "$", "regexp", ")", "{", "try", "{", "return", "(", "bool", ")", "preg_match", "(", "$", "regexp", ",", "$", "driver", "->", "findElement", "(", "$", "by", ")", "->", "getText", "(", ")", ")", ";", "}", "catch", "(", "StaleElementReferenceException", "$", "e", ")", "{", "return", "null", ";", "}", "}", ")", ";", "}"], "docstring": "An expectation for checking if the given regular expression matches the text in specified element.\n\n@param WebDriverBy $by The locator used to find the element.\n@param string $regexp The regular expression to test against.\n@return static Condition returns whether the element has text value equal to given one.", "docstring_tokens": ["An", "expectation", "for", "checking", "if", "the", "given", "regular", "expression", "matches", "the", "text", "in", "specified", "element", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverExpectedCondition.php#L306-L317", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverExpectedCondition.php", "func_name": "WebDriverExpectedCondition.elementValueContains", "original_string": "public static function elementValueContains(WebDriverBy $by, $text)\n    {\n        return new static(\n            function (WebDriver $driver) use ($by, $text) {\n                try {\n                    $element_text = $driver->findElement($by)->getAttribute('value');\n\n                    return mb_strpos($element_text, $text) !== false;\n                } catch (StaleElementReferenceException $e) {\n                    return null;\n                }\n            }\n        );\n    }", "language": "php", "code": "public static function elementValueContains(WebDriverBy $by, $text)\n    {\n        return new static(\n            function (WebDriver $driver) use ($by, $text) {\n                try {\n                    $element_text = $driver->findElement($by)->getAttribute('value');\n\n                    return mb_strpos($element_text, $text) !== false;\n                } catch (StaleElementReferenceException $e) {\n                    return null;\n                }\n            }\n        );\n    }", "code_tokens": ["public", "static", "function", "elementValueContains", "(", "WebDriverBy", "$", "by", ",", "$", "text", ")", "{", "return", "new", "static", "(", "function", "(", "WebDriver", "$", "driver", ")", "use", "(", "$", "by", ",", "$", "text", ")", "{", "try", "{", "$", "element_text", "=", "$", "driver", "->", "findElement", "(", "$", "by", ")", "->", "getAttribute", "(", "'value'", ")", ";", "return", "mb_strpos", "(", "$", "element_text", ",", "$", "text", ")", "!==", "false", ";", "}", "catch", "(", "StaleElementReferenceException", "$", "e", ")", "{", "return", "null", ";", "}", "}", ")", ";", "}"], "docstring": "An expectation for checking if the given text is present in the specified elements value attribute.\n\n@param WebDriverBy $by The locator used to find the element.\n@param string $text The text to be presented in the element value.\n@return static Condition returns whether the text is present in value attribute.", "docstring_tokens": ["An", "expectation", "for", "checking", "if", "the", "given", "text", "is", "present", "in", "the", "specified", "elements", "value", "attribute", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverExpectedCondition.php#L340-L353", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverExpectedCondition.php", "func_name": "WebDriverExpectedCondition.frameToBeAvailableAndSwitchToIt", "original_string": "public static function frameToBeAvailableAndSwitchToIt($frame_locator)\n    {\n        return new static(\n            function (WebDriver $driver) use ($frame_locator) {\n                try {\n                    return $driver->switchTo()->frame($frame_locator);\n                } catch (NoSuchFrameException $e) {\n                    return false;\n                }\n            }\n        );\n    }", "language": "php", "code": "public static function frameToBeAvailableAndSwitchToIt($frame_locator)\n    {\n        return new static(\n            function (WebDriver $driver) use ($frame_locator) {\n                try {\n                    return $driver->switchTo()->frame($frame_locator);\n                } catch (NoSuchFrameException $e) {\n                    return false;\n                }\n            }\n        );\n    }", "code_tokens": ["public", "static", "function", "frameToBeAvailableAndSwitchToIt", "(", "$", "frame_locator", ")", "{", "return", "new", "static", "(", "function", "(", "WebDriver", "$", "driver", ")", "use", "(", "$", "frame_locator", ")", "{", "try", "{", "return", "$", "driver", "->", "switchTo", "(", ")", "->", "frame", "(", "$", "frame_locator", ")", ";", "}", "catch", "(", "NoSuchFrameException", "$", "e", ")", "{", "return", "false", ";", "}", "}", ")", ";", "}"], "docstring": "Expectation for checking if iFrame exists. If iFrame exists switches driver's focus to the iFrame.\n\n@param string $frame_locator The locator used to find the iFrame\nexpected to be either the id or name value of the i/frame\n@return static Condition returns object focused on new frame when frame is found, false otherwise.", "docstring_tokens": ["Expectation", "for", "checking", "if", "iFrame", "exists", ".", "If", "iFrame", "exists", "switches", "driver", "s", "focus", "to", "the", "iFrame", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverExpectedCondition.php#L362-L373", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverExpectedCondition.php", "func_name": "WebDriverExpectedCondition.invisibilityOfElementLocated", "original_string": "public static function invisibilityOfElementLocated(WebDriverBy $by)\n    {\n        return new static(\n            function (WebDriver $driver) use ($by) {\n                try {\n                    return !$driver->findElement($by)->isDisplayed();\n                } catch (NoSuchElementException $e) {\n                    return true;\n                } catch (StaleElementReferenceException $e) {\n                    return true;\n                }\n            }\n        );\n    }", "language": "php", "code": "public static function invisibilityOfElementLocated(WebDriverBy $by)\n    {\n        return new static(\n            function (WebDriver $driver) use ($by) {\n                try {\n                    return !$driver->findElement($by)->isDisplayed();\n                } catch (NoSuchElementException $e) {\n                    return true;\n                } catch (StaleElementReferenceException $e) {\n                    return true;\n                }\n            }\n        );\n    }", "code_tokens": ["public", "static", "function", "invisibilityOfElementLocated", "(", "WebDriverBy", "$", "by", ")", "{", "return", "new", "static", "(", "function", "(", "WebDriver", "$", "driver", ")", "use", "(", "$", "by", ")", "{", "try", "{", "return", "!", "$", "driver", "->", "findElement", "(", "$", "by", ")", "->", "isDisplayed", "(", ")", ";", "}", "catch", "(", "NoSuchElementException", "$", "e", ")", "{", "return", "true", ";", "}", "catch", "(", "StaleElementReferenceException", "$", "e", ")", "{", "return", "true", ";", "}", "}", ")", ";", "}"], "docstring": "An expectation for checking that an element is either invisible or not present on the DOM.\n\n@param WebDriverBy $by The locator used to find the element.\n@return static Condition returns whether no visible element located.", "docstring_tokens": ["An", "expectation", "for", "checking", "that", "an", "element", "is", "either", "invisible", "or", "not", "present", "on", "the", "DOM", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverExpectedCondition.php#L381-L394", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverExpectedCondition.php", "func_name": "WebDriverExpectedCondition.invisibilityOfElementWithText", "original_string": "public static function invisibilityOfElementWithText(WebDriverBy $by, $text)\n    {\n        return new static(\n            function (WebDriver $driver) use ($by, $text) {\n                try {\n                    return !($driver->findElement($by)->getText() === $text);\n                } catch (NoSuchElementException $e) {\n                    return true;\n                } catch (StaleElementReferenceException $e) {\n                    return true;\n                }\n            }\n        );\n    }", "language": "php", "code": "public static function invisibilityOfElementWithText(WebDriverBy $by, $text)\n    {\n        return new static(\n            function (WebDriver $driver) use ($by, $text) {\n                try {\n                    return !($driver->findElement($by)->getText() === $text);\n                } catch (NoSuchElementException $e) {\n                    return true;\n                } catch (StaleElementReferenceException $e) {\n                    return true;\n                }\n            }\n        );\n    }", "code_tokens": ["public", "static", "function", "invisibilityOfElementWithText", "(", "WebDriverBy", "$", "by", ",", "$", "text", ")", "{", "return", "new", "static", "(", "function", "(", "WebDriver", "$", "driver", ")", "use", "(", "$", "by", ",", "$", "text", ")", "{", "try", "{", "return", "!", "(", "$", "driver", "->", "findElement", "(", "$", "by", ")", "->", "getText", "(", ")", "===", "$", "text", ")", ";", "}", "catch", "(", "NoSuchElementException", "$", "e", ")", "{", "return", "true", ";", "}", "catch", "(", "StaleElementReferenceException", "$", "e", ")", "{", "return", "true", ";", "}", "}", ")", ";", "}"], "docstring": "An expectation for checking that an element with text is either invisible or not present on the DOM.\n\n@param WebDriverBy $by The locator used to find the element.\n@param string $text The text of the element.\n@return static Condition returns whether the text is found in the element located.", "docstring_tokens": ["An", "expectation", "for", "checking", "that", "an", "element", "with", "text", "is", "either", "invisible", "or", "not", "present", "on", "the", "DOM", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverExpectedCondition.php#L403-L416", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverExpectedCondition.php", "func_name": "WebDriverExpectedCondition.elementToBeClickable", "original_string": "public static function elementToBeClickable(WebDriverBy $by)\n    {\n        $visibility_of_element_located =\n            self::visibilityOfElementLocated($by);\n\n        return new static(\n            function (WebDriver $driver) use ($visibility_of_element_located) {\n                $element = call_user_func(\n                    $visibility_of_element_located->getApply(),\n                    $driver\n                );\n                try {\n                    if ($element !== null && $element->isEnabled()) {\n                        return $element;\n                    }\n\n                    return null;\n                } catch (StaleElementReferenceException $e) {\n                    return null;\n                }\n            }\n        );\n    }", "language": "php", "code": "public static function elementToBeClickable(WebDriverBy $by)\n    {\n        $visibility_of_element_located =\n            self::visibilityOfElementLocated($by);\n\n        return new static(\n            function (WebDriver $driver) use ($visibility_of_element_located) {\n                $element = call_user_func(\n                    $visibility_of_element_located->getApply(),\n                    $driver\n                );\n                try {\n                    if ($element !== null && $element->isEnabled()) {\n                        return $element;\n                    }\n\n                    return null;\n                } catch (StaleElementReferenceException $e) {\n                    return null;\n                }\n            }\n        );\n    }", "code_tokens": ["public", "static", "function", "elementToBeClickable", "(", "WebDriverBy", "$", "by", ")", "{", "$", "visibility_of_element_located", "=", "self", "::", "visibilityOfElementLocated", "(", "$", "by", ")", ";", "return", "new", "static", "(", "function", "(", "WebDriver", "$", "driver", ")", "use", "(", "$", "visibility_of_element_located", ")", "{", "$", "element", "=", "call_user_func", "(", "$", "visibility_of_element_located", "->", "getApply", "(", ")", ",", "$", "driver", ")", ";", "try", "{", "if", "(", "$", "element", "!==", "null", "&&", "$", "element", "->", "isEnabled", "(", ")", ")", "{", "return", "$", "element", ";", "}", "return", "null", ";", "}", "catch", "(", "StaleElementReferenceException", "$", "e", ")", "{", "return", "null", ";", "}", "}", ")", ";", "}"], "docstring": "An expectation for checking an element is visible and enabled such that you can click it.\n\n@param WebDriverBy $by The locator used to find the element\n@return static Condition return the WebDriverElement once it is located, visible and clickable.", "docstring_tokens": ["An", "expectation", "for", "checking", "an", "element", "is", "visible", "and", "enabled", "such", "that", "you", "can", "click", "it", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverExpectedCondition.php#L424-L446", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverExpectedCondition.php", "func_name": "WebDriverExpectedCondition.stalenessOf", "original_string": "public static function stalenessOf(WebDriverElement $element)\n    {\n        return new static(\n            function () use ($element) {\n                try {\n                    $element->isEnabled();\n\n                    return false;\n                } catch (StaleElementReferenceException $e) {\n                    return true;\n                }\n            }\n        );\n    }", "language": "php", "code": "public static function stalenessOf(WebDriverElement $element)\n    {\n        return new static(\n            function () use ($element) {\n                try {\n                    $element->isEnabled();\n\n                    return false;\n                } catch (StaleElementReferenceException $e) {\n                    return true;\n                }\n            }\n        );\n    }", "code_tokens": ["public", "static", "function", "stalenessOf", "(", "WebDriverElement", "$", "element", ")", "{", "return", "new", "static", "(", "function", "(", ")", "use", "(", "$", "element", ")", "{", "try", "{", "$", "element", "->", "isEnabled", "(", ")", ";", "return", "false", ";", "}", "catch", "(", "StaleElementReferenceException", "$", "e", ")", "{", "return", "true", ";", "}", "}", ")", ";", "}"], "docstring": "Wait until an element is no longer attached to the DOM.\n\n@param WebDriverElement $element The element to wait for.\n@return static Condition returns whether the element is still attached to the DOM.", "docstring_tokens": ["Wait", "until", "an", "element", "is", "no", "longer", "attached", "to", "the", "DOM", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverExpectedCondition.php#L454-L467", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverExpectedCondition.php", "func_name": "WebDriverExpectedCondition.refreshed", "original_string": "public static function refreshed(self $condition)\n    {\n        return new static(\n            function (WebDriver $driver) use ($condition) {\n                try {\n                    return call_user_func($condition->getApply(), $driver);\n                } catch (StaleElementReferenceException $e) {\n                    return null;\n                }\n            }\n        );\n    }", "language": "php", "code": "public static function refreshed(self $condition)\n    {\n        return new static(\n            function (WebDriver $driver) use ($condition) {\n                try {\n                    return call_user_func($condition->getApply(), $driver);\n                } catch (StaleElementReferenceException $e) {\n                    return null;\n                }\n            }\n        );\n    }", "code_tokens": ["public", "static", "function", "refreshed", "(", "self", "$", "condition", ")", "{", "return", "new", "static", "(", "function", "(", "WebDriver", "$", "driver", ")", "use", "(", "$", "condition", ")", "{", "try", "{", "return", "call_user_func", "(", "$", "condition", "->", "getApply", "(", ")", ",", "$", "driver", ")", ";", "}", "catch", "(", "StaleElementReferenceException", "$", "e", ")", "{", "return", "null", ";", "}", "}", ")", ";", "}"], "docstring": "Wrapper for a condition, which allows for elements to update by redrawing.\n\nThis works around the problem of conditions which have two parts: find an element and then check for some\ncondition on it. For these conditions it is possible that an element is located and then subsequently it is\nredrawn on the client. When this happens a StaleElementReferenceException is thrown when the second part of\nthe condition is checked.\n\n@param WebDriverExpectedCondition $condition The condition wrapped.\n@return static Condition returns the return value of the getApply() of the given condition.", "docstring_tokens": ["Wrapper", "for", "a", "condition", "which", "allows", "for", "elements", "to", "update", "by", "redrawing", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverExpectedCondition.php#L480-L491", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverExpectedCondition.php", "func_name": "WebDriverExpectedCondition.elementSelectionStateToBe", "original_string": "public static function elementSelectionStateToBe($element_or_by, $selected)\n    {\n        if ($element_or_by instanceof WebDriverElement) {\n            return new static(\n                function () use ($element_or_by, $selected) {\n                    return $element_or_by->isSelected() === $selected;\n                }\n            );\n        } else {\n            if ($element_or_by instanceof WebDriverBy) {\n                return new static(\n                    function (WebDriver $driver) use ($element_or_by, $selected) {\n                        try {\n                            $element = $driver->findElement($element_or_by);\n\n                            return $element->isSelected() === $selected;\n                        } catch (StaleElementReferenceException $e) {\n                            return null;\n                        }\n                    }\n                );\n            }\n        }\n    }", "language": "php", "code": "public static function elementSelectionStateToBe($element_or_by, $selected)\n    {\n        if ($element_or_by instanceof WebDriverElement) {\n            return new static(\n                function () use ($element_or_by, $selected) {\n                    return $element_or_by->isSelected() === $selected;\n                }\n            );\n        } else {\n            if ($element_or_by instanceof WebDriverBy) {\n                return new static(\n                    function (WebDriver $driver) use ($element_or_by, $selected) {\n                        try {\n                            $element = $driver->findElement($element_or_by);\n\n                            return $element->isSelected() === $selected;\n                        } catch (StaleElementReferenceException $e) {\n                            return null;\n                        }\n                    }\n                );\n            }\n        }\n    }", "code_tokens": ["public", "static", "function", "elementSelectionStateToBe", "(", "$", "element_or_by", ",", "$", "selected", ")", "{", "if", "(", "$", "element_or_by", "instanceof", "WebDriverElement", ")", "{", "return", "new", "static", "(", "function", "(", ")", "use", "(", "$", "element_or_by", ",", "$", "selected", ")", "{", "return", "$", "element_or_by", "->", "isSelected", "(", ")", "===", "$", "selected", ";", "}", ")", ";", "}", "else", "{", "if", "(", "$", "element_or_by", "instanceof", "WebDriverBy", ")", "{", "return", "new", "static", "(", "function", "(", "WebDriver", "$", "driver", ")", "use", "(", "$", "element_or_by", ",", "$", "selected", ")", "{", "try", "{", "$", "element", "=", "$", "driver", "->", "findElement", "(", "$", "element_or_by", ")", ";", "return", "$", "element", "->", "isSelected", "(", ")", "===", "$", "selected", ";", "}", "catch", "(", "StaleElementReferenceException", "$", "e", ")", "{", "return", "null", ";", "}", "}", ")", ";", "}", "}", "}"], "docstring": "An expectation for checking if the given element is selected.\n\n@param mixed $element_or_by Either the element or the locator.\n@param bool $selected The required state.\n@return static Condition returns whether the element is selected.", "docstring_tokens": ["An", "expectation", "for", "checking", "if", "the", "given", "element", "is", "selected", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverExpectedCondition.php#L514-L537", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverExpectedCondition.php", "func_name": "WebDriverExpectedCondition.not", "original_string": "public static function not(self $condition)\n    {\n        return new static(\n            function (WebDriver $driver) use ($condition) {\n                $result = call_user_func($condition->getApply(), $driver);\n\n                return !$result;\n            }\n        );\n    }", "language": "php", "code": "public static function not(self $condition)\n    {\n        return new static(\n            function (WebDriver $driver) use ($condition) {\n                $result = call_user_func($condition->getApply(), $driver);\n\n                return !$result;\n            }\n        );\n    }", "code_tokens": ["public", "static", "function", "not", "(", "self", "$", "condition", ")", "{", "return", "new", "static", "(", "function", "(", "WebDriver", "$", "driver", ")", "use", "(", "$", "condition", ")", "{", "$", "result", "=", "call_user_func", "(", "$", "condition", "->", "getApply", "(", ")", ",", "$", "driver", ")", ";", "return", "!", "$", "result", ";", "}", ")", ";", "}"], "docstring": "An expectation with the logical opposite condition of the given condition.\n\n@param WebDriverExpectedCondition $condition The condition to be negated.\n@return mixed The negation of the result of the given condition.", "docstring_tokens": ["An", "expectation", "with", "the", "logical", "opposite", "condition", "of", "the", "given", "condition", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverExpectedCondition.php#L584-L593", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/AbstractWebDriverCheckboxOrRadio.php", "func_name": "AbstractWebDriverCheckboxOrRadio.byIndex", "original_string": "protected function byIndex($index, $select = true)\n    {\n        $elements = $this->getRelatedElements();\n        if (!isset($elements[$index])) {\n            throw new NoSuchElementException(sprintf('Cannot locate %s with index: %d', $this->type, $index));\n        }\n\n        $select ? $this->selectOption($elements[$index]) : $this->deselectOption($elements[$index]);\n    }", "language": "php", "code": "protected function byIndex($index, $select = true)\n    {\n        $elements = $this->getRelatedElements();\n        if (!isset($elements[$index])) {\n            throw new NoSuchElementException(sprintf('Cannot locate %s with index: %d', $this->type, $index));\n        }\n\n        $select ? $this->selectOption($elements[$index]) : $this->deselectOption($elements[$index]);\n    }", "code_tokens": ["protected", "function", "byIndex", "(", "$", "index", ",", "$", "select", "=", "true", ")", "{", "$", "elements", "=", "$", "this", "->", "getRelatedElements", "(", ")", ";", "if", "(", "!", "isset", "(", "$", "elements", "[", "$", "index", "]", ")", ")", "{", "throw", "new", "NoSuchElementException", "(", "sprintf", "(", "'Cannot locate %s with index: %d'", ",", "$", "this", "->", "type", ",", "$", "index", ")", ")", ";", "}", "$", "select", "?", "$", "this", "->", "selectOption", "(", "$", "elements", "[", "$", "index", "]", ")", ":", "$", "this", "->", "deselectOption", "(", "$", "elements", "[", "$", "index", "]", ")", ";", "}"], "docstring": "Selects or deselects a checkbox or a radio button by its index.\n\n@param int $index\n@param bool $select\n@throws NoSuchElementException", "docstring_tokens": ["Selects", "or", "deselects", "a", "checkbox", "or", "a", "radio", "button", "by", "its", "index", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/AbstractWebDriverCheckboxOrRadio.php#L139-L147", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteTargetLocator.php", "func_name": "RemoteTargetLocator.defaultContent", "original_string": "public function defaultContent()\n    {\n        $params = ['id' => null];\n        $this->executor->execute(DriverCommand::SWITCH_TO_FRAME, $params);\n\n        return $this->driver;\n    }", "language": "php", "code": "public function defaultContent()\n    {\n        $params = ['id' => null];\n        $this->executor->execute(DriverCommand::SWITCH_TO_FRAME, $params);\n\n        return $this->driver;\n    }", "code_tokens": ["public", "function", "defaultContent", "(", ")", "{", "$", "params", "=", "[", "'id'", "=>", "null", "]", ";", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "SWITCH_TO_FRAME", ",", "$", "params", ")", ";", "return", "$", "this", "->", "driver", ";", "}"], "docstring": "Switch to the main document if the page contains iframes. Otherwise, switch\nto the first frame on the page.\n\n@return WebDriver The driver focused on the top window or the first frame.", "docstring_tokens": ["Switch", "to", "the", "main", "document", "if", "the", "page", "contains", "iframes", ".", "Otherwise", "switch", "to", "the", "first", "frame", "on", "the", "page", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteTargetLocator.php#L49-L55", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteTargetLocator.php", "func_name": "RemoteTargetLocator.frame", "original_string": "public function frame($frame)\n    {\n        if ($frame instanceof WebDriverElement) {\n            $id = ['ELEMENT' => $frame->getID()];\n        } else {\n            $id = (string) $frame;\n        }\n\n        $params = ['id' => $id];\n        $this->executor->execute(DriverCommand::SWITCH_TO_FRAME, $params);\n\n        return $this->driver;\n    }", "language": "php", "code": "public function frame($frame)\n    {\n        if ($frame instanceof WebDriverElement) {\n            $id = ['ELEMENT' => $frame->getID()];\n        } else {\n            $id = (string) $frame;\n        }\n\n        $params = ['id' => $id];\n        $this->executor->execute(DriverCommand::SWITCH_TO_FRAME, $params);\n\n        return $this->driver;\n    }", "code_tokens": ["public", "function", "frame", "(", "$", "frame", ")", "{", "if", "(", "$", "frame", "instanceof", "WebDriverElement", ")", "{", "$", "id", "=", "[", "'ELEMENT'", "=>", "$", "frame", "->", "getID", "(", ")", "]", ";", "}", "else", "{", "$", "id", "=", "(", "string", ")", "$", "frame", ";", "}", "$", "params", "=", "[", "'id'", "=>", "$", "id", "]", ";", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "SWITCH_TO_FRAME", ",", "$", "params", ")", ";", "return", "$", "this", "->", "driver", ";", "}"], "docstring": "Switch to the iframe by its id or name.\n\n@param WebDriverElement|string $frame The WebDriverElement,\nthe id or the name of the frame.\n@return WebDriver The driver focused on the given frame.", "docstring_tokens": ["Switch", "to", "the", "iframe", "by", "its", "id", "or", "name", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteTargetLocator.php#L64-L76", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteTargetLocator.php", "func_name": "RemoteTargetLocator.window", "original_string": "public function window($handle)\n    {\n        $params = ['name' => (string) $handle];\n        $this->executor->execute(DriverCommand::SWITCH_TO_WINDOW, $params);\n\n        return $this->driver;\n    }", "language": "php", "code": "public function window($handle)\n    {\n        $params = ['name' => (string) $handle];\n        $this->executor->execute(DriverCommand::SWITCH_TO_WINDOW, $params);\n\n        return $this->driver;\n    }", "code_tokens": ["public", "function", "window", "(", "$", "handle", ")", "{", "$", "params", "=", "[", "'name'", "=>", "(", "string", ")", "$", "handle", "]", ";", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "SWITCH_TO_WINDOW", ",", "$", "params", ")", ";", "return", "$", "this", "->", "driver", ";", "}"], "docstring": "Switch the focus to another window by its handle.\n\n@param string $handle The handle of the window to be focused on.\n@return WebDriver The driver focused on the given window.\n@see WebDriver::getWindowHandles", "docstring_tokens": ["Switch", "the", "focus", "to", "another", "window", "by", "its", "handle", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteTargetLocator.php#L85-L91", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteTargetLocator.php", "func_name": "RemoteTargetLocator.activeElement", "original_string": "public function activeElement()\n    {\n        $response = $this->driver->execute(DriverCommand::GET_ACTIVE_ELEMENT, []);\n        $method = new RemoteExecuteMethod($this->driver);\n\n        return new RemoteWebElement($method, $response['ELEMENT']);\n    }", "language": "php", "code": "public function activeElement()\n    {\n        $response = $this->driver->execute(DriverCommand::GET_ACTIVE_ELEMENT, []);\n        $method = new RemoteExecuteMethod($this->driver);\n\n        return new RemoteWebElement($method, $response['ELEMENT']);\n    }", "code_tokens": ["public", "function", "activeElement", "(", ")", "{", "$", "response", "=", "$", "this", "->", "driver", "->", "execute", "(", "DriverCommand", "::", "GET_ACTIVE_ELEMENT", ",", "[", "]", ")", ";", "$", "method", "=", "new", "RemoteExecuteMethod", "(", "$", "this", "->", "driver", ")", ";", "return", "new", "RemoteWebElement", "(", "$", "method", ",", "$", "response", "[", "'ELEMENT'", "]", ")", ";", "}"], "docstring": "Switches to the element that currently has focus within the document\ncurrently \"switched to\", or the body element if this cannot be detected.\n\n@return RemoteWebElement", "docstring_tokens": ["Switches", "to", "the", "element", "that", "currently", "has", "focus", "within", "the", "document", "currently", "switched", "to", "or", "the", "body", "element", "if", "this", "cannot", "be", "detected", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteTargetLocator.php#L110-L116", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteWebElement.php", "func_name": "RemoteWebElement.findElement", "original_string": "public function findElement(WebDriverBy $by)\n    {\n        $params = [\n            'using' => $by->getMechanism(),\n            'value' => $by->getValue(),\n            ':id' => $this->id,\n        ];\n        $raw_element = $this->executor->execute(\n            DriverCommand::FIND_CHILD_ELEMENT,\n            $params\n        );\n\n        return $this->newElement($raw_element['ELEMENT']);\n    }", "language": "php", "code": "public function findElement(WebDriverBy $by)\n    {\n        $params = [\n            'using' => $by->getMechanism(),\n            'value' => $by->getValue(),\n            ':id' => $this->id,\n        ];\n        $raw_element = $this->executor->execute(\n            DriverCommand::FIND_CHILD_ELEMENT,\n            $params\n        );\n\n        return $this->newElement($raw_element['ELEMENT']);\n    }", "code_tokens": ["public", "function", "findElement", "(", "WebDriverBy", "$", "by", ")", "{", "$", "params", "=", "[", "'using'", "=>", "$", "by", "->", "getMechanism", "(", ")", ",", "'value'", "=>", "$", "by", "->", "getValue", "(", ")", ",", "':id'", "=>", "$", "this", "->", "id", ",", "]", ";", "$", "raw_element", "=", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "FIND_CHILD_ELEMENT", ",", "$", "params", ")", ";", "return", "$", "this", "->", "newElement", "(", "$", "raw_element", "[", "'ELEMENT'", "]", ")", ";", "}"], "docstring": "Find the first WebDriverElement within this element using the given mechanism.\n\n@param WebDriverBy $by\n@return RemoteWebElement NoSuchElementException is thrown in\nHttpCommandExecutor if no element is found.\n@see WebDriverBy", "docstring_tokens": ["Find", "the", "first", "WebDriverElement", "within", "this", "element", "using", "the", "given", "mechanism", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteWebElement.php#L95-L108", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteWebElement.php", "func_name": "RemoteWebElement.findElements", "original_string": "public function findElements(WebDriverBy $by)\n    {\n        $params = [\n            'using' => $by->getMechanism(),\n            'value' => $by->getValue(),\n            ':id' => $this->id,\n        ];\n        $raw_elements = $this->executor->execute(\n            DriverCommand::FIND_CHILD_ELEMENTS,\n            $params\n        );\n\n        $elements = [];\n        foreach ($raw_elements as $raw_element) {\n            $elements[] = $this->newElement($raw_element['ELEMENT']);\n        }\n\n        return $elements;\n    }", "language": "php", "code": "public function findElements(WebDriverBy $by)\n    {\n        $params = [\n            'using' => $by->getMechanism(),\n            'value' => $by->getValue(),\n            ':id' => $this->id,\n        ];\n        $raw_elements = $this->executor->execute(\n            DriverCommand::FIND_CHILD_ELEMENTS,\n            $params\n        );\n\n        $elements = [];\n        foreach ($raw_elements as $raw_element) {\n            $elements[] = $this->newElement($raw_element['ELEMENT']);\n        }\n\n        return $elements;\n    }", "code_tokens": ["public", "function", "findElements", "(", "WebDriverBy", "$", "by", ")", "{", "$", "params", "=", "[", "'using'", "=>", "$", "by", "->", "getMechanism", "(", ")", ",", "'value'", "=>", "$", "by", "->", "getValue", "(", ")", ",", "':id'", "=>", "$", "this", "->", "id", ",", "]", ";", "$", "raw_elements", "=", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "FIND_CHILD_ELEMENTS", ",", "$", "params", ")", ";", "$", "elements", "=", "[", "]", ";", "foreach", "(", "$", "raw_elements", "as", "$", "raw_element", ")", "{", "$", "elements", "[", "]", "=", "$", "this", "->", "newElement", "(", "$", "raw_element", "[", "'ELEMENT'", "]", ")", ";", "}", "return", "$", "elements", ";", "}"], "docstring": "Find all WebDriverElements within this element using the given mechanism.\n\n@param WebDriverBy $by\n@return RemoteWebElement[] A list of all WebDriverElements, or an empty\narray if nothing matches\n@see WebDriverBy", "docstring_tokens": ["Find", "all", "WebDriverElements", "within", "this", "element", "using", "the", "given", "mechanism", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteWebElement.php#L118-L136", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteWebElement.php", "func_name": "RemoteWebElement.getAttribute", "original_string": "public function getAttribute($attribute_name)\n    {\n        $params = [\n            ':name' => $attribute_name,\n            ':id' => $this->id,\n        ];\n\n        return $this->executor->execute(\n            DriverCommand::GET_ELEMENT_ATTRIBUTE,\n            $params\n        );\n    }", "language": "php", "code": "public function getAttribute($attribute_name)\n    {\n        $params = [\n            ':name' => $attribute_name,\n            ':id' => $this->id,\n        ];\n\n        return $this->executor->execute(\n            DriverCommand::GET_ELEMENT_ATTRIBUTE,\n            $params\n        );\n    }", "code_tokens": ["public", "function", "getAttribute", "(", "$", "attribute_name", ")", "{", "$", "params", "=", "[", "':name'", "=>", "$", "attribute_name", ",", "':id'", "=>", "$", "this", "->", "id", ",", "]", ";", "return", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "GET_ELEMENT_ATTRIBUTE", ",", "$", "params", ")", ";", "}"], "docstring": "Get the value of a the given attribute of the element.\n\n@param string $attribute_name The name of the attribute.\n@return string|null The value of the attribute.", "docstring_tokens": ["Get", "the", "value", "of", "a", "the", "given", "attribute", "of", "the", "element", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteWebElement.php#L144-L155", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteWebElement.php", "func_name": "RemoteWebElement.getCSSValue", "original_string": "public function getCSSValue($css_property_name)\n    {\n        $params = [\n            ':propertyName' => $css_property_name,\n            ':id' => $this->id,\n        ];\n\n        return $this->executor->execute(\n            DriverCommand::GET_ELEMENT_VALUE_OF_CSS_PROPERTY,\n            $params\n        );\n    }", "language": "php", "code": "public function getCSSValue($css_property_name)\n    {\n        $params = [\n            ':propertyName' => $css_property_name,\n            ':id' => $this->id,\n        ];\n\n        return $this->executor->execute(\n            DriverCommand::GET_ELEMENT_VALUE_OF_CSS_PROPERTY,\n            $params\n        );\n    }", "code_tokens": ["public", "function", "getCSSValue", "(", "$", "css_property_name", ")", "{", "$", "params", "=", "[", "':propertyName'", "=>", "$", "css_property_name", ",", "':id'", "=>", "$", "this", "->", "id", ",", "]", ";", "return", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "GET_ELEMENT_VALUE_OF_CSS_PROPERTY", ",", "$", "params", ")", ";", "}"], "docstring": "Get the value of a given CSS property.\n\n@param string $css_property_name The name of the CSS property.\n@return string The value of the CSS property.", "docstring_tokens": ["Get", "the", "value", "of", "a", "given", "CSS", "property", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteWebElement.php#L163-L174", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteWebElement.php", "func_name": "RemoteWebElement.getLocation", "original_string": "public function getLocation()\n    {\n        $location = $this->executor->execute(\n            DriverCommand::GET_ELEMENT_LOCATION,\n            [':id' => $this->id]\n        );\n\n        return new WebDriverPoint($location['x'], $location['y']);\n    }", "language": "php", "code": "public function getLocation()\n    {\n        $location = $this->executor->execute(\n            DriverCommand::GET_ELEMENT_LOCATION,\n            [':id' => $this->id]\n        );\n\n        return new WebDriverPoint($location['x'], $location['y']);\n    }", "code_tokens": ["public", "function", "getLocation", "(", ")", "{", "$", "location", "=", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "GET_ELEMENT_LOCATION", ",", "[", "':id'", "=>", "$", "this", "->", "id", "]", ")", ";", "return", "new", "WebDriverPoint", "(", "$", "location", "[", "'x'", "]", ",", "$", "location", "[", "'y'", "]", ")", ";", "}"], "docstring": "Get the location of element relative to the top-left corner of the page.\n\n@return WebDriverPoint The location of the element.", "docstring_tokens": ["Get", "the", "location", "of", "element", "relative", "to", "the", "top", "-", "left", "corner", "of", "the", "page", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteWebElement.php#L181-L189", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteWebElement.php", "func_name": "RemoteWebElement.getLocationOnScreenOnceScrolledIntoView", "original_string": "public function getLocationOnScreenOnceScrolledIntoView()\n    {\n        $location = $this->executor->execute(\n            DriverCommand::GET_ELEMENT_LOCATION_ONCE_SCROLLED_INTO_VIEW,\n            [':id' => $this->id]\n        );\n\n        return new WebDriverPoint($location['x'], $location['y']);\n    }", "language": "php", "code": "public function getLocationOnScreenOnceScrolledIntoView()\n    {\n        $location = $this->executor->execute(\n            DriverCommand::GET_ELEMENT_LOCATION_ONCE_SCROLLED_INTO_VIEW,\n            [':id' => $this->id]\n        );\n\n        return new WebDriverPoint($location['x'], $location['y']);\n    }", "code_tokens": ["public", "function", "getLocationOnScreenOnceScrolledIntoView", "(", ")", "{", "$", "location", "=", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "GET_ELEMENT_LOCATION_ONCE_SCROLLED_INTO_VIEW", ",", "[", "':id'", "=>", "$", "this", "->", "id", "]", ")", ";", "return", "new", "WebDriverPoint", "(", "$", "location", "[", "'x'", "]", ",", "$", "location", "[", "'y'", "]", ")", ";", "}"], "docstring": "Try scrolling the element into the view port and return the location of\nelement relative to the top-left corner of the page afterwards.\n\n@return WebDriverPoint The location of the element.", "docstring_tokens": ["Try", "scrolling", "the", "element", "into", "the", "view", "port", "and", "return", "the", "location", "of", "element", "relative", "to", "the", "top", "-", "left", "corner", "of", "the", "page", "afterwards", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteWebElement.php#L197-L205", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteWebElement.php", "func_name": "RemoteWebElement.getSize", "original_string": "public function getSize()\n    {\n        $size = $this->executor->execute(\n            DriverCommand::GET_ELEMENT_SIZE,\n            [':id' => $this->id]\n        );\n\n        return new WebDriverDimension($size['width'], $size['height']);\n    }", "language": "php", "code": "public function getSize()\n    {\n        $size = $this->executor->execute(\n            DriverCommand::GET_ELEMENT_SIZE,\n            [':id' => $this->id]\n        );\n\n        return new WebDriverDimension($size['width'], $size['height']);\n    }", "code_tokens": ["public", "function", "getSize", "(", ")", "{", "$", "size", "=", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "GET_ELEMENT_SIZE", ",", "[", "':id'", "=>", "$", "this", "->", "id", "]", ")", ";", "return", "new", "WebDriverDimension", "(", "$", "size", "[", "'width'", "]", ",", "$", "size", "[", "'height'", "]", ")", ";", "}"], "docstring": "Get the size of element.\n\n@return WebDriverDimension The dimension of the element.", "docstring_tokens": ["Get", "the", "size", "of", "element", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteWebElement.php#L236-L244", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteWebElement.php", "func_name": "RemoteWebElement.sendKeys", "original_string": "public function sendKeys($value)\n    {\n        $local_file = $this->fileDetector->getLocalFile($value);\n        if ($local_file === null) {\n            $params = [\n                'value' => WebDriverKeys::encode($value),\n                ':id' => $this->id,\n            ];\n            $this->executor->execute(DriverCommand::SEND_KEYS_TO_ELEMENT, $params);\n        } else {\n            $remote_path = $this->upload($local_file);\n            $params = [\n                'value' => WebDriverKeys::encode($remote_path),\n                ':id' => $this->id,\n            ];\n            $this->executor->execute(DriverCommand::SEND_KEYS_TO_ELEMENT, $params);\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function sendKeys($value)\n    {\n        $local_file = $this->fileDetector->getLocalFile($value);\n        if ($local_file === null) {\n            $params = [\n                'value' => WebDriverKeys::encode($value),\n                ':id' => $this->id,\n            ];\n            $this->executor->execute(DriverCommand::SEND_KEYS_TO_ELEMENT, $params);\n        } else {\n            $remote_path = $this->upload($local_file);\n            $params = [\n                'value' => WebDriverKeys::encode($remote_path),\n                ':id' => $this->id,\n            ];\n            $this->executor->execute(DriverCommand::SEND_KEYS_TO_ELEMENT, $params);\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "sendKeys", "(", "$", "value", ")", "{", "$", "local_file", "=", "$", "this", "->", "fileDetector", "->", "getLocalFile", "(", "$", "value", ")", ";", "if", "(", "$", "local_file", "===", "null", ")", "{", "$", "params", "=", "[", "'value'", "=>", "WebDriverKeys", "::", "encode", "(", "$", "value", ")", ",", "':id'", "=>", "$", "this", "->", "id", ",", "]", ";", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "SEND_KEYS_TO_ELEMENT", ",", "$", "params", ")", ";", "}", "else", "{", "$", "remote_path", "=", "$", "this", "->", "upload", "(", "$", "local_file", ")", ";", "$", "params", "=", "[", "'value'", "=>", "WebDriverKeys", "::", "encode", "(", "$", "remote_path", ")", ",", "':id'", "=>", "$", "this", "->", "id", ",", "]", ";", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "SEND_KEYS_TO_ELEMENT", ",", "$", "params", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Simulate typing into an element, which may set its value.\n\n@param mixed $value The data to be typed.\n@return RemoteWebElement The current instance.", "docstring_tokens": ["Simulate", "typing", "into", "an", "element", "which", "may", "set", "its", "value", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteWebElement.php#L324-L343", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteWebElement.php", "func_name": "RemoteWebElement.upload", "original_string": "protected function upload($local_file)\n    {\n        if (!is_file($local_file)) {\n            throw new WebDriverException('You may only upload files: ' . $local_file);\n        }\n\n        // Create a temporary file in the system temp directory.\n        $temp_zip = tempnam(sys_get_temp_dir(), 'WebDriverZip');\n        $zip = new ZipArchive();\n        if ($zip->open($temp_zip, ZipArchive::CREATE) !== true) {\n            return false;\n        }\n        $info = pathinfo($local_file);\n        $file_name = $info['basename'];\n        $zip->addFile($local_file, $file_name);\n        $zip->close();\n        $params = [\n            'file' => base64_encode(file_get_contents($temp_zip)),\n        ];\n        $remote_path = $this->executor->execute(\n            DriverCommand::UPLOAD_FILE,\n            $params\n        );\n        unlink($temp_zip);\n\n        return $remote_path;\n    }", "language": "php", "code": "protected function upload($local_file)\n    {\n        if (!is_file($local_file)) {\n            throw new WebDriverException('You may only upload files: ' . $local_file);\n        }\n\n        // Create a temporary file in the system temp directory.\n        $temp_zip = tempnam(sys_get_temp_dir(), 'WebDriverZip');\n        $zip = new ZipArchive();\n        if ($zip->open($temp_zip, ZipArchive::CREATE) !== true) {\n            return false;\n        }\n        $info = pathinfo($local_file);\n        $file_name = $info['basename'];\n        $zip->addFile($local_file, $file_name);\n        $zip->close();\n        $params = [\n            'file' => base64_encode(file_get_contents($temp_zip)),\n        ];\n        $remote_path = $this->executor->execute(\n            DriverCommand::UPLOAD_FILE,\n            $params\n        );\n        unlink($temp_zip);\n\n        return $remote_path;\n    }", "code_tokens": ["protected", "function", "upload", "(", "$", "local_file", ")", "{", "if", "(", "!", "is_file", "(", "$", "local_file", ")", ")", "{", "throw", "new", "WebDriverException", "(", "'You may only upload files: '", ".", "$", "local_file", ")", ";", "}", "$", "temp_zip", "=", "tempnam", "(", "sys_get_temp_dir", "(", ")", ",", "'WebDriverZip'", ")", ";", "$", "zip", "=", "new", "ZipArchive", "(", ")", ";", "if", "(", "$", "zip", "->", "open", "(", "$", "temp_zip", ",", "ZipArchive", "::", "CREATE", ")", "!==", "true", ")", "{", "return", "false", ";", "}", "$", "info", "=", "pathinfo", "(", "$", "local_file", ")", ";", "$", "file_name", "=", "$", "info", "[", "'basename'", "]", ";", "$", "zip", "->", "addFile", "(", "$", "local_file", ",", "$", "file_name", ")", ";", "$", "zip", "->", "close", "(", ")", ";", "$", "params", "=", "[", "'file'", "=>", "base64_encode", "(", "file_get_contents", "(", "$", "temp_zip", ")", ")", ",", "]", ";", "$", "remote_path", "=", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "UPLOAD_FILE", ",", "$", "params", ")", ";", "unlink", "(", "$", "temp_zip", ")", ";", "return", "$", "remote_path", ";", "}"], "docstring": "Upload a local file to the server\n\n@param string $local_file\n\n@throws WebDriverException\n@return string The remote path of the file.", "docstring_tokens": ["Upload", "a", "local", "file", "to", "the", "server"], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteWebElement.php#L426-L452", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverWindow.php", "func_name": "WebDriverWindow.getPosition", "original_string": "public function getPosition()\n    {\n        $position = $this->executor->execute(\n            DriverCommand::GET_WINDOW_POSITION,\n            [':windowHandle' => 'current']\n        );\n\n        return new WebDriverPoint(\n            $position['x'],\n            $position['y']\n        );\n    }", "language": "php", "code": "public function getPosition()\n    {\n        $position = $this->executor->execute(\n            DriverCommand::GET_WINDOW_POSITION,\n            [':windowHandle' => 'current']\n        );\n\n        return new WebDriverPoint(\n            $position['x'],\n            $position['y']\n        );\n    }", "code_tokens": ["public", "function", "getPosition", "(", ")", "{", "$", "position", "=", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "GET_WINDOW_POSITION", ",", "[", "':windowHandle'", "=>", "'current'", "]", ")", ";", "return", "new", "WebDriverPoint", "(", "$", "position", "[", "'x'", "]", ",", "$", "position", "[", "'y'", "]", ")", ";", "}"], "docstring": "Get the position of the current window, relative to the upper left corner\nof the screen.\n\n@return WebDriverPoint The current window position.", "docstring_tokens": ["Get", "the", "position", "of", "the", "current", "window", "relative", "to", "the", "upper", "left", "corner", "of", "the", "screen", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverWindow.php#L43-L54", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverWindow.php", "func_name": "WebDriverWindow.getSize", "original_string": "public function getSize()\n    {\n        $size = $this->executor->execute(\n            DriverCommand::GET_WINDOW_SIZE,\n            [':windowHandle' => 'current']\n        );\n\n        return new WebDriverDimension(\n            $size['width'],\n            $size['height']\n        );\n    }", "language": "php", "code": "public function getSize()\n    {\n        $size = $this->executor->execute(\n            DriverCommand::GET_WINDOW_SIZE,\n            [':windowHandle' => 'current']\n        );\n\n        return new WebDriverDimension(\n            $size['width'],\n            $size['height']\n        );\n    }", "code_tokens": ["public", "function", "getSize", "(", ")", "{", "$", "size", "=", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "GET_WINDOW_SIZE", ",", "[", "':windowHandle'", "=>", "'current'", "]", ")", ";", "return", "new", "WebDriverDimension", "(", "$", "size", "[", "'width'", "]", ",", "$", "size", "[", "'height'", "]", ")", ";", "}"], "docstring": "Get the size of the current window. This will return the outer window\ndimension, not just the view port.\n\n@return WebDriverDimension The current window size.", "docstring_tokens": ["Get", "the", "size", "of", "the", "current", "window", ".", "This", "will", "return", "the", "outer", "window", "dimension", "not", "just", "the", "view", "port", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverWindow.php#L62-L73", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverWindow.php", "func_name": "WebDriverWindow.setSize", "original_string": "public function setSize(WebDriverDimension $size)\n    {\n        $params = [\n            'width' => $size->getWidth(),\n            'height' => $size->getHeight(),\n            ':windowHandle' => 'current',\n        ];\n        $this->executor->execute(DriverCommand::SET_WINDOW_SIZE, $params);\n\n        return $this;\n    }", "language": "php", "code": "public function setSize(WebDriverDimension $size)\n    {\n        $params = [\n            'width' => $size->getWidth(),\n            'height' => $size->getHeight(),\n            ':windowHandle' => 'current',\n        ];\n        $this->executor->execute(DriverCommand::SET_WINDOW_SIZE, $params);\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setSize", "(", "WebDriverDimension", "$", "size", ")", "{", "$", "params", "=", "[", "'width'", "=>", "$", "size", "->", "getWidth", "(", ")", ",", "'height'", "=>", "$", "size", "->", "getHeight", "(", ")", ",", "':windowHandle'", "=>", "'current'", ",", "]", ";", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "SET_WINDOW_SIZE", ",", "$", "params", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Set the size of the current window. This will change the outer window\ndimension, not just the view port.\n\n@param WebDriverDimension $size\n@return WebDriverWindow The instance.", "docstring_tokens": ["Set", "the", "size", "of", "the", "current", "window", ".", "This", "will", "change", "the", "outer", "window", "dimension", "not", "just", "the", "view", "port", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverWindow.php#L97-L107", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverWindow.php", "func_name": "WebDriverWindow.setPosition", "original_string": "public function setPosition(WebDriverPoint $position)\n    {\n        $params = [\n            'x' => $position->getX(),\n            'y' => $position->getY(),\n            ':windowHandle' => 'current',\n        ];\n        $this->executor->execute(DriverCommand::SET_WINDOW_POSITION, $params);\n\n        return $this;\n    }", "language": "php", "code": "public function setPosition(WebDriverPoint $position)\n    {\n        $params = [\n            'x' => $position->getX(),\n            'y' => $position->getY(),\n            ':windowHandle' => 'current',\n        ];\n        $this->executor->execute(DriverCommand::SET_WINDOW_POSITION, $params);\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setPosition", "(", "WebDriverPoint", "$", "position", ")", "{", "$", "params", "=", "[", "'x'", "=>", "$", "position", "->", "getX", "(", ")", ",", "'y'", "=>", "$", "position", "->", "getY", "(", ")", ",", "':windowHandle'", "=>", "'current'", ",", "]", ";", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "SET_WINDOW_POSITION", ",", "$", "params", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Set the position of the current window. This is relative to the upper left\ncorner of the screen.\n\n@param WebDriverPoint $position\n@return WebDriverWindow The instance.", "docstring_tokens": ["Set", "the", "position", "of", "the", "current", "window", ".", "This", "is", "relative", "to", "the", "upper", "left", "corner", "of", "the", "screen", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverWindow.php#L116-L126", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverWindow.php", "func_name": "WebDriverWindow.setScreenOrientation", "original_string": "public function setScreenOrientation($orientation)\n    {\n        $orientation = mb_strtoupper($orientation);\n        if (!in_array($orientation, ['PORTRAIT', 'LANDSCAPE'])) {\n            throw new IndexOutOfBoundsException(\n                'Orientation must be either PORTRAIT, or LANDSCAPE'\n            );\n        }\n\n        $this->executor->execute(\n            DriverCommand::SET_SCREEN_ORIENTATION,\n            ['orientation' => $orientation]\n        );\n\n        return $this;\n    }", "language": "php", "code": "public function setScreenOrientation($orientation)\n    {\n        $orientation = mb_strtoupper($orientation);\n        if (!in_array($orientation, ['PORTRAIT', 'LANDSCAPE'])) {\n            throw new IndexOutOfBoundsException(\n                'Orientation must be either PORTRAIT, or LANDSCAPE'\n            );\n        }\n\n        $this->executor->execute(\n            DriverCommand::SET_SCREEN_ORIENTATION,\n            ['orientation' => $orientation]\n        );\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setScreenOrientation", "(", "$", "orientation", ")", "{", "$", "orientation", "=", "mb_strtoupper", "(", "$", "orientation", ")", ";", "if", "(", "!", "in_array", "(", "$", "orientation", ",", "[", "'PORTRAIT'", ",", "'LANDSCAPE'", "]", ")", ")", "{", "throw", "new", "IndexOutOfBoundsException", "(", "'Orientation must be either PORTRAIT, or LANDSCAPE'", ")", ";", "}", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "SET_SCREEN_ORIENTATION", ",", "[", "'orientation'", "=>", "$", "orientation", "]", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Set the browser orientation. The orientation should either\nLANDSCAPE|PORTRAIT\n\n@param string $orientation\n@throws IndexOutOfBoundsException\n@return WebDriverWindow The instance.", "docstring_tokens": ["Set", "the", "browser", "orientation", ".", "The", "orientation", "should", "either", "LANDSCAPE|PORTRAIT"], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverWindow.php#L146-L161", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/DesiredCapabilities.php", "func_name": "DesiredCapabilities.setJavascriptEnabled", "original_string": "public function setJavascriptEnabled($enabled)\n    {\n        $browser = $this->getBrowserName();\n        if ($browser && $browser !== WebDriverBrowserType::HTMLUNIT) {\n            throw new Exception(\n                'isJavascriptEnabled() is a htmlunit-only option. ' .\n                'See https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities#read-write-capabilities.'\n            );\n        }\n\n        $this->set(WebDriverCapabilityType::JAVASCRIPT_ENABLED, $enabled);\n\n        return $this;\n    }", "language": "php", "code": "public function setJavascriptEnabled($enabled)\n    {\n        $browser = $this->getBrowserName();\n        if ($browser && $browser !== WebDriverBrowserType::HTMLUNIT) {\n            throw new Exception(\n                'isJavascriptEnabled() is a htmlunit-only option. ' .\n                'See https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities#read-write-capabilities.'\n            );\n        }\n\n        $this->set(WebDriverCapabilityType::JAVASCRIPT_ENABLED, $enabled);\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setJavascriptEnabled", "(", "$", "enabled", ")", "{", "$", "browser", "=", "$", "this", "->", "getBrowserName", "(", ")", ";", "if", "(", "$", "browser", "&&", "$", "browser", "!==", "WebDriverBrowserType", "::", "HTMLUNIT", ")", "{", "throw", "new", "Exception", "(", "'isJavascriptEnabled() is a htmlunit-only option. '", ".", "'See https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities#read-write-capabilities.'", ")", ";", "}", "$", "this", "->", "set", "(", "WebDriverCapabilityType", "::", "JAVASCRIPT_ENABLED", ",", "$", "enabled", ")", ";", "return", "$", "this", ";", "}"], "docstring": "This is a htmlUnit-only option.\n\n@param bool $enabled\n@throws Exception\n@return DesiredCapabilities\n@see https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities#read-write-capabilities", "docstring_tokens": ["This", "is", "a", "htmlUnit", "-", "only", "option", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/DesiredCapabilities.php#L143-L156", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteWebDriver.php", "func_name": "RemoteWebDriver.create", "original_string": "public static function create(\n        $selenium_server_url = 'http://localhost:4444/wd/hub',\n        $desired_capabilities = null,\n        $connection_timeout_in_ms = null,\n        $request_timeout_in_ms = null,\n        $http_proxy = null,\n        $http_proxy_port = null,\n        DesiredCapabilities $required_capabilities = null\n    ) {\n        $selenium_server_url = preg_replace('#/+$#', '', $selenium_server_url);\n\n        $desired_capabilities = self::castToDesiredCapabilitiesObject($desired_capabilities);\n\n        $executor = new HttpCommandExecutor($selenium_server_url, $http_proxy, $http_proxy_port);\n        if ($connection_timeout_in_ms !== null) {\n            $executor->setConnectionTimeout($connection_timeout_in_ms);\n        }\n        if ($request_timeout_in_ms !== null) {\n            $executor->setRequestTimeout($request_timeout_in_ms);\n        }\n\n        if ($required_capabilities !== null) {\n            // TODO: Selenium (as of v3.0.1) does accept requiredCapabilities only as a property of desiredCapabilities.\n            // This will probably change in future with the W3C WebDriver spec, but is the only way how to pass these\n            // values now.\n            $desired_capabilities->setCapability('requiredCapabilities', $required_capabilities->toArray());\n        }\n\n        $command = new WebDriverCommand(\n            null,\n            DriverCommand::NEW_SESSION,\n            ['desiredCapabilities' => $desired_capabilities->toArray()]\n        );\n\n        $response = $executor->execute($command);\n        $returnedCapabilities = new DesiredCapabilities($response->getValue());\n\n        $driver = new static($executor, $response->getSessionID(), $returnedCapabilities);\n\n        return $driver;\n    }", "language": "php", "code": "public static function create(\n        $selenium_server_url = 'http://localhost:4444/wd/hub',\n        $desired_capabilities = null,\n        $connection_timeout_in_ms = null,\n        $request_timeout_in_ms = null,\n        $http_proxy = null,\n        $http_proxy_port = null,\n        DesiredCapabilities $required_capabilities = null\n    ) {\n        $selenium_server_url = preg_replace('#/+$#', '', $selenium_server_url);\n\n        $desired_capabilities = self::castToDesiredCapabilitiesObject($desired_capabilities);\n\n        $executor = new HttpCommandExecutor($selenium_server_url, $http_proxy, $http_proxy_port);\n        if ($connection_timeout_in_ms !== null) {\n            $executor->setConnectionTimeout($connection_timeout_in_ms);\n        }\n        if ($request_timeout_in_ms !== null) {\n            $executor->setRequestTimeout($request_timeout_in_ms);\n        }\n\n        if ($required_capabilities !== null) {\n            // TODO: Selenium (as of v3.0.1) does accept requiredCapabilities only as a property of desiredCapabilities.\n            // This will probably change in future with the W3C WebDriver spec, but is the only way how to pass these\n            // values now.\n            $desired_capabilities->setCapability('requiredCapabilities', $required_capabilities->toArray());\n        }\n\n        $command = new WebDriverCommand(\n            null,\n            DriverCommand::NEW_SESSION,\n            ['desiredCapabilities' => $desired_capabilities->toArray()]\n        );\n\n        $response = $executor->execute($command);\n        $returnedCapabilities = new DesiredCapabilities($response->getValue());\n\n        $driver = new static($executor, $response->getSessionID(), $returnedCapabilities);\n\n        return $driver;\n    }", "code_tokens": ["public", "static", "function", "create", "(", "$", "selenium_server_url", "=", "'http://localhost:4444/wd/hub'", ",", "$", "desired_capabilities", "=", "null", ",", "$", "connection_timeout_in_ms", "=", "null", ",", "$", "request_timeout_in_ms", "=", "null", ",", "$", "http_proxy", "=", "null", ",", "$", "http_proxy_port", "=", "null", ",", "DesiredCapabilities", "$", "required_capabilities", "=", "null", ")", "{", "$", "selenium_server_url", "=", "preg_replace", "(", "'#/+$#'", ",", "''", ",", "$", "selenium_server_url", ")", ";", "$", "desired_capabilities", "=", "self", "::", "castToDesiredCapabilitiesObject", "(", "$", "desired_capabilities", ")", ";", "$", "executor", "=", "new", "HttpCommandExecutor", "(", "$", "selenium_server_url", ",", "$", "http_proxy", ",", "$", "http_proxy_port", ")", ";", "if", "(", "$", "connection_timeout_in_ms", "!==", "null", ")", "{", "$", "executor", "->", "setConnectionTimeout", "(", "$", "connection_timeout_in_ms", ")", ";", "}", "if", "(", "$", "request_timeout_in_ms", "!==", "null", ")", "{", "$", "executor", "->", "setRequestTimeout", "(", "$", "request_timeout_in_ms", ")", ";", "}", "if", "(", "$", "required_capabilities", "!==", "null", ")", "{", "$", "desired_capabilities", "->", "setCapability", "(", "'requiredCapabilities'", ",", "$", "required_capabilities", "->", "toArray", "(", ")", ")", ";", "}", "$", "command", "=", "new", "WebDriverCommand", "(", "null", ",", "DriverCommand", "::", "NEW_SESSION", ",", "[", "'desiredCapabilities'", "=>", "$", "desired_capabilities", "->", "toArray", "(", ")", "]", ")", ";", "$", "response", "=", "$", "executor", "->", "execute", "(", "$", "command", ")", ";", "$", "returnedCapabilities", "=", "new", "DesiredCapabilities", "(", "$", "response", "->", "getValue", "(", ")", ")", ";", "$", "driver", "=", "new", "static", "(", "$", "executor", ",", "$", "response", "->", "getSessionID", "(", ")", ",", "$", "returnedCapabilities", ")", ";", "return", "$", "driver", ";", "}"], "docstring": "Construct the RemoteWebDriver by a desired capabilities.\n\n@param string $selenium_server_url The url of the remote Selenium WebDriver server\n@param DesiredCapabilities|array $desired_capabilities The desired capabilities\n@param int|null $connection_timeout_in_ms Set timeout for the connect phase to remote Selenium WebDriver server\n@param int|null $request_timeout_in_ms Set the maximum time of a request to remote Selenium WebDriver server\n@param string|null $http_proxy The proxy to tunnel requests to the remote Selenium WebDriver through\n@param int|null $http_proxy_port The proxy port to tunnel requests to the remote Selenium WebDriver through\n@param DesiredCapabilities $required_capabilities The required capabilities\n@return static", "docstring_tokens": ["Construct", "the", "RemoteWebDriver", "by", "a", "desired", "capabilities", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteWebDriver.php#L92-L132", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteWebDriver.php", "func_name": "RemoteWebDriver.findElement", "original_string": "public function findElement(WebDriverBy $by)\n    {\n        $params = ['using' => $by->getMechanism(), 'value' => $by->getValue()];\n        $raw_element = $this->execute(\n            DriverCommand::FIND_ELEMENT,\n            $params\n        );\n\n        return $this->newElement($raw_element['ELEMENT']);\n    }", "language": "php", "code": "public function findElement(WebDriverBy $by)\n    {\n        $params = ['using' => $by->getMechanism(), 'value' => $by->getValue()];\n        $raw_element = $this->execute(\n            DriverCommand::FIND_ELEMENT,\n            $params\n        );\n\n        return $this->newElement($raw_element['ELEMENT']);\n    }", "code_tokens": ["public", "function", "findElement", "(", "WebDriverBy", "$", "by", ")", "{", "$", "params", "=", "[", "'using'", "=>", "$", "by", "->", "getMechanism", "(", ")", ",", "'value'", "=>", "$", "by", "->", "getValue", "(", ")", "]", ";", "$", "raw_element", "=", "$", "this", "->", "execute", "(", "DriverCommand", "::", "FIND_ELEMENT", ",", "$", "params", ")", ";", "return", "$", "this", "->", "newElement", "(", "$", "raw_element", "[", "'ELEMENT'", "]", ")", ";", "}"], "docstring": "Find the first WebDriverElement using the given mechanism.\n\n@param WebDriverBy $by\n@return RemoteWebElement NoSuchElementException is thrown in HttpCommandExecutor if no element is found.\n@see WebDriverBy", "docstring_tokens": ["Find", "the", "first", "WebDriverElement", "using", "the", "given", "mechanism", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteWebDriver.php#L182-L191", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteWebDriver.php", "func_name": "RemoteWebDriver.findElements", "original_string": "public function findElements(WebDriverBy $by)\n    {\n        $params = ['using' => $by->getMechanism(), 'value' => $by->getValue()];\n        $raw_elements = $this->execute(\n            DriverCommand::FIND_ELEMENTS,\n            $params\n        );\n\n        $elements = [];\n        foreach ($raw_elements as $raw_element) {\n            $elements[] = $this->newElement($raw_element['ELEMENT']);\n        }\n\n        return $elements;\n    }", "language": "php", "code": "public function findElements(WebDriverBy $by)\n    {\n        $params = ['using' => $by->getMechanism(), 'value' => $by->getValue()];\n        $raw_elements = $this->execute(\n            DriverCommand::FIND_ELEMENTS,\n            $params\n        );\n\n        $elements = [];\n        foreach ($raw_elements as $raw_element) {\n            $elements[] = $this->newElement($raw_element['ELEMENT']);\n        }\n\n        return $elements;\n    }", "code_tokens": ["public", "function", "findElements", "(", "WebDriverBy", "$", "by", ")", "{", "$", "params", "=", "[", "'using'", "=>", "$", "by", "->", "getMechanism", "(", ")", ",", "'value'", "=>", "$", "by", "->", "getValue", "(", ")", "]", ";", "$", "raw_elements", "=", "$", "this", "->", "execute", "(", "DriverCommand", "::", "FIND_ELEMENTS", ",", "$", "params", ")", ";", "$", "elements", "=", "[", "]", ";", "foreach", "(", "$", "raw_elements", "as", "$", "raw_element", ")", "{", "$", "elements", "[", "]", "=", "$", "this", "->", "newElement", "(", "$", "raw_element", "[", "'ELEMENT'", "]", ")", ";", "}", "return", "$", "elements", ";", "}"], "docstring": "Find all WebDriverElements within the current page using the given mechanism.\n\n@param WebDriverBy $by\n@return RemoteWebElement[] A list of all WebDriverElements, or an empty array if nothing matches\n@see WebDriverBy", "docstring_tokens": ["Find", "all", "WebDriverElements", "within", "the", "current", "page", "using", "the", "given", "mechanism", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteWebDriver.php#L200-L214", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteWebDriver.php", "func_name": "RemoteWebDriver.get", "original_string": "public function get($url)\n    {\n        $params = ['url' => (string) $url];\n        $this->execute(DriverCommand::GET, $params);\n\n        return $this;\n    }", "language": "php", "code": "public function get($url)\n    {\n        $params = ['url' => (string) $url];\n        $this->execute(DriverCommand::GET, $params);\n\n        return $this;\n    }", "code_tokens": ["public", "function", "get", "(", "$", "url", ")", "{", "$", "params", "=", "[", "'url'", "=>", "(", "string", ")", "$", "url", "]", ";", "$", "this", "->", "execute", "(", "DriverCommand", "::", "GET", ",", "$", "params", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Load a new web page in the current browser window.\n\n@param string $url\n\n@return RemoteWebDriver The current instance.", "docstring_tokens": ["Load", "a", "new", "web", "page", "in", "the", "current", "browser", "window", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteWebDriver.php#L223-L229", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteWebDriver.php", "func_name": "RemoteWebDriver.executeScript", "original_string": "public function executeScript($script, array $arguments = [])\n    {\n        $params = [\n            'script' => $script,\n            'args' => $this->prepareScriptArguments($arguments),\n        ];\n\n        return $this->execute(DriverCommand::EXECUTE_SCRIPT, $params);\n    }", "language": "php", "code": "public function executeScript($script, array $arguments = [])\n    {\n        $params = [\n            'script' => $script,\n            'args' => $this->prepareScriptArguments($arguments),\n        ];\n\n        return $this->execute(DriverCommand::EXECUTE_SCRIPT, $params);\n    }", "code_tokens": ["public", "function", "executeScript", "(", "$", "script", ",", "array", "$", "arguments", "=", "[", "]", ")", "{", "$", "params", "=", "[", "'script'", "=>", "$", "script", ",", "'args'", "=>", "$", "this", "->", "prepareScriptArguments", "(", "$", "arguments", ")", ",", "]", ";", "return", "$", "this", "->", "execute", "(", "DriverCommand", "::", "EXECUTE_SCRIPT", ",", "$", "params", ")", ";", "}"], "docstring": "Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\nThe executed script is assumed to be synchronous and the result of evaluating the script will be returned.\n\n@param string $script The script to inject.\n@param array $arguments The arguments of the script.\n@return mixed The return value of the script.", "docstring_tokens": ["Inject", "a", "snippet", "of", "JavaScript", "into", "the", "page", "for", "execution", "in", "the", "context", "of", "the", "currently", "selected", "frame", ".", "The", "executed", "script", "is", "assumed", "to", "be", "synchronous", "and", "the", "result", "of", "evaluating", "the", "script", "will", "be", "returned", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteWebDriver.php#L301-L309", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteWebDriver.php", "func_name": "RemoteWebDriver.executeAsyncScript", "original_string": "public function executeAsyncScript($script, array $arguments = [])\n    {\n        $params = [\n            'script' => $script,\n            'args' => $this->prepareScriptArguments($arguments),\n        ];\n\n        return $this->execute(\n            DriverCommand::EXECUTE_ASYNC_SCRIPT,\n            $params\n        );\n    }", "language": "php", "code": "public function executeAsyncScript($script, array $arguments = [])\n    {\n        $params = [\n            'script' => $script,\n            'args' => $this->prepareScriptArguments($arguments),\n        ];\n\n        return $this->execute(\n            DriverCommand::EXECUTE_ASYNC_SCRIPT,\n            $params\n        );\n    }", "code_tokens": ["public", "function", "executeAsyncScript", "(", "$", "script", ",", "array", "$", "arguments", "=", "[", "]", ")", "{", "$", "params", "=", "[", "'script'", "=>", "$", "script", ",", "'args'", "=>", "$", "this", "->", "prepareScriptArguments", "(", "$", "arguments", ")", ",", "]", ";", "return", "$", "this", "->", "execute", "(", "DriverCommand", "::", "EXECUTE_ASYNC_SCRIPT", ",", "$", "params", ")", ";", "}"], "docstring": "Inject a snippet of JavaScript into the page for asynchronous execution in the context of the currently selected\nframe.\n\nThe driver will pass a callback as the last argument to the snippet, and block until the callback is invoked.\n\nYou may need to define script timeout using `setScriptTimeout()` method of `WebDriverTimeouts` first.\n\n@param string $script The script to inject.\n@param array $arguments The arguments of the script.\n@return mixed The value passed by the script to the callback.", "docstring_tokens": ["Inject", "a", "snippet", "of", "JavaScript", "into", "the", "page", "for", "asynchronous", "execution", "in", "the", "context", "of", "the", "currently", "selected", "frame", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteWebDriver.php#L323-L334", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteWebDriver.php", "func_name": "RemoteWebDriver.takeScreenshot", "original_string": "public function takeScreenshot($save_as = null)\n    {\n        $screenshot = base64_decode(\n            $this->execute(DriverCommand::SCREENSHOT)\n        );\n        if ($save_as) {\n            file_put_contents($save_as, $screenshot);\n        }\n\n        return $screenshot;\n    }", "language": "php", "code": "public function takeScreenshot($save_as = null)\n    {\n        $screenshot = base64_decode(\n            $this->execute(DriverCommand::SCREENSHOT)\n        );\n        if ($save_as) {\n            file_put_contents($save_as, $screenshot);\n        }\n\n        return $screenshot;\n    }", "code_tokens": ["public", "function", "takeScreenshot", "(", "$", "save_as", "=", "null", ")", "{", "$", "screenshot", "=", "base64_decode", "(", "$", "this", "->", "execute", "(", "DriverCommand", "::", "SCREENSHOT", ")", ")", ";", "if", "(", "$", "save_as", ")", "{", "file_put_contents", "(", "$", "save_as", ",", "$", "screenshot", ")", ";", "}", "return", "$", "screenshot", ";", "}"], "docstring": "Take a screenshot of the current page.\n\n@param string $save_as The path of the screenshot to be saved.\n@return string The screenshot in PNG format.", "docstring_tokens": ["Take", "a", "screenshot", "of", "the", "current", "page", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteWebDriver.php#L342-L352", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteWebDriver.php", "func_name": "RemoteWebDriver.getAllSessions", "original_string": "public static function getAllSessions($selenium_server_url = 'http://localhost:4444/wd/hub', $timeout_in_ms = 30000)\n    {\n        $executor = new HttpCommandExecutor($selenium_server_url);\n        $executor->setConnectionTimeout($timeout_in_ms);\n\n        $command = new WebDriverCommand(\n            null,\n            DriverCommand::GET_ALL_SESSIONS,\n            []\n        );\n\n        return $executor->execute($command)->getValue();\n    }", "language": "php", "code": "public static function getAllSessions($selenium_server_url = 'http://localhost:4444/wd/hub', $timeout_in_ms = 30000)\n    {\n        $executor = new HttpCommandExecutor($selenium_server_url);\n        $executor->setConnectionTimeout($timeout_in_ms);\n\n        $command = new WebDriverCommand(\n            null,\n            DriverCommand::GET_ALL_SESSIONS,\n            []\n        );\n\n        return $executor->execute($command)->getValue();\n    }", "code_tokens": ["public", "static", "function", "getAllSessions", "(", "$", "selenium_server_url", "=", "'http://localhost:4444/wd/hub'", ",", "$", "timeout_in_ms", "=", "30000", ")", "{", "$", "executor", "=", "new", "HttpCommandExecutor", "(", "$", "selenium_server_url", ")", ";", "$", "executor", "->", "setConnectionTimeout", "(", "$", "timeout_in_ms", ")", ";", "$", "command", "=", "new", "WebDriverCommand", "(", "null", ",", "DriverCommand", "::", "GET_ALL_SESSIONS", ",", "[", "]", ")", ";", "return", "$", "executor", "->", "execute", "(", "$", "command", ")", "->", "getValue", "(", ")", ";", "}"], "docstring": "Returns a list of the currently active sessions.\n\n@param string $selenium_server_url The url of the remote Selenium WebDriver server\n@param int $timeout_in_ms\n@return array", "docstring_tokens": ["Returns", "a", "list", "of", "the", "currently", "active", "sessions", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteWebDriver.php#L524-L536", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Remote/RemoteWebDriver.php", "func_name": "RemoteWebDriver.prepareScriptArguments", "original_string": "protected function prepareScriptArguments(array $arguments)\n    {\n        $args = [];\n        foreach ($arguments as $key => $value) {\n            if ($value instanceof WebDriverElement) {\n                $args[$key] = ['ELEMENT' => $value->getID()];\n            } else {\n                if (is_array($value)) {\n                    $value = $this->prepareScriptArguments($value);\n                }\n                $args[$key] = $value;\n            }\n        }\n\n        return $args;\n    }", "language": "php", "code": "protected function prepareScriptArguments(array $arguments)\n    {\n        $args = [];\n        foreach ($arguments as $key => $value) {\n            if ($value instanceof WebDriverElement) {\n                $args[$key] = ['ELEMENT' => $value->getID()];\n            } else {\n                if (is_array($value)) {\n                    $value = $this->prepareScriptArguments($value);\n                }\n                $args[$key] = $value;\n            }\n        }\n\n        return $args;\n    }", "code_tokens": ["protected", "function", "prepareScriptArguments", "(", "array", "$", "arguments", ")", "{", "$", "args", "=", "[", "]", ";", "foreach", "(", "$", "arguments", "as", "$", "key", "=>", "$", "value", ")", "{", "if", "(", "$", "value", "instanceof", "WebDriverElement", ")", "{", "$", "args", "[", "$", "key", "]", "=", "[", "'ELEMENT'", "=>", "$", "value", "->", "getID", "(", ")", "]", ";", "}", "else", "{", "if", "(", "is_array", "(", "$", "value", ")", ")", "{", "$", "value", "=", "$", "this", "->", "prepareScriptArguments", "(", "$", "value", ")", ";", "}", "$", "args", "[", "$", "key", "]", "=", "$", "value", ";", "}", "}", "return", "$", "args", ";", "}"], "docstring": "Prepare arguments for JavaScript injection\n\n@param array $arguments\n@return array", "docstring_tokens": ["Prepare", "arguments", "for", "JavaScript", "injection"], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Remote/RemoteWebDriver.php#L561-L576", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverPoint.php", "func_name": "WebDriverPoint.move", "original_string": "public function move($new_x, $new_y)\n    {\n        $this->x = $new_x;\n        $this->y = $new_y;\n\n        return $this;\n    }", "language": "php", "code": "public function move($new_x, $new_y)\n    {\n        $this->x = $new_x;\n        $this->y = $new_y;\n\n        return $this;\n    }", "code_tokens": ["public", "function", "move", "(", "$", "new_x", ",", "$", "new_y", ")", "{", "$", "this", "->", "x", "=", "$", "new_x", ";", "$", "this", "->", "y", "=", "$", "new_y", ";", "return", "$", "this", ";", "}"], "docstring": "Set the point to a new position.\n\n@param int $new_x\n@param int $new_y\n@return WebDriverPoint The same instance with updated coordinates.", "docstring_tokens": ["Set", "the", "point", "to", "a", "new", "position", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverPoint.php#L59-L65", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverPoint.php", "func_name": "WebDriverPoint.moveBy", "original_string": "public function moveBy($x_offset, $y_offset)\n    {\n        $this->x += $x_offset;\n        $this->y += $y_offset;\n\n        return $this;\n    }", "language": "php", "code": "public function moveBy($x_offset, $y_offset)\n    {\n        $this->x += $x_offset;\n        $this->y += $y_offset;\n\n        return $this;\n    }", "code_tokens": ["public", "function", "moveBy", "(", "$", "x_offset", ",", "$", "y_offset", ")", "{", "$", "this", "->", "x", "+=", "$", "x_offset", ";", "$", "this", "->", "y", "+=", "$", "y_offset", ";", "return", "$", "this", ";", "}"], "docstring": "Move the current by offsets.\n\n@param int $x_offset\n@param int $y_offset\n@return WebDriverPoint The same instance with updated coordinates.", "docstring_tokens": ["Move", "the", "current", "by", "offsets", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverPoint.php#L74-L80", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverPoint.php", "func_name": "WebDriverPoint.equals", "original_string": "public function equals(self $point)\n    {\n        return $this->x === $point->getX() &&\n        $this->y === $point->getY();\n    }", "language": "php", "code": "public function equals(self $point)\n    {\n        return $this->x === $point->getX() &&\n        $this->y === $point->getY();\n    }", "code_tokens": ["public", "function", "equals", "(", "self", "$", "point", ")", "{", "return", "$", "this", "->", "x", "===", "$", "point", "->", "getX", "(", ")", "&&", "$", "this", "->", "y", "===", "$", "point", "->", "getY", "(", ")", ";", "}"], "docstring": "Check whether the given point is the same as the instance.\n\n@param WebDriverPoint $point The point to be compared with.\n@return bool Whether the x and y coordinates are the same as the instance.", "docstring_tokens": ["Check", "whether", "the", "given", "point", "is", "the", "same", "as", "the", "instance", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverPoint.php#L88-L92", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverDimension.php", "func_name": "WebDriverDimension.equals", "original_string": "public function equals(self $dimension)\n    {\n        return $this->height === $dimension->getHeight() && $this->width === $dimension->getWidth();\n    }", "language": "php", "code": "public function equals(self $dimension)\n    {\n        return $this->height === $dimension->getHeight() && $this->width === $dimension->getWidth();\n    }", "code_tokens": ["public", "function", "equals", "(", "self", "$", "dimension", ")", "{", "return", "$", "this", "->", "height", "===", "$", "dimension", "->", "getHeight", "(", ")", "&&", "$", "this", "->", "width", "===", "$", "dimension", "->", "getWidth", "(", ")", ";", "}"], "docstring": "Check whether the given dimension is the same as the instance.\n\n@param WebDriverDimension $dimension The dimension to be compared with.\n@return bool Whether the height and the width are the same as the instance.", "docstring_tokens": ["Check", "whether", "the", "given", "dimension", "is", "the", "same", "as", "the", "instance", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverDimension.php#L68-L71", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverOptions.php", "func_name": "WebDriverOptions.addCookie", "original_string": "public function addCookie($cookie)\n    {\n        if (is_array($cookie)) {\n            $cookie = Cookie::createFromArray($cookie);\n        }\n        if (!$cookie instanceof Cookie) {\n            throw new InvalidArgumentException('Cookie must be set from instance of Cookie class or from array.');\n        }\n\n        $this->executor->execute(\n            DriverCommand::ADD_COOKIE,\n            ['cookie' => $cookie->toArray()]\n        );\n\n        return $this;\n    }", "language": "php", "code": "public function addCookie($cookie)\n    {\n        if (is_array($cookie)) {\n            $cookie = Cookie::createFromArray($cookie);\n        }\n        if (!$cookie instanceof Cookie) {\n            throw new InvalidArgumentException('Cookie must be set from instance of Cookie class or from array.');\n        }\n\n        $this->executor->execute(\n            DriverCommand::ADD_COOKIE,\n            ['cookie' => $cookie->toArray()]\n        );\n\n        return $this;\n    }", "code_tokens": ["public", "function", "addCookie", "(", "$", "cookie", ")", "{", "if", "(", "is_array", "(", "$", "cookie", ")", ")", "{", "$", "cookie", "=", "Cookie", "::", "createFromArray", "(", "$", "cookie", ")", ";", "}", "if", "(", "!", "$", "cookie", "instanceof", "Cookie", ")", "{", "throw", "new", "InvalidArgumentException", "(", "'Cookie must be set from instance of Cookie class or from array.'", ")", ";", "}", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "ADD_COOKIE", ",", "[", "'cookie'", "=>", "$", "cookie", "->", "toArray", "(", ")", "]", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Add a specific cookie.\n\n@see Cookie for description of possible cookie properties\n@param Cookie|array $cookie Cookie object. May be also created from array for compatibility reasons.\n@return WebDriverOptions The current instance.", "docstring_tokens": ["Add", "a", "specific", "cookie", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverOptions.php#L44-L59", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverOptions.php", "func_name": "WebDriverOptions.getCookieNamed", "original_string": "public function getCookieNamed($name)\n    {\n        $cookies = $this->getCookies();\n        foreach ($cookies as $cookie) {\n            if ($cookie['name'] === $name) {\n                return $cookie;\n            }\n        }\n\n        return null;\n    }", "language": "php", "code": "public function getCookieNamed($name)\n    {\n        $cookies = $this->getCookies();\n        foreach ($cookies as $cookie) {\n            if ($cookie['name'] === $name) {\n                return $cookie;\n            }\n        }\n\n        return null;\n    }", "code_tokens": ["public", "function", "getCookieNamed", "(", "$", "name", ")", "{", "$", "cookies", "=", "$", "this", "->", "getCookies", "(", ")", ";", "foreach", "(", "$", "cookies", "as", "$", "cookie", ")", "{", "if", "(", "$", "cookie", "[", "'name'", "]", "===", "$", "name", ")", "{", "return", "$", "cookie", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Get the cookie with a given name.\n\n@param string $name\n@return Cookie|null The cookie, or null if no cookie with the given name is presented.", "docstring_tokens": ["Get", "the", "cookie", "with", "a", "given", "name", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverOptions.php#L95-L105", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/WebDriverOptions.php", "func_name": "WebDriverOptions.getCookies", "original_string": "public function getCookies()\n    {\n        $cookieArrays = $this->executor->execute(DriverCommand::GET_ALL_COOKIES);\n        $cookies = [];\n\n        foreach ($cookieArrays as $cookieArray) {\n            $cookies[] = Cookie::createFromArray($cookieArray);\n        }\n\n        return $cookies;\n    }", "language": "php", "code": "public function getCookies()\n    {\n        $cookieArrays = $this->executor->execute(DriverCommand::GET_ALL_COOKIES);\n        $cookies = [];\n\n        foreach ($cookieArrays as $cookieArray) {\n            $cookies[] = Cookie::createFromArray($cookieArray);\n        }\n\n        return $cookies;\n    }", "code_tokens": ["public", "function", "getCookies", "(", ")", "{", "$", "cookieArrays", "=", "$", "this", "->", "executor", "->", "execute", "(", "DriverCommand", "::", "GET_ALL_COOKIES", ")", ";", "$", "cookies", "=", "[", "]", ";", "foreach", "(", "$", "cookieArrays", "as", "$", "cookieArray", ")", "{", "$", "cookies", "[", "]", "=", "Cookie", "::", "createFromArray", "(", "$", "cookieArray", ")", ";", "}", "return", "$", "cookies", ";", "}"], "docstring": "Get all the cookies for the current domain.\n\n@return Cookie[] The array of cookies presented.", "docstring_tokens": ["Get", "all", "the", "cookies", "for", "the", "current", "domain", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/WebDriverOptions.php#L112-L122", "partition": "train"}
{"repo": "facebook/php-webdriver", "path": "lib/Exception/WebDriverException.php", "func_name": "WebDriverException.throwException", "original_string": "public static function throwException($status_code, $message, $results)\n    {\n        switch ($status_code) {\n            case 1:\n                throw new IndexOutOfBoundsException($message, $results);\n            case 2:\n                throw new NoCollectionException($message, $results);\n            case 3:\n                throw new NoStringException($message, $results);\n            case 4:\n                throw new NoStringLengthException($message, $results);\n            case 5:\n                throw new NoStringWrapperException($message, $results);\n            case 6:\n                throw new NoSuchDriverException($message, $results);\n            case 7:\n                throw new NoSuchElementException($message, $results);\n            case 8:\n                throw new NoSuchFrameException($message, $results);\n            case 9:\n                throw new UnknownCommandException($message, $results);\n            case 10:\n                throw new StaleElementReferenceException($message, $results);\n            case 11:\n                throw new ElementNotVisibleException($message, $results);\n            case 12:\n                throw new InvalidElementStateException($message, $results);\n            case 13:\n                throw new UnknownServerException($message, $results);\n            case 14:\n                throw new ExpectedException($message, $results);\n            case 15:\n                throw new ElementNotSelectableException($message, $results);\n            case 16:\n                throw new NoSuchDocumentException($message, $results);\n            case 17:\n                throw new UnexpectedJavascriptException($message, $results);\n            case 18:\n                throw new NoScriptResultException($message, $results);\n            case 19:\n                throw new XPathLookupException($message, $results);\n            case 20:\n                throw new NoSuchCollectionException($message, $results);\n            case 21:\n                throw new TimeOutException($message, $results);\n            case 22:\n                throw new NullPointerException($message, $results);\n            case 23:\n                throw new NoSuchWindowException($message, $results);\n            case 24:\n                throw new InvalidCookieDomainException($message, $results);\n            case 25:\n                throw new UnableToSetCookieException($message, $results);\n            case 26:\n                throw new UnexpectedAlertOpenException($message, $results);\n            case 27:\n                throw new NoAlertOpenException($message, $results);\n            case 28:\n                throw new ScriptTimeoutException($message, $results);\n            case 29:\n                throw new InvalidCoordinatesException($message, $results);\n            case 30:\n                throw new IMENotAvailableException($message, $results);\n            case 31:\n                throw new IMEEngineActivationFailedException($message, $results);\n            case 32:\n                throw new InvalidSelectorException($message, $results);\n            case 33:\n                throw new SessionNotCreatedException($message, $results);\n            case 34:\n                throw new MoveTargetOutOfBoundsException($message, $results);\n            default:\n                throw new UnrecognizedExceptionException($message, $results);\n        }\n    }", "language": "php", "code": "public static function throwException($status_code, $message, $results)\n    {\n        switch ($status_code) {\n            case 1:\n                throw new IndexOutOfBoundsException($message, $results);\n            case 2:\n                throw new NoCollectionException($message, $results);\n            case 3:\n                throw new NoStringException($message, $results);\n            case 4:\n                throw new NoStringLengthException($message, $results);\n            case 5:\n                throw new NoStringWrapperException($message, $results);\n            case 6:\n                throw new NoSuchDriverException($message, $results);\n            case 7:\n                throw new NoSuchElementException($message, $results);\n            case 8:\n                throw new NoSuchFrameException($message, $results);\n            case 9:\n                throw new UnknownCommandException($message, $results);\n            case 10:\n                throw new StaleElementReferenceException($message, $results);\n            case 11:\n                throw new ElementNotVisibleException($message, $results);\n            case 12:\n                throw new InvalidElementStateException($message, $results);\n            case 13:\n                throw new UnknownServerException($message, $results);\n            case 14:\n                throw new ExpectedException($message, $results);\n            case 15:\n                throw new ElementNotSelectableException($message, $results);\n            case 16:\n                throw new NoSuchDocumentException($message, $results);\n            case 17:\n                throw new UnexpectedJavascriptException($message, $results);\n            case 18:\n                throw new NoScriptResultException($message, $results);\n            case 19:\n                throw new XPathLookupException($message, $results);\n            case 20:\n                throw new NoSuchCollectionException($message, $results);\n            case 21:\n                throw new TimeOutException($message, $results);\n            case 22:\n                throw new NullPointerException($message, $results);\n            case 23:\n                throw new NoSuchWindowException($message, $results);\n            case 24:\n                throw new InvalidCookieDomainException($message, $results);\n            case 25:\n                throw new UnableToSetCookieException($message, $results);\n            case 26:\n                throw new UnexpectedAlertOpenException($message, $results);\n            case 27:\n                throw new NoAlertOpenException($message, $results);\n            case 28:\n                throw new ScriptTimeoutException($message, $results);\n            case 29:\n                throw new InvalidCoordinatesException($message, $results);\n            case 30:\n                throw new IMENotAvailableException($message, $results);\n            case 31:\n                throw new IMEEngineActivationFailedException($message, $results);\n            case 32:\n                throw new InvalidSelectorException($message, $results);\n            case 33:\n                throw new SessionNotCreatedException($message, $results);\n            case 34:\n                throw new MoveTargetOutOfBoundsException($message, $results);\n            default:\n                throw new UnrecognizedExceptionException($message, $results);\n        }\n    }", "code_tokens": ["public", "static", "function", "throwException", "(", "$", "status_code", ",", "$", "message", ",", "$", "results", ")", "{", "switch", "(", "$", "status_code", ")", "{", "case", "1", ":", "throw", "new", "IndexOutOfBoundsException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "2", ":", "throw", "new", "NoCollectionException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "3", ":", "throw", "new", "NoStringException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "4", ":", "throw", "new", "NoStringLengthException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "5", ":", "throw", "new", "NoStringWrapperException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "6", ":", "throw", "new", "NoSuchDriverException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "7", ":", "throw", "new", "NoSuchElementException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "8", ":", "throw", "new", "NoSuchFrameException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "9", ":", "throw", "new", "UnknownCommandException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "10", ":", "throw", "new", "StaleElementReferenceException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "11", ":", "throw", "new", "ElementNotVisibleException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "12", ":", "throw", "new", "InvalidElementStateException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "13", ":", "throw", "new", "UnknownServerException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "14", ":", "throw", "new", "ExpectedException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "15", ":", "throw", "new", "ElementNotSelectableException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "16", ":", "throw", "new", "NoSuchDocumentException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "17", ":", "throw", "new", "UnexpectedJavascriptException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "18", ":", "throw", "new", "NoScriptResultException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "19", ":", "throw", "new", "XPathLookupException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "20", ":", "throw", "new", "NoSuchCollectionException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "21", ":", "throw", "new", "TimeOutException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "22", ":", "throw", "new", "NullPointerException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "23", ":", "throw", "new", "NoSuchWindowException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "24", ":", "throw", "new", "InvalidCookieDomainException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "25", ":", "throw", "new", "UnableToSetCookieException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "26", ":", "throw", "new", "UnexpectedAlertOpenException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "27", ":", "throw", "new", "NoAlertOpenException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "28", ":", "throw", "new", "ScriptTimeoutException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "29", ":", "throw", "new", "InvalidCoordinatesException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "30", ":", "throw", "new", "IMENotAvailableException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "31", ":", "throw", "new", "IMEEngineActivationFailedException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "32", ":", "throw", "new", "InvalidSelectorException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "33", ":", "throw", "new", "SessionNotCreatedException", "(", "$", "message", ",", "$", "results", ")", ";", "case", "34", ":", "throw", "new", "MoveTargetOutOfBoundsException", "(", "$", "message", ",", "$", "results", ")", ";", "default", ":", "throw", "new", "UnrecognizedExceptionException", "(", "$", "message", ",", "$", "results", ")", ";", "}", "}"], "docstring": "Throw WebDriverExceptions based on WebDriver status code.\n\n@param int $status_code\n@param string $message\n@param mixed $results\n\n@throws ElementNotSelectableException\n@throws ElementNotVisibleException\n@throws ExpectedException\n@throws IMEEngineActivationFailedException\n@throws IMENotAvailableException\n@throws IndexOutOfBoundsException\n@throws InvalidCookieDomainException\n@throws InvalidCoordinatesException\n@throws InvalidElementStateException\n@throws InvalidSelectorException\n@throws MoveTargetOutOfBoundsException\n@throws NoAlertOpenException\n@throws NoCollectionException\n@throws NoScriptResultException\n@throws NoStringException\n@throws NoStringLengthException\n@throws NoStringWrapperException\n@throws NoSuchCollectionException\n@throws NoSuchDocumentException\n@throws NoSuchDriverException\n@throws NoSuchElementException\n@throws NoSuchFrameException\n@throws NoSuchWindowException\n@throws NullPointerException\n@throws ScriptTimeoutException\n@throws SessionNotCreatedException\n@throws StaleElementReferenceException\n@throws TimeOutException\n@throws UnableToSetCookieException\n@throws UnexpectedAlertOpenException\n@throws UnexpectedJavascriptException\n@throws UnknownCommandException\n@throws UnknownServerException\n@throws UnrecognizedExceptionException\n@throws WebDriverCurlException\n@throws XPathLookupException", "docstring_tokens": ["Throw", "WebDriverExceptions", "based", "on", "WebDriver", "status", "code", "."], "sha": "2dbfa7029fc317a2d649f0ccbdaf5d225662df6b", "url": "https://github.com/facebook/php-webdriver/blob/2dbfa7029fc317a2d649f0ccbdaf5d225662df6b/lib/Exception/WebDriverException.php#L86-L160", "partition": "train"}
{"repo": "spiral/roadrunner", "path": "src/Worker.php", "func_name": "Worker.error", "original_string": "public function error(string $message)\n    {\n        $this->relay->send(\n            $message,\n            Relay::PAYLOAD_CONTROL | Relay::PAYLOAD_RAW | Relay::PAYLOAD_ERROR\n        );\n    }", "language": "php", "code": "public function error(string $message)\n    {\n        $this->relay->send(\n            $message,\n            Relay::PAYLOAD_CONTROL | Relay::PAYLOAD_RAW | Relay::PAYLOAD_ERROR\n        );\n    }", "code_tokens": ["public", "function", "error", "(", "string", "$", "message", ")", "{", "$", "this", "->", "relay", "->", "send", "(", "$", "message", ",", "Relay", "::", "PAYLOAD_CONTROL", "|", "Relay", "::", "PAYLOAD_RAW", "|", "Relay", "::", "PAYLOAD_ERROR", ")", ";", "}"], "docstring": "Respond to the server with an error. Error must be treated as TaskError and might not cause\nworker destruction.\n\nExample:\n\n$worker->error(\"invalid payload\");\n\n@param string $message", "docstring_tokens": ["Respond", "to", "the", "server", "with", "an", "error", ".", "Error", "must", "be", "treated", "as", "TaskError", "and", "might", "not", "cause", "worker", "destruction", "."], "sha": "aa80896b3c7c2dd1e43fbd986720192df22f033b", "url": "https://github.com/spiral/roadrunner/blob/aa80896b3c7c2dd1e43fbd986720192df22f033b/src/Worker.php#L104-L110", "partition": "train"}
{"repo": "spiral/roadrunner", "path": "src/Worker.php", "func_name": "Worker.handleControl", "original_string": "private function handleControl(string $body = null, &$header = null, int $flags = 0): bool\n    {\n        $header = $body;\n        if (is_null($body) || $flags & Relay::PAYLOAD_RAW) {\n            // empty or raw prefix\n            return true;\n        }\n\n        $p = json_decode($body, true);\n        if ($p === false) {\n            throw new RoadRunnerException(\"invalid task context, JSON payload is expected\");\n        }\n\n        // PID negotiation (socket connections only)\n        if (!empty($p['pid'])) {\n            $this->relay->send(\n                sprintf('{\"pid\":%s}', getmypid()), Relay::PAYLOAD_CONTROL\n            );\n        }\n\n        // termination request\n        if (!empty($p['stop'])) {\n            return false;\n        }\n\n        // parsed header\n        $header = $p;\n\n        return true;\n    }", "language": "php", "code": "private function handleControl(string $body = null, &$header = null, int $flags = 0): bool\n    {\n        $header = $body;\n        if (is_null($body) || $flags & Relay::PAYLOAD_RAW) {\n            // empty or raw prefix\n            return true;\n        }\n\n        $p = json_decode($body, true);\n        if ($p === false) {\n            throw new RoadRunnerException(\"invalid task context, JSON payload is expected\");\n        }\n\n        // PID negotiation (socket connections only)\n        if (!empty($p['pid'])) {\n            $this->relay->send(\n                sprintf('{\"pid\":%s}', getmypid()), Relay::PAYLOAD_CONTROL\n            );\n        }\n\n        // termination request\n        if (!empty($p['stop'])) {\n            return false;\n        }\n\n        // parsed header\n        $header = $p;\n\n        return true;\n    }", "code_tokens": ["private", "function", "handleControl", "(", "string", "$", "body", "=", "null", ",", "&", "$", "header", "=", "null", ",", "int", "$", "flags", "=", "0", ")", ":", "bool", "{", "$", "header", "=", "$", "body", ";", "if", "(", "is_null", "(", "$", "body", ")", "||", "$", "flags", "&", "Relay", "::", "PAYLOAD_RAW", ")", "{", "return", "true", ";", "}", "$", "p", "=", "json_decode", "(", "$", "body", ",", "true", ")", ";", "if", "(", "$", "p", "===", "false", ")", "{", "throw", "new", "RoadRunnerException", "(", "\"invalid task context, JSON payload is expected\"", ")", ";", "}", "if", "(", "!", "empty", "(", "$", "p", "[", "'pid'", "]", ")", ")", "{", "$", "this", "->", "relay", "->", "send", "(", "sprintf", "(", "'{\"pid\":%s}'", ",", "getmypid", "(", ")", ")", ",", "Relay", "::", "PAYLOAD_CONTROL", ")", ";", "}", "if", "(", "!", "empty", "(", "$", "p", "[", "'stop'", "]", ")", ")", "{", "return", "false", ";", "}", "$", "header", "=", "$", "p", ";", "return", "true", ";", "}"], "docstring": "Handles incoming control command payload and executes it if required.\n\n@param string $body\n@param mixed  $header Exported context (if any).\n@param int    $flags\n@return bool True when continue processing.\n\n@throws RoadRunnerException", "docstring_tokens": ["Handles", "incoming", "control", "command", "payload", "and", "executes", "it", "if", "required", "."], "sha": "aa80896b3c7c2dd1e43fbd986720192df22f033b", "url": "https://github.com/spiral/roadrunner/blob/aa80896b3c7c2dd1e43fbd986720192df22f033b/src/Worker.php#L136-L165", "partition": "train"}
{"repo": "rebing/graphql-laravel", "path": "src/Rebing/GraphQL/Support/SelectFields.php", "func_name": "SelectFields.validateField", "original_string": "protected static function validateField($fieldObject)\n    {\n        $selectable = true;\n\n        // If not a selectable field\n        if(isset($fieldObject->config['selectable']) && $fieldObject->config['selectable'] === false)\n        {\n            $selectable = false;\n        }\n\n        if(isset($fieldObject->config['privacy']))\n        {\n            $privacyClass = $fieldObject->config['privacy'];\n\n            // If privacy given as a closure\n            if(is_callable($privacyClass) && call_user_func($privacyClass, self::$args) === false)\n            {\n                $selectable = null;\n            }\n            // If Privacy class given\n            elseif(is_string($privacyClass))\n            {\n                if(array_has(self::$privacyValidations, $privacyClass))\n                {\n                    $validated = self::$privacyValidations[$privacyClass];\n                }\n                else\n                {\n                    $validated = call_user_func([app($privacyClass), 'fire'], self::$args);\n                    self::$privacyValidations[$privacyClass] = $validated;\n                }\n\n                if( ! $validated)\n                {\n                    $selectable = null;\n                }\n            }\n        }\n\n        return $selectable;\n    }", "language": "php", "code": "protected static function validateField($fieldObject)\n    {\n        $selectable = true;\n\n        // If not a selectable field\n        if(isset($fieldObject->config['selectable']) && $fieldObject->config['selectable'] === false)\n        {\n            $selectable = false;\n        }\n\n        if(isset($fieldObject->config['privacy']))\n        {\n            $privacyClass = $fieldObject->config['privacy'];\n\n            // If privacy given as a closure\n            if(is_callable($privacyClass) && call_user_func($privacyClass, self::$args) === false)\n            {\n                $selectable = null;\n            }\n            // If Privacy class given\n            elseif(is_string($privacyClass))\n            {\n                if(array_has(self::$privacyValidations, $privacyClass))\n                {\n                    $validated = self::$privacyValidations[$privacyClass];\n                }\n                else\n                {\n                    $validated = call_user_func([app($privacyClass), 'fire'], self::$args);\n                    self::$privacyValidations[$privacyClass] = $validated;\n                }\n\n                if( ! $validated)\n                {\n                    $selectable = null;\n                }\n            }\n        }\n\n        return $selectable;\n    }", "code_tokens": ["protected", "static", "function", "validateField", "(", "$", "fieldObject", ")", "{", "$", "selectable", "=", "true", ";", "if", "(", "isset", "(", "$", "fieldObject", "->", "config", "[", "'selectable'", "]", ")", "&&", "$", "fieldObject", "->", "config", "[", "'selectable'", "]", "===", "false", ")", "{", "$", "selectable", "=", "false", ";", "}", "if", "(", "isset", "(", "$", "fieldObject", "->", "config", "[", "'privacy'", "]", ")", ")", "{", "$", "privacyClass", "=", "$", "fieldObject", "->", "config", "[", "'privacy'", "]", ";", "if", "(", "is_callable", "(", "$", "privacyClass", ")", "&&", "call_user_func", "(", "$", "privacyClass", ",", "self", "::", "$", "args", ")", "===", "false", ")", "{", "$", "selectable", "=", "null", ";", "}", "elseif", "(", "is_string", "(", "$", "privacyClass", ")", ")", "{", "if", "(", "array_has", "(", "self", "::", "$", "privacyValidations", ",", "$", "privacyClass", ")", ")", "{", "$", "validated", "=", "self", "::", "$", "privacyValidations", "[", "$", "privacyClass", "]", ";", "}", "else", "{", "$", "validated", "=", "call_user_func", "(", "[", "app", "(", "$", "privacyClass", ")", ",", "'fire'", "]", ",", "self", "::", "$", "args", ")", ";", "self", "::", "$", "privacyValidations", "[", "$", "privacyClass", "]", "=", "$", "validated", ";", "}", "if", "(", "!", "$", "validated", ")", "{", "$", "selectable", "=", "null", ";", "}", "}", "}", "return", "$", "selectable", ";", "}"], "docstring": "Check the privacy status, if it's given\n\n@return boolean | null - true, if selectable; false, if not selectable, but allowed;\nnull, if not allowed", "docstring_tokens": ["Check", "the", "privacy", "status", "if", "it", "s", "given"], "sha": "277d9ca00e1dd847315d75e6499cc9a0f201f576", "url": "https://github.com/rebing/graphql-laravel/blob/277d9ca00e1dd847315d75e6499cc9a0f201f576/src/Rebing/GraphQL/Support/SelectFields.php#L267-L307", "partition": "train"}
{"repo": "rebing/graphql-laravel", "path": "src/Rebing/GraphQL/Support/SelectFields.php", "func_name": "SelectFields.addAlwaysFields", "original_string": "protected static function addAlwaysFields($fieldObject, array &$select, $parentTable, $forRelation = false)\n    {\n        if(isset($fieldObject->config['always']))\n        {\n            $always = $fieldObject->config['always'];\n\n            if(is_string($always))\n            {\n                $always = explode(',', $always);\n            }\n\n            // Get as 'field' => true\n            foreach($always as $field)\n            {\n                self::addFieldToSelect($field, $select, $parentTable, $forRelation);\n            }\n        }\n    }", "language": "php", "code": "protected static function addAlwaysFields($fieldObject, array &$select, $parentTable, $forRelation = false)\n    {\n        if(isset($fieldObject->config['always']))\n        {\n            $always = $fieldObject->config['always'];\n\n            if(is_string($always))\n            {\n                $always = explode(',', $always);\n            }\n\n            // Get as 'field' => true\n            foreach($always as $field)\n            {\n                self::addFieldToSelect($field, $select, $parentTable, $forRelation);\n            }\n        }\n    }", "code_tokens": ["protected", "static", "function", "addAlwaysFields", "(", "$", "fieldObject", ",", "array", "&", "$", "select", ",", "$", "parentTable", ",", "$", "forRelation", "=", "false", ")", "{", "if", "(", "isset", "(", "$", "fieldObject", "->", "config", "[", "'always'", "]", ")", ")", "{", "$", "always", "=", "$", "fieldObject", "->", "config", "[", "'always'", "]", ";", "if", "(", "is_string", "(", "$", "always", ")", ")", "{", "$", "always", "=", "explode", "(", "','", ",", "$", "always", ")", ";", "}", "foreach", "(", "$", "always", "as", "$", "field", ")", "{", "self", "::", "addFieldToSelect", "(", "$", "field", ",", "$", "select", ",", "$", "parentTable", ",", "$", "forRelation", ")", ";", "}", "}", "}"], "docstring": "Add selects that are given by the 'always' attribute", "docstring_tokens": ["Add", "selects", "that", "are", "given", "by", "the", "always", "attribute"], "sha": "277d9ca00e1dd847315d75e6499cc9a0f201f576", "url": "https://github.com/rebing/graphql-laravel/blob/277d9ca00e1dd847315d75e6499cc9a0f201f576/src/Rebing/GraphQL/Support/SelectFields.php#L322-L339", "partition": "train"}
{"repo": "rebing/graphql-laravel", "path": "src/Rebing/GraphQL/GraphQLUploadMiddleware.php", "func_name": "GraphQLUploadMiddleware.processRequest", "original_string": "public function processRequest(Request $request)\n    {\n        $contentType = $request->header('content-type') ?: '';\n\n        if (mb_stripos($contentType, 'multipart/form-data') !== false) {\n            $this->validateParsedBody($request);\n            $request = $this->parseUploadedFiles($request);\n        }\n\n        return $request;\n    }", "language": "php", "code": "public function processRequest(Request $request)\n    {\n        $contentType = $request->header('content-type') ?: '';\n\n        if (mb_stripos($contentType, 'multipart/form-data') !== false) {\n            $this->validateParsedBody($request);\n            $request = $this->parseUploadedFiles($request);\n        }\n\n        return $request;\n    }", "code_tokens": ["public", "function", "processRequest", "(", "Request", "$", "request", ")", "{", "$", "contentType", "=", "$", "request", "->", "header", "(", "'content-type'", ")", "?", ":", "''", ";", "if", "(", "mb_stripos", "(", "$", "contentType", ",", "'multipart/form-data'", ")", "!==", "false", ")", "{", "$", "this", "->", "validateParsedBody", "(", "$", "request", ")", ";", "$", "request", "=", "$", "this", "->", "parseUploadedFiles", "(", "$", "request", ")", ";", "}", "return", "$", "request", ";", "}"], "docstring": "Process the request and return either a modified request or the original one\n\n@param \\Illuminate\\Http\\Request $request\n\n@return \\Illuminate\\Http\\Request", "docstring_tokens": ["Process", "the", "request", "and", "return", "either", "a", "modified", "request", "or", "the", "original", "one"], "sha": "277d9ca00e1dd847315d75e6499cc9a0f201f576", "url": "https://github.com/rebing/graphql-laravel/blob/277d9ca00e1dd847315d75e6499cc9a0f201f576/src/Rebing/GraphQL/GraphQLUploadMiddleware.php#L34-L44", "partition": "train"}
{"repo": "rebing/graphql-laravel", "path": "src/Rebing/GraphQL/GraphQLUploadMiddleware.php", "func_name": "GraphQLUploadMiddleware.parseUploadedFiles", "original_string": "private function parseUploadedFiles(Request $request)\n    {\n        $bodyParams = $request->all();\n        if (!isset($bodyParams['map'])) {\n            throw new RequestError('The request must define a `map`');\n        }\n\n        $map = json_decode($bodyParams['map'], true);\n        $result = json_decode($bodyParams['operations'], true);\n        if (isset($result['operationName'])) {\n            $result['operation'] = $result['operationName'];\n            unset($result['operationName']);\n        }\n\n        foreach ($map as $fileKey => $locations) {\n            foreach ($locations as $location) {\n                $items = &$result;\n                foreach (explode('.', $location) as $key) {\n                    if (!isset($items[$key]) || !is_array($items[$key])) {\n                        $items[$key] = [];\n                    }\n                    $items = &$items[$key];\n                }\n\n                $items = $request->allFiles()[$fileKey];\n            }\n        }\n\n        $request->replace($result);\n\n        return $request;\n    }", "language": "php", "code": "private function parseUploadedFiles(Request $request)\n    {\n        $bodyParams = $request->all();\n        if (!isset($bodyParams['map'])) {\n            throw new RequestError('The request must define a `map`');\n        }\n\n        $map = json_decode($bodyParams['map'], true);\n        $result = json_decode($bodyParams['operations'], true);\n        if (isset($result['operationName'])) {\n            $result['operation'] = $result['operationName'];\n            unset($result['operationName']);\n        }\n\n        foreach ($map as $fileKey => $locations) {\n            foreach ($locations as $location) {\n                $items = &$result;\n                foreach (explode('.', $location) as $key) {\n                    if (!isset($items[$key]) || !is_array($items[$key])) {\n                        $items[$key] = [];\n                    }\n                    $items = &$items[$key];\n                }\n\n                $items = $request->allFiles()[$fileKey];\n            }\n        }\n\n        $request->replace($result);\n\n        return $request;\n    }", "code_tokens": ["private", "function", "parseUploadedFiles", "(", "Request", "$", "request", ")", "{", "$", "bodyParams", "=", "$", "request", "->", "all", "(", ")", ";", "if", "(", "!", "isset", "(", "$", "bodyParams", "[", "'map'", "]", ")", ")", "{", "throw", "new", "RequestError", "(", "'The request must define a `map`'", ")", ";", "}", "$", "map", "=", "json_decode", "(", "$", "bodyParams", "[", "'map'", "]", ",", "true", ")", ";", "$", "result", "=", "json_decode", "(", "$", "bodyParams", "[", "'operations'", "]", ",", "true", ")", ";", "if", "(", "isset", "(", "$", "result", "[", "'operationName'", "]", ")", ")", "{", "$", "result", "[", "'operation'", "]", "=", "$", "result", "[", "'operationName'", "]", ";", "unset", "(", "$", "result", "[", "'operationName'", "]", ")", ";", "}", "foreach", "(", "$", "map", "as", "$", "fileKey", "=>", "$", "locations", ")", "{", "foreach", "(", "$", "locations", "as", "$", "location", ")", "{", "$", "items", "=", "&", "$", "result", ";", "foreach", "(", "explode", "(", "'.'", ",", "$", "location", ")", "as", "$", "key", ")", "{", "if", "(", "!", "isset", "(", "$", "items", "[", "$", "key", "]", ")", "||", "!", "is_array", "(", "$", "items", "[", "$", "key", "]", ")", ")", "{", "$", "items", "[", "$", "key", "]", "=", "[", "]", ";", "}", "$", "items", "=", "&", "$", "items", "[", "$", "key", "]", ";", "}", "$", "items", "=", "$", "request", "->", "allFiles", "(", ")", "[", "$", "fileKey", "]", ";", "}", "}", "$", "request", "->", "replace", "(", "$", "result", ")", ";", "return", "$", "request", ";", "}"], "docstring": "Inject uploaded files defined in the 'map' key into the 'variables' key\n\n@param  \\Illuminate\\Http\\Request  $request\n\n@return \\Illuminate\\Http\\Request", "docstring_tokens": ["Inject", "uploaded", "files", "defined", "in", "the", "map", "key", "into", "the", "variables", "key"], "sha": "277d9ca00e1dd847315d75e6499cc9a0f201f576", "url": "https://github.com/rebing/graphql-laravel/blob/277d9ca00e1dd847315d75e6499cc9a0f201f576/src/Rebing/GraphQL/GraphQLUploadMiddleware.php#L53-L84", "partition": "train"}
{"repo": "rebing/graphql-laravel", "path": "src/Rebing/GraphQL/GraphQLUploadMiddleware.php", "func_name": "GraphQLUploadMiddleware.validateParsedBody", "original_string": "private function validateParsedBody(Request $request)\n    {\n        $bodyParams = $request->all();\n\n        if (null === $bodyParams) {\n            throw new InvariantViolation(\n                'Request is expected to provide parsed body for \"multipart/form-data\" requests but got null'\n            );\n        }\n\n        if (!is_array($bodyParams)) {\n            throw new RequestError(\n                'GraphQL Server expects JSON object or array, but got ' . Utils::printSafeJson($bodyParams)\n            );\n        }\n\n        if (empty($bodyParams)) {\n            throw new InvariantViolation(\n                'Request is expected to provide parsed body for \"multipart/form-data\" requests but got empty array'\n            );\n        }\n    }", "language": "php", "code": "private function validateParsedBody(Request $request)\n    {\n        $bodyParams = $request->all();\n\n        if (null === $bodyParams) {\n            throw new InvariantViolation(\n                'Request is expected to provide parsed body for \"multipart/form-data\" requests but got null'\n            );\n        }\n\n        if (!is_array($bodyParams)) {\n            throw new RequestError(\n                'GraphQL Server expects JSON object or array, but got ' . Utils::printSafeJson($bodyParams)\n            );\n        }\n\n        if (empty($bodyParams)) {\n            throw new InvariantViolation(\n                'Request is expected to provide parsed body for \"multipart/form-data\" requests but got empty array'\n            );\n        }\n    }", "code_tokens": ["private", "function", "validateParsedBody", "(", "Request", "$", "request", ")", "{", "$", "bodyParams", "=", "$", "request", "->", "all", "(", ")", ";", "if", "(", "null", "===", "$", "bodyParams", ")", "{", "throw", "new", "InvariantViolation", "(", "'Request is expected to provide parsed body for \"multipart/form-data\" requests but got null'", ")", ";", "}", "if", "(", "!", "is_array", "(", "$", "bodyParams", ")", ")", "{", "throw", "new", "RequestError", "(", "'GraphQL Server expects JSON object or array, but got '", ".", "Utils", "::", "printSafeJson", "(", "$", "bodyParams", ")", ")", ";", "}", "if", "(", "empty", "(", "$", "bodyParams", ")", ")", "{", "throw", "new", "InvariantViolation", "(", "'Request is expected to provide parsed body for \"multipart/form-data\" requests but got empty array'", ")", ";", "}", "}"], "docstring": "Validates that the request meet our expectations\n\n@param  \\Illuminate\\Http\\Request  $request", "docstring_tokens": ["Validates", "that", "the", "request", "meet", "our", "expectations"], "sha": "277d9ca00e1dd847315d75e6499cc9a0f201f576", "url": "https://github.com/rebing/graphql-laravel/blob/277d9ca00e1dd847315d75e6499cc9a0f201f576/src/Rebing/GraphQL/GraphQLUploadMiddleware.php#L91-L112", "partition": "train"}
{"repo": "rebing/graphql-laravel", "path": "src/Rebing/GraphQL/GraphQLServiceProvider.php", "func_name": "GraphQLServiceProvider.bootSchemas", "original_string": "protected function bootSchemas()\n    {\n        $configSchemas = config('graphql.schemas');\n        foreach ($configSchemas as $name => $schema) {\n            $this->app['graphql']->addSchema($name, $schema);\n        }\n    }", "language": "php", "code": "protected function bootSchemas()\n    {\n        $configSchemas = config('graphql.schemas');\n        foreach ($configSchemas as $name => $schema) {\n            $this->app['graphql']->addSchema($name, $schema);\n        }\n    }", "code_tokens": ["protected", "function", "bootSchemas", "(", ")", "{", "$", "configSchemas", "=", "config", "(", "'graphql.schemas'", ")", ";", "foreach", "(", "$", "configSchemas", "as", "$", "name", "=>", "$", "schema", ")", "{", "$", "this", "->", "app", "[", "'graphql'", "]", "->", "addSchema", "(", "$", "name", ",", "$", "schema", ")", ";", "}", "}"], "docstring": "Add schemas from config\n\n@return void", "docstring_tokens": ["Add", "schemas", "from", "config"], "sha": "277d9ca00e1dd847315d75e6499cc9a0f201f576", "url": "https://github.com/rebing/graphql-laravel/blob/277d9ca00e1dd847315d75e6499cc9a0f201f576/src/Rebing/GraphQL/GraphQLServiceProvider.php#L88-L94", "partition": "train"}
{"repo": "rebing/graphql-laravel", "path": "src/Rebing/GraphQL/GraphQLServiceProvider.php", "func_name": "GraphQLServiceProvider.applySecurityRules", "original_string": "protected function applySecurityRules()\n    {\n        $maxQueryComplexity = config('graphql.security.query_max_complexity');\n        if ($maxQueryComplexity !== null) {\n            /** @var QueryComplexity $queryComplexity */\n            $queryComplexity = DocumentValidator::getRule('QueryComplexity');\n            $queryComplexity->setMaxQueryComplexity($maxQueryComplexity);\n        }\n\n        $maxQueryDepth = config('graphql.security.query_max_depth');\n        if ($maxQueryDepth !== null) {\n            /** @var QueryDepth $queryDepth */\n            $queryDepth = DocumentValidator::getRule('QueryDepth');\n            $queryDepth->setMaxQueryDepth($maxQueryDepth);\n        }\n\n        $disableIntrospection = config('graphql.security.disable_introspection');\n        if ($disableIntrospection === true) {\n            /** @var DisableIntrospection $disableIntrospection */\n            $disableIntrospection = DocumentValidator::getRule('DisableIntrospection');\n            $disableIntrospection->setEnabled(DisableIntrospection::ENABLED);\n        }\n    }", "language": "php", "code": "protected function applySecurityRules()\n    {\n        $maxQueryComplexity = config('graphql.security.query_max_complexity');\n        if ($maxQueryComplexity !== null) {\n            /** @var QueryComplexity $queryComplexity */\n            $queryComplexity = DocumentValidator::getRule('QueryComplexity');\n            $queryComplexity->setMaxQueryComplexity($maxQueryComplexity);\n        }\n\n        $maxQueryDepth = config('graphql.security.query_max_depth');\n        if ($maxQueryDepth !== null) {\n            /** @var QueryDepth $queryDepth */\n            $queryDepth = DocumentValidator::getRule('QueryDepth');\n            $queryDepth->setMaxQueryDepth($maxQueryDepth);\n        }\n\n        $disableIntrospection = config('graphql.security.disable_introspection');\n        if ($disableIntrospection === true) {\n            /** @var DisableIntrospection $disableIntrospection */\n            $disableIntrospection = DocumentValidator::getRule('DisableIntrospection');\n            $disableIntrospection->setEnabled(DisableIntrospection::ENABLED);\n        }\n    }", "code_tokens": ["protected", "function", "applySecurityRules", "(", ")", "{", "$", "maxQueryComplexity", "=", "config", "(", "'graphql.security.query_max_complexity'", ")", ";", "if", "(", "$", "maxQueryComplexity", "!==", "null", ")", "{", "$", "queryComplexity", "=", "DocumentValidator", "::", "getRule", "(", "'QueryComplexity'", ")", ";", "$", "queryComplexity", "->", "setMaxQueryComplexity", "(", "$", "maxQueryComplexity", ")", ";", "}", "$", "maxQueryDepth", "=", "config", "(", "'graphql.security.query_max_depth'", ")", ";", "if", "(", "$", "maxQueryDepth", "!==", "null", ")", "{", "$", "queryDepth", "=", "DocumentValidator", "::", "getRule", "(", "'QueryDepth'", ")", ";", "$", "queryDepth", "->", "setMaxQueryDepth", "(", "$", "maxQueryDepth", ")", ";", "}", "$", "disableIntrospection", "=", "config", "(", "'graphql.security.disable_introspection'", ")", ";", "if", "(", "$", "disableIntrospection", "===", "true", ")", "{", "$", "disableIntrospection", "=", "DocumentValidator", "::", "getRule", "(", "'DisableIntrospection'", ")", ";", "$", "disableIntrospection", "->", "setEnabled", "(", "DisableIntrospection", "::", "ENABLED", ")", ";", "}", "}"], "docstring": "Configure security from config\n\n@return void", "docstring_tokens": ["Configure", "security", "from", "config"], "sha": "277d9ca00e1dd847315d75e6499cc9a0f201f576", "url": "https://github.com/rebing/graphql-laravel/blob/277d9ca00e1dd847315d75e6499cc9a0f201f576/src/Rebing/GraphQL/GraphQLServiceProvider.php#L101-L123", "partition": "train"}
{"repo": "writingink/wink", "path": "src/Http/Controllers/PostsController.php", "func_name": "PostsController.store", "original_string": "public function store($id)\n    {\n        $data = [\n            'title' => request('title'),\n            'excerpt' => request('excerpt', ''),\n            'slug' => request('slug'),\n            'body' => request('body', ''),\n            'published' => request('published'),\n            'author_id' => request('author_id'),\n            'featured_image' => request('featured_image'),\n            'featured_image_caption' => request('featured_image_caption', ''),\n            'publish_date' => request('publish_date', ''),\n            'meta' => request('meta', (object) []),\n        ];\n\n        validator($data, [\n            'publish_date' => 'required|date',\n            'author_id' => 'required',\n            'title' => 'required',\n            'slug' => 'required|'.Rule::unique(config('wink.database_connection').'.wink_posts', 'slug')->ignore(request('id')),\n        ])->validate();\n\n        $entry = $id !== 'new' ? WinkPost::findOrFail($id) : new WinkPost(['id' => request('id')]);\n\n        $entry->fill($data);\n\n        $entry->save();\n\n        $entry->tags()->sync(\n            $this->collectTags(request('tags'))\n        );\n\n        return response()->json([\n            'entry' => $entry,\n        ]);\n    }", "language": "php", "code": "public function store($id)\n    {\n        $data = [\n            'title' => request('title'),\n            'excerpt' => request('excerpt', ''),\n            'slug' => request('slug'),\n            'body' => request('body', ''),\n            'published' => request('published'),\n            'author_id' => request('author_id'),\n            'featured_image' => request('featured_image'),\n            'featured_image_caption' => request('featured_image_caption', ''),\n            'publish_date' => request('publish_date', ''),\n            'meta' => request('meta', (object) []),\n        ];\n\n        validator($data, [\n            'publish_date' => 'required|date',\n            'author_id' => 'required',\n            'title' => 'required',\n            'slug' => 'required|'.Rule::unique(config('wink.database_connection').'.wink_posts', 'slug')->ignore(request('id')),\n        ])->validate();\n\n        $entry = $id !== 'new' ? WinkPost::findOrFail($id) : new WinkPost(['id' => request('id')]);\n\n        $entry->fill($data);\n\n        $entry->save();\n\n        $entry->tags()->sync(\n            $this->collectTags(request('tags'))\n        );\n\n        return response()->json([\n            'entry' => $entry,\n        ]);\n    }", "code_tokens": ["public", "function", "store", "(", "$", "id", ")", "{", "$", "data", "=", "[", "'title'", "=>", "request", "(", "'title'", ")", ",", "'excerpt'", "=>", "request", "(", "'excerpt'", ",", "''", ")", ",", "'slug'", "=>", "request", "(", "'slug'", ")", ",", "'body'", "=>", "request", "(", "'body'", ",", "''", ")", ",", "'published'", "=>", "request", "(", "'published'", ")", ",", "'author_id'", "=>", "request", "(", "'author_id'", ")", ",", "'featured_image'", "=>", "request", "(", "'featured_image'", ")", ",", "'featured_image_caption'", "=>", "request", "(", "'featured_image_caption'", ",", "''", ")", ",", "'publish_date'", "=>", "request", "(", "'publish_date'", ",", "''", ")", ",", "'meta'", "=>", "request", "(", "'meta'", ",", "(", "object", ")", "[", "]", ")", ",", "]", ";", "validator", "(", "$", "data", ",", "[", "'publish_date'", "=>", "'required|date'", ",", "'author_id'", "=>", "'required'", ",", "'title'", "=>", "'required'", ",", "'slug'", "=>", "'required|'", ".", "Rule", "::", "unique", "(", "config", "(", "'wink.database_connection'", ")", ".", "'.wink_posts'", ",", "'slug'", ")", "->", "ignore", "(", "request", "(", "'id'", ")", ")", ",", "]", ")", "->", "validate", "(", ")", ";", "$", "entry", "=", "$", "id", "!==", "'new'", "?", "WinkPost", "::", "findOrFail", "(", "$", "id", ")", ":", "new", "WinkPost", "(", "[", "'id'", "=>", "request", "(", "'id'", ")", "]", ")", ";", "$", "entry", "->", "fill", "(", "$", "data", ")", ";", "$", "entry", "->", "save", "(", ")", ";", "$", "entry", "->", "tags", "(", ")", "->", "sync", "(", "$", "this", "->", "collectTags", "(", "request", "(", "'tags'", ")", ")", ")", ";", "return", "response", "(", ")", "->", "json", "(", "[", "'entry'", "=>", "$", "entry", ",", "]", ")", ";", "}"], "docstring": "Store a single post.\n\n@param  string  $id\n@return \\Illuminate\\Http\\JsonResponse", "docstring_tokens": ["Store", "a", "single", "post", "."], "sha": "b477213dc017779476e1f1bee3ed683324841f68", "url": "https://github.com/writingink/wink/blob/b477213dc017779476e1f1bee3ed683324841f68/src/Http/Controllers/PostsController.php#L65-L100", "partition": "train"}
{"repo": "writingink/wink", "path": "src/Http/Controllers/PostsController.php", "func_name": "PostsController.collectTags", "original_string": "private function collectTags($incomingTags)\n    {\n        $allTags = WinkTag::all();\n\n        return collect($incomingTags)->map(function ($incomingTag) use ($allTags) {\n            $tag = $allTags->where('slug', Str::slug($incomingTag['name']))->first();\n\n            if (! $tag) {\n                $tag = WinkTag::create([\n                    'id' => $id = Str::uuid(),\n                    'name' => $incomingTag['name'],\n                    'slug' => Str::slug($incomingTag['name']),\n                ]);\n            }\n\n            return (string) $tag->id;\n        })->toArray();\n    }", "language": "php", "code": "private function collectTags($incomingTags)\n    {\n        $allTags = WinkTag::all();\n\n        return collect($incomingTags)->map(function ($incomingTag) use ($allTags) {\n            $tag = $allTags->where('slug', Str::slug($incomingTag['name']))->first();\n\n            if (! $tag) {\n                $tag = WinkTag::create([\n                    'id' => $id = Str::uuid(),\n                    'name' => $incomingTag['name'],\n                    'slug' => Str::slug($incomingTag['name']),\n                ]);\n            }\n\n            return (string) $tag->id;\n        })->toArray();\n    }", "code_tokens": ["private", "function", "collectTags", "(", "$", "incomingTags", ")", "{", "$", "allTags", "=", "WinkTag", "::", "all", "(", ")", ";", "return", "collect", "(", "$", "incomingTags", ")", "->", "map", "(", "function", "(", "$", "incomingTag", ")", "use", "(", "$", "allTags", ")", "{", "$", "tag", "=", "$", "allTags", "->", "where", "(", "'slug'", ",", "Str", "::", "slug", "(", "$", "incomingTag", "[", "'name'", "]", ")", ")", "->", "first", "(", ")", ";", "if", "(", "!", "$", "tag", ")", "{", "$", "tag", "=", "WinkTag", "::", "create", "(", "[", "'id'", "=>", "$", "id", "=", "Str", "::", "uuid", "(", ")", ",", "'name'", "=>", "$", "incomingTag", "[", "'name'", "]", ",", "'slug'", "=>", "Str", "::", "slug", "(", "$", "incomingTag", "[", "'name'", "]", ")", ",", "]", ")", ";", "}", "return", "(", "string", ")", "$", "tag", "->", "id", ";", "}", ")", "->", "toArray", "(", ")", ";", "}"], "docstring": "Tags incoming from the request.\n\n@param  array  $incomingTags\n@return array", "docstring_tokens": ["Tags", "incoming", "from", "the", "request", "."], "sha": "b477213dc017779476e1f1bee3ed683324841f68", "url": "https://github.com/writingink/wink/blob/b477213dc017779476e1f1bee3ed683324841f68/src/Http/Controllers/PostsController.php#L108-L125", "partition": "train"}
{"repo": "writingink/wink", "path": "src/Http/Controllers/TeamController.php", "func_name": "TeamController.delete", "original_string": "public function delete($id)\n    {\n        $entry = WinkAuthor::findOrFail($id);\n\n        if ($entry->posts()->count()) {\n            return response()->json(['message' => 'Please remove the author\\'s posts first.'], 402);\n        }\n\n        if ($entry->id == auth('wink')->user()->id) {\n            return response()->json(['message' => 'You cannot delete yourself.'], 402);\n        }\n\n        $entry->delete();\n    }", "language": "php", "code": "public function delete($id)\n    {\n        $entry = WinkAuthor::findOrFail($id);\n\n        if ($entry->posts()->count()) {\n            return response()->json(['message' => 'Please remove the author\\'s posts first.'], 402);\n        }\n\n        if ($entry->id == auth('wink')->user()->id) {\n            return response()->json(['message' => 'You cannot delete yourself.'], 402);\n        }\n\n        $entry->delete();\n    }", "code_tokens": ["public", "function", "delete", "(", "$", "id", ")", "{", "$", "entry", "=", "WinkAuthor", "::", "findOrFail", "(", "$", "id", ")", ";", "if", "(", "$", "entry", "->", "posts", "(", ")", "->", "count", "(", ")", ")", "{", "return", "response", "(", ")", "->", "json", "(", "[", "'message'", "=>", "'Please remove the author\\'s posts first.'", "]", ",", "402", ")", ";", "}", "if", "(", "$", "entry", "->", "id", "==", "auth", "(", "'wink'", ")", "->", "user", "(", ")", "->", "id", ")", "{", "return", "response", "(", ")", "->", "json", "(", "[", "'message'", "=>", "'You cannot delete yourself.'", "]", ",", "402", ")", ";", "}", "$", "entry", "->", "delete", "(", ")", ";", "}"], "docstring": "Return a single author.\n\n@param  string  $id\n@return \\Illuminate\\Http\\JsonResponse|null", "docstring_tokens": ["Return", "a", "single", "author", "."], "sha": "b477213dc017779476e1f1bee3ed683324841f68", "url": "https://github.com/writingink/wink/blob/b477213dc017779476e1f1bee3ed683324841f68/src/Http/Controllers/TeamController.php#L104-L117", "partition": "train"}
{"repo": "writingink/wink", "path": "src/WinkServiceProvider.php", "func_name": "WinkServiceProvider.registerRoutes", "original_string": "private function registerRoutes()\n    {\n        $path = config('wink.path');\n        $middlewareGroup = config('wink.middleware_group');\n\n        Route::namespace('Wink\\Http\\Controllers')\n            ->middleware($middlewareGroup)\n            ->as('wink.')\n            ->prefix($path)\n            ->group(function () {\n                Route::get('/login', 'LoginController@showLoginForm')->name('auth.login');\n                Route::post('/login', 'LoginController@login')->name('auth.attempt');\n\n                Route::get('/password/forgot', 'ForgotPasswordController@showResetRequestForm')->name('password.forgot');\n                Route::post('/password/forgot', 'ForgotPasswordController@sendResetLinkEmail')->name('password.email');\n                Route::get('/password/reset/{token}', 'ForgotPasswordController@showNewPassword')->name('password.reset');\n            });\n\n        Route::namespace('Wink\\Http\\Controllers')\n            ->middleware([$middlewareGroup, Authenticate::class])\n            ->as('wink.')\n            ->prefix($path)\n            ->group(function () {\n                $this->loadRoutesFrom(__DIR__.'/Http/routes.php');\n            });\n    }", "language": "php", "code": "private function registerRoutes()\n    {\n        $path = config('wink.path');\n        $middlewareGroup = config('wink.middleware_group');\n\n        Route::namespace('Wink\\Http\\Controllers')\n            ->middleware($middlewareGroup)\n            ->as('wink.')\n            ->prefix($path)\n            ->group(function () {\n                Route::get('/login', 'LoginController@showLoginForm')->name('auth.login');\n                Route::post('/login', 'LoginController@login')->name('auth.attempt');\n\n                Route::get('/password/forgot', 'ForgotPasswordController@showResetRequestForm')->name('password.forgot');\n                Route::post('/password/forgot', 'ForgotPasswordController@sendResetLinkEmail')->name('password.email');\n                Route::get('/password/reset/{token}', 'ForgotPasswordController@showNewPassword')->name('password.reset');\n            });\n\n        Route::namespace('Wink\\Http\\Controllers')\n            ->middleware([$middlewareGroup, Authenticate::class])\n            ->as('wink.')\n            ->prefix($path)\n            ->group(function () {\n                $this->loadRoutesFrom(__DIR__.'/Http/routes.php');\n            });\n    }", "code_tokens": ["private", "function", "registerRoutes", "(", ")", "{", "$", "path", "=", "config", "(", "'wink.path'", ")", ";", "$", "middlewareGroup", "=", "config", "(", "'wink.middleware_group'", ")", ";", "Route", "::", "namespace", "(", "'Wink\\Http\\Controllers'", ")", "->", "middleware", "(", "$", "middlewareGroup", ")", "->", "as", "(", "'wink.'", ")", "->", "prefix", "(", "$", "path", ")", "->", "group", "(", "function", "(", ")", "{", "Route", "::", "get", "(", "'/login'", ",", "'LoginController@showLoginForm'", ")", "->", "name", "(", "'auth.login'", ")", ";", "Route", "::", "post", "(", "'/login'", ",", "'LoginController@login'", ")", "->", "name", "(", "'auth.attempt'", ")", ";", "Route", "::", "get", "(", "'/password/forgot'", ",", "'ForgotPasswordController@showResetRequestForm'", ")", "->", "name", "(", "'password.forgot'", ")", ";", "Route", "::", "post", "(", "'/password/forgot'", ",", "'ForgotPasswordController@sendResetLinkEmail'", ")", "->", "name", "(", "'password.email'", ")", ";", "Route", "::", "get", "(", "'/password/reset/{token}'", ",", "'ForgotPasswordController@showNewPassword'", ")", "->", "name", "(", "'password.reset'", ")", ";", "}", ")", ";", "Route", "::", "namespace", "(", "'Wink\\Http\\Controllers'", ")", "->", "middleware", "(", "[", "$", "middlewareGroup", ",", "Authenticate", "::", "class", "]", ")", "->", "as", "(", "'wink.'", ")", "->", "prefix", "(", "$", "path", ")", "->", "group", "(", "function", "(", ")", "{", "$", "this", "->", "loadRoutesFrom", "(", "__DIR__", ".", "'/Http/routes.php'", ")", ";", "}", ")", ";", "}"], "docstring": "Register the package routes.\n\n@return void", "docstring_tokens": ["Register", "the", "package", "routes", "."], "sha": "b477213dc017779476e1f1bee3ed683324841f68", "url": "https://github.com/writingink/wink/blob/b477213dc017779476e1f1bee3ed683324841f68/src/WinkServiceProvider.php#L32-L57", "partition": "train"}
{"repo": "writingink/wink", "path": "src/Http/Controllers/ForgotPasswordController.php", "func_name": "ForgotPasswordController.sendResetLinkEmail", "original_string": "public function sendResetLinkEmail()\n    {\n        validator(request()->all(), [\n            'email' => 'required|email',\n        ])->validate();\n\n        if ($author = WinkAuthor::whereEmail(request('email'))->first()) {\n            cache(['password.reset.'.$author->id => $token = Str::random()],\n                now()->addMinutes(30)\n            );\n\n            Mail::to($author->email)->send(new ResetPasswordEmail(\n                encrypt($author->id.'|'.$token)\n            ));\n        }\n\n        return redirect()->route('wink.password.forgot')->with('sent', true);\n    }", "language": "php", "code": "public function sendResetLinkEmail()\n    {\n        validator(request()->all(), [\n            'email' => 'required|email',\n        ])->validate();\n\n        if ($author = WinkAuthor::whereEmail(request('email'))->first()) {\n            cache(['password.reset.'.$author->id => $token = Str::random()],\n                now()->addMinutes(30)\n            );\n\n            Mail::to($author->email)->send(new ResetPasswordEmail(\n                encrypt($author->id.'|'.$token)\n            ));\n        }\n\n        return redirect()->route('wink.password.forgot')->with('sent', true);\n    }", "code_tokens": ["public", "function", "sendResetLinkEmail", "(", ")", "{", "validator", "(", "request", "(", ")", "->", "all", "(", ")", ",", "[", "'email'", "=>", "'required|email'", ",", "]", ")", "->", "validate", "(", ")", ";", "if", "(", "$", "author", "=", "WinkAuthor", "::", "whereEmail", "(", "request", "(", "'email'", ")", ")", "->", "first", "(", ")", ")", "{", "cache", "(", "[", "'password.reset.'", ".", "$", "author", "->", "id", "=>", "$", "token", "=", "Str", "::", "random", "(", ")", "]", ",", "now", "(", ")", "->", "addMinutes", "(", "30", ")", ")", ";", "Mail", "::", "to", "(", "$", "author", "->", "email", ")", "->", "send", "(", "new", "ResetPasswordEmail", "(", "encrypt", "(", "$", "author", "->", "id", ".", "'|'", ".", "$", "token", ")", ")", ")", ";", "}", "return", "redirect", "(", ")", "->", "route", "(", "'wink.password.forgot'", ")", "->", "with", "(", "'sent'", ",", "true", ")", ";", "}"], "docstring": "Send password reset email.\n\n@return \\Illuminate\\Http\\Response", "docstring_tokens": ["Send", "password", "reset", "email", "."], "sha": "b477213dc017779476e1f1bee3ed683324841f68", "url": "https://github.com/writingink/wink/blob/b477213dc017779476e1f1bee3ed683324841f68/src/Http/Controllers/ForgotPasswordController.php#L29-L46", "partition": "train"}
{"repo": "writingink/wink", "path": "src/Http/Controllers/ForgotPasswordController.php", "func_name": "ForgotPasswordController.showNewPassword", "original_string": "public function showNewPassword($token)\n    {\n        try {\n            $token = decrypt($token);\n\n            [$authorId, $token] = explode('|', $token);\n\n            $author = WinkAuthor::findOrFail($authorId);\n        } catch (Throwable $e) {\n            return redirect()->route('wink.password.forgot')->with('invalidResetToken', true);\n        }\n\n        if (cache('password.reset.'.$authorId) != $token) {\n            return redirect()->route('wink.password.forgot')->with('invalidResetToken', true);\n        }\n\n        cache()->forget('password.reset.'.$authorId);\n\n        $author->password = \\Hash::make($password = Str::random());\n\n        $author->save();\n\n        return view('wink::reset-password', [\n            'password' => $password,\n        ]);\n    }", "language": "php", "code": "public function showNewPassword($token)\n    {\n        try {\n            $token = decrypt($token);\n\n            [$authorId, $token] = explode('|', $token);\n\n            $author = WinkAuthor::findOrFail($authorId);\n        } catch (Throwable $e) {\n            return redirect()->route('wink.password.forgot')->with('invalidResetToken', true);\n        }\n\n        if (cache('password.reset.'.$authorId) != $token) {\n            return redirect()->route('wink.password.forgot')->with('invalidResetToken', true);\n        }\n\n        cache()->forget('password.reset.'.$authorId);\n\n        $author->password = \\Hash::make($password = Str::random());\n\n        $author->save();\n\n        return view('wink::reset-password', [\n            'password' => $password,\n        ]);\n    }", "code_tokens": ["public", "function", "showNewPassword", "(", "$", "token", ")", "{", "try", "{", "$", "token", "=", "decrypt", "(", "$", "token", ")", ";", "[", "$", "authorId", ",", "$", "token", "]", "=", "explode", "(", "'|'", ",", "$", "token", ")", ";", "$", "author", "=", "WinkAuthor", "::", "findOrFail", "(", "$", "authorId", ")", ";", "}", "catch", "(", "Throwable", "$", "e", ")", "{", "return", "redirect", "(", ")", "->", "route", "(", "'wink.password.forgot'", ")", "->", "with", "(", "'invalidResetToken'", ",", "true", ")", ";", "}", "if", "(", "cache", "(", "'password.reset.'", ".", "$", "authorId", ")", "!=", "$", "token", ")", "{", "return", "redirect", "(", ")", "->", "route", "(", "'wink.password.forgot'", ")", "->", "with", "(", "'invalidResetToken'", ",", "true", ")", ";", "}", "cache", "(", ")", "->", "forget", "(", "'password.reset.'", ".", "$", "authorId", ")", ";", "$", "author", "->", "password", "=", "\\", "Hash", "::", "make", "(", "$", "password", "=", "Str", "::", "random", "(", ")", ")", ";", "$", "author", "->", "save", "(", ")", ";", "return", "view", "(", "'wink::reset-password'", ",", "[", "'password'", "=>", "$", "password", ",", "]", ")", ";", "}"], "docstring": "Show the new password to the user.\n\n@param  string  $token\n@return \\Illuminate\\Http\\Response", "docstring_tokens": ["Show", "the", "new", "password", "to", "the", "user", "."], "sha": "b477213dc017779476e1f1bee3ed683324841f68", "url": "https://github.com/writingink/wink/blob/b477213dc017779476e1f1bee3ed683324841f68/src/Http/Controllers/ForgotPasswordController.php#L54-L79", "partition": "train"}
{"repo": "writingink/wink", "path": "src/Http/Controllers/PagesController.php", "func_name": "PagesController.index", "original_string": "public function index()\n    {\n        $entries = WinkPage::when(request()->has('search'), function ($q) {\n            $q->where('title', 'LIKE', '%'.request('search').'%');\n        })\n            ->orderBy('created_at', 'DESC')\n            ->paginate(30);\n\n        return PagesResource::collection($entries);\n    }", "language": "php", "code": "public function index()\n    {\n        $entries = WinkPage::when(request()->has('search'), function ($q) {\n            $q->where('title', 'LIKE', '%'.request('search').'%');\n        })\n            ->orderBy('created_at', 'DESC')\n            ->paginate(30);\n\n        return PagesResource::collection($entries);\n    }", "code_tokens": ["public", "function", "index", "(", ")", "{", "$", "entries", "=", "WinkPage", "::", "when", "(", "request", "(", ")", "->", "has", "(", "'search'", ")", ",", "function", "(", "$", "q", ")", "{", "$", "q", "->", "where", "(", "'title'", ",", "'LIKE'", ",", "'%'", ".", "request", "(", "'search'", ")", ".", "'%'", ")", ";", "}", ")", "->", "orderBy", "(", "'created_at'", ",", "'DESC'", ")", "->", "paginate", "(", "30", ")", ";", "return", "PagesResource", "::", "collection", "(", "$", "entries", ")", ";", "}"], "docstring": "Return pages.\n\n@return \\Illuminate\\Http\\Resources\\Json\\AnonymousResourceCollection|\\Illuminate\\Http\\JsonResponse", "docstring_tokens": ["Return", "pages", "."], "sha": "b477213dc017779476e1f1bee3ed683324841f68", "url": "https://github.com/writingink/wink/blob/b477213dc017779476e1f1bee3ed683324841f68/src/Http/Controllers/PagesController.php#L17-L26", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/Response.php", "func_name": "Response.makeFromExisting", "original_string": "public static function makeFromExisting(IlluminateResponse $old)\n    {\n        $new = static::create($old->getOriginalContent(), $old->getStatusCode());\n\n        $new->headers = $old->headers;\n\n        return $new;\n    }", "language": "php", "code": "public static function makeFromExisting(IlluminateResponse $old)\n    {\n        $new = static::create($old->getOriginalContent(), $old->getStatusCode());\n\n        $new->headers = $old->headers;\n\n        return $new;\n    }", "code_tokens": ["public", "static", "function", "makeFromExisting", "(", "IlluminateResponse", "$", "old", ")", "{", "$", "new", "=", "static", "::", "create", "(", "$", "old", "->", "getOriginalContent", "(", ")", ",", "$", "old", "->", "getStatusCode", "(", ")", ")", ";", "$", "new", "->", "headers", "=", "$", "old", "->", "headers", ";", "return", "$", "new", ";", "}"], "docstring": "Make an API response from an existing Illuminate response.\n\n@param \\Illuminate\\Http\\Response $old\n\n@return \\Dingo\\Api\\Http\\Response", "docstring_tokens": ["Make", "an", "API", "response", "from", "an", "existing", "Illuminate", "response", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/Response.php#L87-L94", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/Response.php", "func_name": "Response.withHeader", "original_string": "public function withHeader($key, $value, $replace = true)\n    {\n        return $this->header($key, $value, $replace);\n    }", "language": "php", "code": "public function withHeader($key, $value, $replace = true)\n    {\n        return $this->header($key, $value, $replace);\n    }", "code_tokens": ["public", "function", "withHeader", "(", "$", "key", ",", "$", "value", ",", "$", "replace", "=", "true", ")", "{", "return", "$", "this", "->", "header", "(", "$", "key", ",", "$", "value", ",", "$", "replace", ")", ";", "}"], "docstring": "Add a header to the response.\n\n@param string $key\n@param string $value\n@param bool   $replace\n\n@return \\Dingo\\Api\\Http\\Response", "docstring_tokens": ["Add", "a", "header", "to", "the", "response", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/Response.php#L409-L412", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/Request.php", "func_name": "Request.createFromIlluminate", "original_string": "public function createFromIlluminate(IlluminateRequest $old)\n    {\n        $new = new static(\n            $old->query->all(), $old->request->all(), $old->attributes->all(),\n            $old->cookies->all(), $old->files->all(), $old->server->all(), $old->content\n        );\n\n        if ($session = $old->getSession()) {\n            $new->setLaravelSession($old->getSession());\n        }\n\n        $new->setRouteResolver($old->getRouteResolver());\n        $new->setUserResolver($old->getUserResolver());\n\n        return $new;\n    }", "language": "php", "code": "public function createFromIlluminate(IlluminateRequest $old)\n    {\n        $new = new static(\n            $old->query->all(), $old->request->all(), $old->attributes->all(),\n            $old->cookies->all(), $old->files->all(), $old->server->all(), $old->content\n        );\n\n        if ($session = $old->getSession()) {\n            $new->setLaravelSession($old->getSession());\n        }\n\n        $new->setRouteResolver($old->getRouteResolver());\n        $new->setUserResolver($old->getUserResolver());\n\n        return $new;\n    }", "code_tokens": ["public", "function", "createFromIlluminate", "(", "IlluminateRequest", "$", "old", ")", "{", "$", "new", "=", "new", "static", "(", "$", "old", "->", "query", "->", "all", "(", ")", ",", "$", "old", "->", "request", "->", "all", "(", ")", ",", "$", "old", "->", "attributes", "->", "all", "(", ")", ",", "$", "old", "->", "cookies", "->", "all", "(", ")", ",", "$", "old", "->", "files", "->", "all", "(", ")", ",", "$", "old", "->", "server", "->", "all", "(", ")", ",", "$", "old", "->", "content", ")", ";", "if", "(", "$", "session", "=", "$", "old", "->", "getSession", "(", ")", ")", "{", "$", "new", "->", "setLaravelSession", "(", "$", "old", "->", "getSession", "(", ")", ")", ";", "}", "$", "new", "->", "setRouteResolver", "(", "$", "old", "->", "getRouteResolver", "(", ")", ")", ";", "$", "new", "->", "setUserResolver", "(", "$", "old", "->", "getUserResolver", "(", ")", ")", ";", "return", "$", "new", ";", "}"], "docstring": "Create a new Dingo request instance from an Illuminate request instance.\n\n@param \\Illuminate\\Http\\Request $old\n\n@return \\Dingo\\Api\\Http\\Request", "docstring_tokens": ["Create", "a", "new", "Dingo", "request", "instance", "from", "an", "Illuminate", "request", "instance", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/Request.php#L32-L47", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Adapter/Laravel.php", "func_name": "Laravel.getRoutes", "original_string": "public function getRoutes($version = null)\n    {\n        if (! is_null($version)) {\n            return $this->routes[$version];\n        }\n\n        return $this->routes;\n    }", "language": "php", "code": "public function getRoutes($version = null)\n    {\n        if (! is_null($version)) {\n            return $this->routes[$version];\n        }\n\n        return $this->routes;\n    }", "code_tokens": ["public", "function", "getRoutes", "(", "$", "version", "=", "null", ")", "{", "if", "(", "!", "is_null", "(", "$", "version", ")", ")", "{", "return", "$", "this", "->", "routes", "[", "$", "version", "]", ";", "}", "return", "$", "this", "->", "routes", ";", "}"], "docstring": "Get all routes or only for a specific version.\n\n@param string $version\n\n@return mixed", "docstring_tokens": ["Get", "all", "routes", "or", "only", "for", "a", "specific", "version", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Adapter/Laravel.php#L183-L190", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Adapter/Laravel.php", "func_name": "Laravel.gatherRouteMiddlewares", "original_string": "public function gatherRouteMiddlewares($route)\n    {\n        if (method_exists($this->router, 'gatherRouteMiddleware')) {\n            return $this->router->gatherRouteMiddleware($route);\n        }\n\n        return $this->router->gatherRouteMiddlewares($route);\n    }", "language": "php", "code": "public function gatherRouteMiddlewares($route)\n    {\n        if (method_exists($this->router, 'gatherRouteMiddleware')) {\n            return $this->router->gatherRouteMiddleware($route);\n        }\n\n        return $this->router->gatherRouteMiddlewares($route);\n    }", "code_tokens": ["public", "function", "gatherRouteMiddlewares", "(", "$", "route", ")", "{", "if", "(", "method_exists", "(", "$", "this", "->", "router", ",", "'gatherRouteMiddleware'", ")", ")", "{", "return", "$", "this", "->", "router", "->", "gatherRouteMiddleware", "(", "$", "route", ")", ";", "}", "return", "$", "this", "->", "router", "->", "gatherRouteMiddlewares", "(", "$", "route", ")", ";", "}"], "docstring": "Gather the route middlewares.\n\n@param \\Illuminate\\Routing\\Route $route\n\n@return array", "docstring_tokens": ["Gather", "the", "route", "middlewares", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Adapter/Laravel.php#L237-L244", "partition": "train"}
{"repo": "dingo/api", "path": "src/Transformer/Adapter/Fractal.php", "func_name": "Fractal.shouldEagerLoad", "original_string": "protected function shouldEagerLoad($response)\n    {\n        if ($response instanceof IlluminatePaginator) {\n            $response = $response->getCollection();\n        }\n\n        return $response instanceof EloquentCollection && $this->eagerLoading;\n    }", "language": "php", "code": "protected function shouldEagerLoad($response)\n    {\n        if ($response instanceof IlluminatePaginator) {\n            $response = $response->getCollection();\n        }\n\n        return $response instanceof EloquentCollection && $this->eagerLoading;\n    }", "code_tokens": ["protected", "function", "shouldEagerLoad", "(", "$", "response", ")", "{", "if", "(", "$", "response", "instanceof", "IlluminatePaginator", ")", "{", "$", "response", "=", "$", "response", "->", "getCollection", "(", ")", ";", "}", "return", "$", "response", "instanceof", "EloquentCollection", "&&", "$", "this", "->", "eagerLoading", ";", "}"], "docstring": "Eager loading is only performed when the response is or contains an\nEloquent collection and eager loading is enabled.\n\n@param mixed $response\n\n@return bool", "docstring_tokens": ["Eager", "loading", "is", "only", "performed", "when", "the", "response", "is", "or", "contains", "an", "Eloquent", "collection", "and", "eager", "loading", "is", "enabled", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Transformer/Adapter/Fractal.php#L120-L127", "partition": "train"}
{"repo": "dingo/api", "path": "src/Transformer/Adapter/Fractal.php", "func_name": "Fractal.parseFractalIncludes", "original_string": "public function parseFractalIncludes(Request $request)\n    {\n        $includes = $request->input($this->includeKey);\n\n        if (! is_array($includes)) {\n            $includes = array_map('trim', array_filter(explode($this->includeSeparator, $includes)));\n        }\n\n        $this->fractal->parseIncludes($includes);\n    }", "language": "php", "code": "public function parseFractalIncludes(Request $request)\n    {\n        $includes = $request->input($this->includeKey);\n\n        if (! is_array($includes)) {\n            $includes = array_map('trim', array_filter(explode($this->includeSeparator, $includes)));\n        }\n\n        $this->fractal->parseIncludes($includes);\n    }", "code_tokens": ["public", "function", "parseFractalIncludes", "(", "Request", "$", "request", ")", "{", "$", "includes", "=", "$", "request", "->", "input", "(", "$", "this", "->", "includeKey", ")", ";", "if", "(", "!", "is_array", "(", "$", "includes", ")", ")", "{", "$", "includes", "=", "array_map", "(", "'trim'", ",", "array_filter", "(", "explode", "(", "$", "this", "->", "includeSeparator", ",", "$", "includes", ")", ")", ")", ";", "}", "$", "this", "->", "fractal", "->", "parseIncludes", "(", "$", "includes", ")", ";", "}"], "docstring": "Parse the includes.\n\n@param \\Dingo\\Api\\Http\\Request $request\n\n@return void", "docstring_tokens": ["Parse", "the", "includes", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Transformer/Adapter/Fractal.php#L168-L177", "partition": "train"}
{"repo": "dingo/api", "path": "src/Transformer/Adapter/Fractal.php", "func_name": "Fractal.mergeEagerLoads", "original_string": "protected function mergeEagerLoads($transformer, $requestedIncludes)\n    {\n        $includes = array_merge($requestedIncludes, $transformer->getDefaultIncludes());\n\n        $eagerLoads = [];\n\n        foreach ($includes as $key => $value) {\n            $eagerLoads[] = is_string($key) ? $key : $value;\n        }\n\n        if (property_exists($transformer, 'lazyLoadedIncludes')) {\n            $eagerLoads = array_diff($eagerLoads, $transformer->lazyLoadedIncludes);\n        }\n\n        return $eagerLoads;\n    }", "language": "php", "code": "protected function mergeEagerLoads($transformer, $requestedIncludes)\n    {\n        $includes = array_merge($requestedIncludes, $transformer->getDefaultIncludes());\n\n        $eagerLoads = [];\n\n        foreach ($includes as $key => $value) {\n            $eagerLoads[] = is_string($key) ? $key : $value;\n        }\n\n        if (property_exists($transformer, 'lazyLoadedIncludes')) {\n            $eagerLoads = array_diff($eagerLoads, $transformer->lazyLoadedIncludes);\n        }\n\n        return $eagerLoads;\n    }", "code_tokens": ["protected", "function", "mergeEagerLoads", "(", "$", "transformer", ",", "$", "requestedIncludes", ")", "{", "$", "includes", "=", "array_merge", "(", "$", "requestedIncludes", ",", "$", "transformer", "->", "getDefaultIncludes", "(", ")", ")", ";", "$", "eagerLoads", "=", "[", "]", ";", "foreach", "(", "$", "includes", "as", "$", "key", "=>", "$", "value", ")", "{", "$", "eagerLoads", "[", "]", "=", "is_string", "(", "$", "key", ")", "?", "$", "key", ":", "$", "value", ";", "}", "if", "(", "property_exists", "(", "$", "transformer", ",", "'lazyLoadedIncludes'", ")", ")", "{", "$", "eagerLoads", "=", "array_diff", "(", "$", "eagerLoads", ",", "$", "transformer", "->", "lazyLoadedIncludes", ")", ";", "}", "return", "$", "eagerLoads", ";", "}"], "docstring": "Get includes as their array keys for eager loading.\n\n@param \\League\\Fractal\\TransformerAbstract $transformer\n@param string|array                        $requestedIncludes\n\n@return array", "docstring_tokens": ["Get", "includes", "as", "their", "array", "keys", "for", "eager", "loading", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Transformer/Adapter/Fractal.php#L197-L212", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/Response/Factory.php", "func_name": "Factory.item", "original_string": "public function item($item, $transformer, $parameters = [], Closure $after = null)\n    {\n        $class = get_class($item);\n\n        if ($parameters instanceof \\Closure) {\n            $after = $parameters;\n            $parameters = [];\n        }\n\n        $binding = $this->transformer->register($class, $transformer, $parameters, $after);\n\n        return new Response($item, 200, [], $binding);\n    }", "language": "php", "code": "public function item($item, $transformer, $parameters = [], Closure $after = null)\n    {\n        $class = get_class($item);\n\n        if ($parameters instanceof \\Closure) {\n            $after = $parameters;\n            $parameters = [];\n        }\n\n        $binding = $this->transformer->register($class, $transformer, $parameters, $after);\n\n        return new Response($item, 200, [], $binding);\n    }", "code_tokens": ["public", "function", "item", "(", "$", "item", ",", "$", "transformer", ",", "$", "parameters", "=", "[", "]", ",", "Closure", "$", "after", "=", "null", ")", "{", "$", "class", "=", "get_class", "(", "$", "item", ")", ";", "if", "(", "$", "parameters", "instanceof", "\\", "Closure", ")", "{", "$", "after", "=", "$", "parameters", ";", "$", "parameters", "=", "[", "]", ";", "}", "$", "binding", "=", "$", "this", "->", "transformer", "->", "register", "(", "$", "class", ",", "$", "transformer", ",", "$", "parameters", ",", "$", "after", ")", ";", "return", "new", "Response", "(", "$", "item", ",", "200", ",", "[", "]", ",", "$", "binding", ")", ";", "}"], "docstring": "Bind an item to a transformer and start building a response.\n\n@param object                 $item\n@param string|callable|object $transformer\n@param array                  $parameters\n@param \\Closure               $after\n\n@return \\Dingo\\Api\\Http\\Response", "docstring_tokens": ["Bind", "an", "item", "to", "a", "transformer", "and", "start", "building", "a", "response", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/Response/Factory.php#L124-L136", "partition": "train"}
{"repo": "dingo/api", "path": "src/Transformer/Binding.php", "func_name": "Binding.resolveTransformer", "original_string": "public function resolveTransformer()\n    {\n        if (is_string($this->resolver)) {\n            return $this->container->make($this->resolver);\n        } elseif (is_callable($this->resolver)) {\n            return call_user_func($this->resolver, $this->container);\n        } elseif (is_object($this->resolver)) {\n            return $this->resolver;\n        }\n\n        throw new RuntimeException('Unable to resolve transformer binding.');\n    }", "language": "php", "code": "public function resolveTransformer()\n    {\n        if (is_string($this->resolver)) {\n            return $this->container->make($this->resolver);\n        } elseif (is_callable($this->resolver)) {\n            return call_user_func($this->resolver, $this->container);\n        } elseif (is_object($this->resolver)) {\n            return $this->resolver;\n        }\n\n        throw new RuntimeException('Unable to resolve transformer binding.');\n    }", "code_tokens": ["public", "function", "resolveTransformer", "(", ")", "{", "if", "(", "is_string", "(", "$", "this", "->", "resolver", ")", ")", "{", "return", "$", "this", "->", "container", "->", "make", "(", "$", "this", "->", "resolver", ")", ";", "}", "elseif", "(", "is_callable", "(", "$", "this", "->", "resolver", ")", ")", "{", "return", "call_user_func", "(", "$", "this", "->", "resolver", ",", "$", "this", "->", "container", ")", ";", "}", "elseif", "(", "is_object", "(", "$", "this", "->", "resolver", ")", ")", "{", "return", "$", "this", "->", "resolver", ";", "}", "throw", "new", "RuntimeException", "(", "'Unable to resolve transformer binding.'", ")", ";", "}"], "docstring": "Resolve a transformer binding instance.\n\n@throws \\RuntimeException\n\n@return object", "docstring_tokens": ["Resolve", "a", "transformer", "binding", "instance", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Transformer/Binding.php#L71-L82", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/RouteCollection.php", "func_name": "RouteCollection.addLookups", "original_string": "protected function addLookups(Route $route)\n    {\n        $action = $route->getAction();\n\n        if (isset($action['as'])) {\n            $this->names[$action['as']] = $route;\n        }\n\n        if (isset($action['controller'])) {\n            $this->actions[$action['controller']] = $route;\n        }\n    }", "language": "php", "code": "protected function addLookups(Route $route)\n    {\n        $action = $route->getAction();\n\n        if (isset($action['as'])) {\n            $this->names[$action['as']] = $route;\n        }\n\n        if (isset($action['controller'])) {\n            $this->actions[$action['controller']] = $route;\n        }\n    }", "code_tokens": ["protected", "function", "addLookups", "(", "Route", "$", "route", ")", "{", "$", "action", "=", "$", "route", "->", "getAction", "(", ")", ";", "if", "(", "isset", "(", "$", "action", "[", "'as'", "]", ")", ")", "{", "$", "this", "->", "names", "[", "$", "action", "[", "'as'", "]", "]", "=", "$", "route", ";", "}", "if", "(", "isset", "(", "$", "action", "[", "'controller'", "]", ")", ")", "{", "$", "this", "->", "actions", "[", "$", "action", "[", "'controller'", "]", "]", "=", "$", "route", ";", "}", "}"], "docstring": "Add route lookups.\n\n@param \\Dingo\\Api\\Routing\\Route $route\n\n@return void", "docstring_tokens": ["Add", "route", "lookups", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/RouteCollection.php#L55-L66", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/RouteCollection.php", "func_name": "RouteCollection.getByName", "original_string": "public function getByName($name)\n    {\n        return isset($this->names[$name]) ? $this->names[$name] : null;\n    }", "language": "php", "code": "public function getByName($name)\n    {\n        return isset($this->names[$name]) ? $this->names[$name] : null;\n    }", "code_tokens": ["public", "function", "getByName", "(", "$", "name", ")", "{", "return", "isset", "(", "$", "this", "->", "names", "[", "$", "name", "]", ")", "?", "$", "this", "->", "names", "[", "$", "name", "]", ":", "null", ";", "}"], "docstring": "Get a route by name.\n\n@param string $name\n\n@return \\Dingo\\Api\\Routing\\Route|null", "docstring_tokens": ["Get", "a", "route", "by", "name", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/RouteCollection.php#L75-L78", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/RouteCollection.php", "func_name": "RouteCollection.getByAction", "original_string": "public function getByAction($action)\n    {\n        return isset($this->actions[$action]) ? $this->actions[$action] : null;\n    }", "language": "php", "code": "public function getByAction($action)\n    {\n        return isset($this->actions[$action]) ? $this->actions[$action] : null;\n    }", "code_tokens": ["public", "function", "getByAction", "(", "$", "action", ")", "{", "return", "isset", "(", "$", "this", "->", "actions", "[", "$", "action", "]", ")", "?", "$", "this", "->", "actions", "[", "$", "action", "]", ":", "null", ";", "}"], "docstring": "Get a route by action.\n\n@param string $action\n\n@return \\Dingo\\Api\\Routing\\Route|null", "docstring_tokens": ["Get", "a", "route", "by", "action", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/RouteCollection.php#L87-L90", "partition": "train"}
{"repo": "dingo/api", "path": "src/Console/Command/Routes.php", "func_name": "Routes.routeRateLimit", "original_string": "protected function routeRateLimit($route)\n    {\n        list($limit, $expires) = [$route->getRateLimit(), $route->getRateLimitExpiration()];\n\n        if ($limit && $expires) {\n            return sprintf('%s req/s', round($limit / ($expires * 60), 2));\n        }\n    }", "language": "php", "code": "protected function routeRateLimit($route)\n    {\n        list($limit, $expires) = [$route->getRateLimit(), $route->getRateLimitExpiration()];\n\n        if ($limit && $expires) {\n            return sprintf('%s req/s', round($limit / ($expires * 60), 2));\n        }\n    }", "code_tokens": ["protected", "function", "routeRateLimit", "(", "$", "route", ")", "{", "list", "(", "$", "limit", ",", "$", "expires", ")", "=", "[", "$", "route", "->", "getRateLimit", "(", ")", ",", "$", "route", "->", "getRateLimitExpiration", "(", ")", "]", ";", "if", "(", "$", "limit", "&&", "$", "expires", ")", "{", "return", "sprintf", "(", "'%s req/s'", ",", "round", "(", "$", "limit", "/", "(", "$", "expires", "*", "60", ")", ",", "2", ")", ")", ";", "}", "}"], "docstring": "Display the routes rate limiting requests per second. This takes the limit\nand divides it by the expiration time in seconds to give you a rough\nidea of how many requests you'd be able to fire off per second\non the route.\n\n@param \\Dingo\\Api\\Routing\\Route $route\n\n@return null|string", "docstring_tokens": ["Display", "the", "routes", "rate", "limiting", "requests", "per", "second", ".", "This", "takes", "the", "limit", "and", "divides", "it", "by", "the", "expiration", "time", "in", "seconds", "to", "give", "you", "a", "rough", "idea", "of", "how", "many", "requests", "you", "d", "be", "able", "to", "fire", "off", "per", "second", "on", "the", "route", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Console/Command/Routes.php#L145-L152", "partition": "train"}
{"repo": "dingo/api", "path": "src/Console/Command/Routes.php", "func_name": "Routes.filterByVersions", "original_string": "protected function filterByVersions(array $route)\n    {\n        foreach ($this->option('versions') as $version) {\n            if (Str::contains($route['versions'], $version)) {\n                return true;\n            }\n        }\n\n        return false;\n    }", "language": "php", "code": "protected function filterByVersions(array $route)\n    {\n        foreach ($this->option('versions') as $version) {\n            if (Str::contains($route['versions'], $version)) {\n                return true;\n            }\n        }\n\n        return false;\n    }", "code_tokens": ["protected", "function", "filterByVersions", "(", "array", "$", "route", ")", "{", "foreach", "(", "$", "this", "->", "option", "(", "'versions'", ")", "as", "$", "version", ")", "{", "if", "(", "Str", "::", "contains", "(", "$", "route", "[", "'versions'", "]", ",", "$", "version", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "docstring": "Filter the route by its versions.\n\n@param array $route\n\n@return bool", "docstring_tokens": ["Filter", "the", "route", "by", "its", "versions", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Console/Command/Routes.php#L245-L254", "partition": "train"}
{"repo": "dingo/api", "path": "src/Console/Command/Routes.php", "func_name": "Routes.filterByScopes", "original_string": "protected function filterByScopes(array $route)\n    {\n        foreach ($this->option('scopes') as $scope) {\n            if (Str::contains($route['scopes'], $scope)) {\n                return true;\n            }\n        }\n\n        return false;\n    }", "language": "php", "code": "protected function filterByScopes(array $route)\n    {\n        foreach ($this->option('scopes') as $scope) {\n            if (Str::contains($route['scopes'], $scope)) {\n                return true;\n            }\n        }\n\n        return false;\n    }", "code_tokens": ["protected", "function", "filterByScopes", "(", "array", "$", "route", ")", "{", "foreach", "(", "$", "this", "->", "option", "(", "'scopes'", ")", "as", "$", "scope", ")", "{", "if", "(", "Str", "::", "contains", "(", "$", "route", "[", "'scopes'", "]", ",", "$", "scope", ")", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "docstring": "Filter the route by its scopes.\n\n@param array $route\n\n@return bool", "docstring_tokens": ["Filter", "the", "route", "by", "its", "scopes", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Console/Command/Routes.php#L275-L284", "partition": "train"}
{"repo": "dingo/api", "path": "src/Transformer/Factory.php", "func_name": "Factory.register", "original_string": "public function register($class, $resolver, array $parameters = [], Closure $after = null)\n    {\n        return $this->bindings[$class] = $this->createBinding($resolver, $parameters, $after);\n    }", "language": "php", "code": "public function register($class, $resolver, array $parameters = [], Closure $after = null)\n    {\n        return $this->bindings[$class] = $this->createBinding($resolver, $parameters, $after);\n    }", "code_tokens": ["public", "function", "register", "(", "$", "class", ",", "$", "resolver", ",", "array", "$", "parameters", "=", "[", "]", ",", "Closure", "$", "after", "=", "null", ")", "{", "return", "$", "this", "->", "bindings", "[", "$", "class", "]", "=", "$", "this", "->", "createBinding", "(", "$", "resolver", ",", "$", "parameters", ",", "$", "after", ")", ";", "}"], "docstring": "Register a transformer binding resolver for a class.\n\n@param               $class\n@param               $resolver\n@param array         $parameters\n@param \\Closure|null $after\n\n@return \\Dingo\\Api\\Transformer\\Binding", "docstring_tokens": ["Register", "a", "transformer", "binding", "resolver", "for", "a", "class", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Transformer/Factory.php#L61-L64", "partition": "train"}
{"repo": "dingo/api", "path": "src/Transformer/Factory.php", "func_name": "Factory.transform", "original_string": "public function transform($response)\n    {\n        $binding = $this->getBinding($response);\n\n        return $this->adapter->transform($response, $binding->resolveTransformer(), $binding, $this->getRequest());\n    }", "language": "php", "code": "public function transform($response)\n    {\n        $binding = $this->getBinding($response);\n\n        return $this->adapter->transform($response, $binding->resolveTransformer(), $binding, $this->getRequest());\n    }", "code_tokens": ["public", "function", "transform", "(", "$", "response", ")", "{", "$", "binding", "=", "$", "this", "->", "getBinding", "(", "$", "response", ")", ";", "return", "$", "this", "->", "adapter", "->", "transform", "(", "$", "response", ",", "$", "binding", "->", "resolveTransformer", "(", ")", ",", "$", "binding", ",", "$", "this", "->", "getRequest", "(", ")", ")", ";", "}"], "docstring": "Transform a response.\n\n@param string|object $response\n\n@return mixed", "docstring_tokens": ["Transform", "a", "response", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Transformer/Factory.php#L73-L78", "partition": "train"}
{"repo": "dingo/api", "path": "src/Transformer/Factory.php", "func_name": "Factory.getBinding", "original_string": "protected function getBinding($class)\n    {\n        if ($this->isCollection($class) && ! $class->isEmpty()) {\n            return $this->getBindingFromCollection($class);\n        }\n\n        $class = is_object($class) ? get_class($class) : $class;\n\n        if (! $this->hasBinding($class)) {\n            throw new RuntimeException('Unable to find bound transformer for \"'.$class.'\" class.');\n        }\n\n        return $this->bindings[$class];\n    }", "language": "php", "code": "protected function getBinding($class)\n    {\n        if ($this->isCollection($class) && ! $class->isEmpty()) {\n            return $this->getBindingFromCollection($class);\n        }\n\n        $class = is_object($class) ? get_class($class) : $class;\n\n        if (! $this->hasBinding($class)) {\n            throw new RuntimeException('Unable to find bound transformer for \"'.$class.'\" class.');\n        }\n\n        return $this->bindings[$class];\n    }", "code_tokens": ["protected", "function", "getBinding", "(", "$", "class", ")", "{", "if", "(", "$", "this", "->", "isCollection", "(", "$", "class", ")", "&&", "!", "$", "class", "->", "isEmpty", "(", ")", ")", "{", "return", "$", "this", "->", "getBindingFromCollection", "(", "$", "class", ")", ";", "}", "$", "class", "=", "is_object", "(", "$", "class", ")", "?", "get_class", "(", "$", "class", ")", ":", "$", "class", ";", "if", "(", "!", "$", "this", "->", "hasBinding", "(", "$", "class", ")", ")", "{", "throw", "new", "RuntimeException", "(", "'Unable to find bound transformer for \"'", ".", "$", "class", ".", "'\" class.'", ")", ";", "}", "return", "$", "this", "->", "bindings", "[", "$", "class", "]", ";", "}"], "docstring": "Get a registered transformer binding.\n\n@param string|object $class\n\n@throws \\RuntimeException\n\n@return \\Dingo\\Api\\Transformer\\Binding", "docstring_tokens": ["Get", "a", "registered", "transformer", "binding", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Transformer/Factory.php#L113-L126", "partition": "train"}
{"repo": "dingo/api", "path": "src/Transformer/Factory.php", "func_name": "Factory.createBinding", "original_string": "protected function createBinding($resolver, array $parameters = [], Closure $callback = null)\n    {\n        return new Binding($this->container, $resolver, $parameters, $callback);\n    }", "language": "php", "code": "protected function createBinding($resolver, array $parameters = [], Closure $callback = null)\n    {\n        return new Binding($this->container, $resolver, $parameters, $callback);\n    }", "code_tokens": ["protected", "function", "createBinding", "(", "$", "resolver", ",", "array", "$", "parameters", "=", "[", "]", ",", "Closure", "$", "callback", "=", "null", ")", "{", "return", "new", "Binding", "(", "$", "this", "->", "container", ",", "$", "resolver", ",", "$", "parameters", ",", "$", "callback", ")", ";", "}"], "docstring": "Create a new binding instance.\n\n@param string|callable|object $resolver\n@param array                  $parameters\n@param \\Closure               $callback\n\n@return \\Dingo\\Api\\Transformer\\Binding", "docstring_tokens": ["Create", "a", "new", "binding", "instance", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Transformer/Factory.php#L137-L140", "partition": "train"}
{"repo": "dingo/api", "path": "src/Transformer/Factory.php", "func_name": "Factory.hasBinding", "original_string": "protected function hasBinding($class)\n    {\n        if ($this->isCollection($class) && ! $class->isEmpty()) {\n            $class = $class->first();\n        }\n\n        $class = is_object($class) ? get_class($class) : $class;\n\n        return isset($this->bindings[$class]);\n    }", "language": "php", "code": "protected function hasBinding($class)\n    {\n        if ($this->isCollection($class) && ! $class->isEmpty()) {\n            $class = $class->first();\n        }\n\n        $class = is_object($class) ? get_class($class) : $class;\n\n        return isset($this->bindings[$class]);\n    }", "code_tokens": ["protected", "function", "hasBinding", "(", "$", "class", ")", "{", "if", "(", "$", "this", "->", "isCollection", "(", "$", "class", ")", "&&", "!", "$", "class", "->", "isEmpty", "(", ")", ")", "{", "$", "class", "=", "$", "class", "->", "first", "(", ")", ";", "}", "$", "class", "=", "is_object", "(", "$", "class", ")", "?", "get_class", "(", "$", "class", ")", ":", "$", "class", ";", "return", "isset", "(", "$", "this", "->", "bindings", "[", "$", "class", "]", ")", ";", "}"], "docstring": "Determine if a class has a transformer binding.\n\n@param string|object $class\n\n@return bool", "docstring_tokens": ["Determine", "if", "a", "class", "has", "a", "transformer", "binding", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Transformer/Factory.php#L161-L170", "partition": "train"}
{"repo": "dingo/api", "path": "src/Transformer/Factory.php", "func_name": "Factory.getRequest", "original_string": "public function getRequest()\n    {\n        $request = $this->container['request'];\n\n        if ($request instanceof IlluminateRequest && ! $request instanceof Request) {\n            $request = (new Request())->createFromIlluminate($request);\n        }\n\n        return $request;\n    }", "language": "php", "code": "public function getRequest()\n    {\n        $request = $this->container['request'];\n\n        if ($request instanceof IlluminateRequest && ! $request instanceof Request) {\n            $request = (new Request())->createFromIlluminate($request);\n        }\n\n        return $request;\n    }", "code_tokens": ["public", "function", "getRequest", "(", ")", "{", "$", "request", "=", "$", "this", "->", "container", "[", "'request'", "]", ";", "if", "(", "$", "request", "instanceof", "IlluminateRequest", "&&", "!", "$", "request", "instanceof", "Request", ")", "{", "$", "request", "=", "(", "new", "Request", "(", ")", ")", "->", "createFromIlluminate", "(", "$", "request", ")", ";", "}", "return", "$", "request", ";", "}"], "docstring": "Get the request from the container.\n\n@return \\Dingo\\Api\\Http\\Request", "docstring_tokens": ["Get", "the", "request", "from", "the", "container", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Transformer/Factory.php#L225-L234", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Adapter/Lumen.php", "func_name": "Lumen.normalizeRequestUri", "original_string": "protected function normalizeRequestUri(Request $request)\n    {\n        $query = $request->server->get('QUERY_STRING');\n\n        $uri = '/'.trim(str_replace('?'.$query, '', $request->server->get('REQUEST_URI')), '/').($query ? '?'.$query : '');\n\n        $request->server->set('REQUEST_URI', $uri);\n    }", "language": "php", "code": "protected function normalizeRequestUri(Request $request)\n    {\n        $query = $request->server->get('QUERY_STRING');\n\n        $uri = '/'.trim(str_replace('?'.$query, '', $request->server->get('REQUEST_URI')), '/').($query ? '?'.$query : '');\n\n        $request->server->set('REQUEST_URI', $uri);\n    }", "code_tokens": ["protected", "function", "normalizeRequestUri", "(", "Request", "$", "request", ")", "{", "$", "query", "=", "$", "request", "->", "server", "->", "get", "(", "'QUERY_STRING'", ")", ";", "$", "uri", "=", "'/'", ".", "trim", "(", "str_replace", "(", "'?'", ".", "$", "query", ",", "''", ",", "$", "request", "->", "server", "->", "get", "(", "'REQUEST_URI'", ")", ")", ",", "'/'", ")", ".", "(", "$", "query", "?", "'?'", ".", "$", "query", ":", "''", ")", ";", "$", "request", "->", "server", "->", "set", "(", "'REQUEST_URI'", ",", "$", "uri", ")", ";", "}"], "docstring": "Normalize the request URI so that Lumen can properly dispatch it.\n\n@param \\Illuminate\\Http\\Request $request\n\n@return void", "docstring_tokens": ["Normalize", "the", "request", "URI", "so", "that", "Lumen", "can", "properly", "dispatch", "it", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Adapter/Lumen.php#L148-L155", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Adapter/Lumen.php", "func_name": "Lumen.breakUriSegments", "original_string": "protected function breakUriSegments($uri)\n    {\n        if (! Str::contains($uri, '?}')) {\n            return (array) $uri;\n        }\n\n        $segments = preg_split(\n            '/\\/(\\{.*?\\})/',\n            preg_replace('/\\{(.*?)\\?\\}/', '{$1}', $uri),\n            -1,\n            PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY\n        );\n\n        $uris = [];\n\n        while ($segments) {\n            $uris[] = implode('/', $segments);\n\n            array_pop($segments);\n        }\n\n        return $uris;\n    }", "language": "php", "code": "protected function breakUriSegments($uri)\n    {\n        if (! Str::contains($uri, '?}')) {\n            return (array) $uri;\n        }\n\n        $segments = preg_split(\n            '/\\/(\\{.*?\\})/',\n            preg_replace('/\\{(.*?)\\?\\}/', '{$1}', $uri),\n            -1,\n            PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY\n        );\n\n        $uris = [];\n\n        while ($segments) {\n            $uris[] = implode('/', $segments);\n\n            array_pop($segments);\n        }\n\n        return $uris;\n    }", "code_tokens": ["protected", "function", "breakUriSegments", "(", "$", "uri", ")", "{", "if", "(", "!", "Str", "::", "contains", "(", "$", "uri", ",", "'?}'", ")", ")", "{", "return", "(", "array", ")", "$", "uri", ";", "}", "$", "segments", "=", "preg_split", "(", "'/\\/(\\{.*?\\})/'", ",", "preg_replace", "(", "'/\\{(.*?)\\?\\}/'", ",", "'{$1}'", ",", "$", "uri", ")", ",", "-", "1", ",", "PREG_SPLIT_DELIM_CAPTURE", "|", "PREG_SPLIT_NO_EMPTY", ")", ";", "$", "uris", "=", "[", "]", ";", "while", "(", "$", "segments", ")", "{", "$", "uris", "[", "]", "=", "implode", "(", "'/'", ",", "$", "segments", ")", ";", "array_pop", "(", "$", "segments", ")", ";", "}", "return", "$", "uris", ";", "}"], "docstring": "Break a URI that has optional segments into individual URIs.\n\n@param string $uri\n\n@return array", "docstring_tokens": ["Break", "a", "URI", "that", "has", "optional", "segments", "into", "individual", "URIs", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Adapter/Lumen.php#L206-L228", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Adapter/Lumen.php", "func_name": "Lumen.removeMiddlewareFromApp", "original_string": "protected function removeMiddlewareFromApp()\n    {\n        if ($this->middlewareRemoved) {\n            return;\n        }\n\n        $this->middlewareRemoved = true;\n\n        $reflection = new ReflectionClass($this->app);\n        $property = $reflection->getProperty('middleware');\n        $property->setAccessible(true);\n        $oldMiddlewares = $property->getValue($this->app);\n        $newMiddlewares = [];\n        foreach ($oldMiddlewares as $middle) {\n            if ((new ReflectionClass($middle))->hasMethod('terminate') && $middle != 'Dingo\\Api\\Http\\Middleware\\Request') {\n                $newMiddlewares = array_merge($newMiddlewares, [$middle]);\n            }\n        }\n        $property->setValue($this->app, $newMiddlewares);\n        $property->setAccessible(false);\n    }", "language": "php", "code": "protected function removeMiddlewareFromApp()\n    {\n        if ($this->middlewareRemoved) {\n            return;\n        }\n\n        $this->middlewareRemoved = true;\n\n        $reflection = new ReflectionClass($this->app);\n        $property = $reflection->getProperty('middleware');\n        $property->setAccessible(true);\n        $oldMiddlewares = $property->getValue($this->app);\n        $newMiddlewares = [];\n        foreach ($oldMiddlewares as $middle) {\n            if ((new ReflectionClass($middle))->hasMethod('terminate') && $middle != 'Dingo\\Api\\Http\\Middleware\\Request') {\n                $newMiddlewares = array_merge($newMiddlewares, [$middle]);\n            }\n        }\n        $property->setValue($this->app, $newMiddlewares);\n        $property->setAccessible(false);\n    }", "code_tokens": ["protected", "function", "removeMiddlewareFromApp", "(", ")", "{", "if", "(", "$", "this", "->", "middlewareRemoved", ")", "{", "return", ";", "}", "$", "this", "->", "middlewareRemoved", "=", "true", ";", "$", "reflection", "=", "new", "ReflectionClass", "(", "$", "this", "->", "app", ")", ";", "$", "property", "=", "$", "reflection", "->", "getProperty", "(", "'middleware'", ")", ";", "$", "property", "->", "setAccessible", "(", "true", ")", ";", "$", "oldMiddlewares", "=", "$", "property", "->", "getValue", "(", "$", "this", "->", "app", ")", ";", "$", "newMiddlewares", "=", "[", "]", ";", "foreach", "(", "$", "oldMiddlewares", "as", "$", "middle", ")", "{", "if", "(", "(", "new", "ReflectionClass", "(", "$", "middle", ")", ")", "->", "hasMethod", "(", "'terminate'", ")", "&&", "$", "middle", "!=", "'Dingo\\Api\\Http\\Middleware\\Request'", ")", "{", "$", "newMiddlewares", "=", "array_merge", "(", "$", "newMiddlewares", ",", "[", "$", "middle", "]", ")", ";", "}", "}", "$", "property", "->", "setValue", "(", "$", "this", "->", "app", ",", "$", "newMiddlewares", ")", ";", "$", "property", "->", "setAccessible", "(", "false", ")", ";", "}"], "docstring": "Remove the global application middleware as it's run from this packages\nRequest middleware. Lumen runs middleware later in its life cycle\nwhich results in some middleware being executed twice.\n\n@return void", "docstring_tokens": ["Remove", "the", "global", "application", "middleware", "as", "it", "s", "run", "from", "this", "packages", "Request", "middleware", ".", "Lumen", "runs", "middleware", "later", "in", "its", "life", "cycle", "which", "results", "in", "some", "middleware", "being", "executed", "twice", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Adapter/Lumen.php#L253-L273", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Adapter/Lumen.php", "func_name": "Lumen.getIterableRoutes", "original_string": "public function getIterableRoutes($version = null)\n    {\n        $iterable = [];\n\n        foreach ($this->getRoutes($version) as $version => $collector) {\n            $routeData = $collector->getData();\n\n            // The first element in the array are the static routes that do not have any parameters.\n            foreach ($this->normalizeStaticRoutes($routeData[0]) as $method => $routes) {\n                if ($method === 'HEAD') {\n                    continue;\n                }\n\n                foreach ($routes as $route) {\n                    $route['methods'] = $this->setRouteMethods($route, $method);\n\n                    $iterable[$version][] = $route;\n                }\n            }\n\n            // The second element is the more complicated regex routes that have parameters.\n            foreach ($routeData[1] as $method => $routes) {\n                if ($method === 'HEAD') {\n                    continue;\n                }\n\n                foreach ($routes as $data) {\n                    foreach ($data['routeMap'] as list($route, $parameters)) {\n                        $route['methods'] = $this->setRouteMethods($route, $method);\n\n                        $iterable[$version][] = $route;\n                    }\n                }\n            }\n        }\n\n        return new ArrayIterator($iterable);\n    }", "language": "php", "code": "public function getIterableRoutes($version = null)\n    {\n        $iterable = [];\n\n        foreach ($this->getRoutes($version) as $version => $collector) {\n            $routeData = $collector->getData();\n\n            // The first element in the array are the static routes that do not have any parameters.\n            foreach ($this->normalizeStaticRoutes($routeData[0]) as $method => $routes) {\n                if ($method === 'HEAD') {\n                    continue;\n                }\n\n                foreach ($routes as $route) {\n                    $route['methods'] = $this->setRouteMethods($route, $method);\n\n                    $iterable[$version][] = $route;\n                }\n            }\n\n            // The second element is the more complicated regex routes that have parameters.\n            foreach ($routeData[1] as $method => $routes) {\n                if ($method === 'HEAD') {\n                    continue;\n                }\n\n                foreach ($routes as $data) {\n                    foreach ($data['routeMap'] as list($route, $parameters)) {\n                        $route['methods'] = $this->setRouteMethods($route, $method);\n\n                        $iterable[$version][] = $route;\n                    }\n                }\n            }\n        }\n\n        return new ArrayIterator($iterable);\n    }", "code_tokens": ["public", "function", "getIterableRoutes", "(", "$", "version", "=", "null", ")", "{", "$", "iterable", "=", "[", "]", ";", "foreach", "(", "$", "this", "->", "getRoutes", "(", "$", "version", ")", "as", "$", "version", "=>", "$", "collector", ")", "{", "$", "routeData", "=", "$", "collector", "->", "getData", "(", ")", ";", "foreach", "(", "$", "this", "->", "normalizeStaticRoutes", "(", "$", "routeData", "[", "0", "]", ")", "as", "$", "method", "=>", "$", "routes", ")", "{", "if", "(", "$", "method", "===", "'HEAD'", ")", "{", "continue", ";", "}", "foreach", "(", "$", "routes", "as", "$", "route", ")", "{", "$", "route", "[", "'methods'", "]", "=", "$", "this", "->", "setRouteMethods", "(", "$", "route", ",", "$", "method", ")", ";", "$", "iterable", "[", "$", "version", "]", "[", "]", "=", "$", "route", ";", "}", "}", "foreach", "(", "$", "routeData", "[", "1", "]", "as", "$", "method", "=>", "$", "routes", ")", "{", "if", "(", "$", "method", "===", "'HEAD'", ")", "{", "continue", ";", "}", "foreach", "(", "$", "routes", "as", "$", "data", ")", "{", "foreach", "(", "$", "data", "[", "'routeMap'", "]", "as", "list", "(", "$", "route", ",", "$", "parameters", ")", ")", "{", "$", "route", "[", "'methods'", "]", "=", "$", "this", "->", "setRouteMethods", "(", "$", "route", ",", "$", "method", ")", ";", "$", "iterable", "[", "$", "version", "]", "[", "]", "=", "$", "route", ";", "}", "}", "}", "}", "return", "new", "ArrayIterator", "(", "$", "iterable", ")", ";", "}"], "docstring": "Get routes in an iterable form.\n\n@param string $version\n\n@return \\ArrayIterator", "docstring_tokens": ["Get", "routes", "in", "an", "iterable", "form", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Adapter/Lumen.php#L298-L335", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/Middleware/Request.php", "func_name": "Request.terminate", "original_string": "public function terminate($request, $response)\n    {\n        if (! ($request = $this->app['request']) instanceof HttpRequest) {\n            return;\n        }\n\n        // Laravel's route middlewares can be terminated just like application\n        // middleware, so we'll gather all the route middleware here.\n        // On Lumen this will simply be an empty array as it does\n        // not implement terminable route middleware.\n        $middlewares = $this->gatherRouteMiddlewares($request);\n\n        // Because of how middleware is executed on Lumen we'll need to merge in the\n        // application middlewares now so that we can terminate them. Laravel does\n        // not need this as it handles things a little more gracefully so it\n        // can terminate the application ones itself.\n        if (class_exists(Application::class, false)) {\n            $middlewares = array_merge($middlewares, $this->middleware);\n        }\n\n        foreach ($middlewares as $middleware) {\n            if ($middleware instanceof Closure) {\n                continue;\n            }\n\n            list($name, $parameters) = $this->parseMiddleware($middleware);\n\n            $instance = $this->app->make($name);\n\n            if (method_exists($instance, 'terminate')) {\n                $instance->terminate($request, $response);\n            }\n        }\n    }", "language": "php", "code": "public function terminate($request, $response)\n    {\n        if (! ($request = $this->app['request']) instanceof HttpRequest) {\n            return;\n        }\n\n        // Laravel's route middlewares can be terminated just like application\n        // middleware, so we'll gather all the route middleware here.\n        // On Lumen this will simply be an empty array as it does\n        // not implement terminable route middleware.\n        $middlewares = $this->gatherRouteMiddlewares($request);\n\n        // Because of how middleware is executed on Lumen we'll need to merge in the\n        // application middlewares now so that we can terminate them. Laravel does\n        // not need this as it handles things a little more gracefully so it\n        // can terminate the application ones itself.\n        if (class_exists(Application::class, false)) {\n            $middlewares = array_merge($middlewares, $this->middleware);\n        }\n\n        foreach ($middlewares as $middleware) {\n            if ($middleware instanceof Closure) {\n                continue;\n            }\n\n            list($name, $parameters) = $this->parseMiddleware($middleware);\n\n            $instance = $this->app->make($name);\n\n            if (method_exists($instance, 'terminate')) {\n                $instance->terminate($request, $response);\n            }\n        }\n    }", "code_tokens": ["public", "function", "terminate", "(", "$", "request", ",", "$", "response", ")", "{", "if", "(", "!", "(", "$", "request", "=", "$", "this", "->", "app", "[", "'request'", "]", ")", "instanceof", "HttpRequest", ")", "{", "return", ";", "}", "$", "middlewares", "=", "$", "this", "->", "gatherRouteMiddlewares", "(", "$", "request", ")", ";", "if", "(", "class_exists", "(", "Application", "::", "class", ",", "false", ")", ")", "{", "$", "middlewares", "=", "array_merge", "(", "$", "middlewares", ",", "$", "this", "->", "middleware", ")", ";", "}", "foreach", "(", "$", "middlewares", "as", "$", "middleware", ")", "{", "if", "(", "$", "middleware", "instanceof", "Closure", ")", "{", "continue", ";", "}", "list", "(", "$", "name", ",", "$", "parameters", ")", "=", "$", "this", "->", "parseMiddleware", "(", "$", "middleware", ")", ";", "$", "instance", "=", "$", "this", "->", "app", "->", "make", "(", "$", "name", ")", ";", "if", "(", "method_exists", "(", "$", "instance", ",", "'terminate'", ")", ")", "{", "$", "instance", "->", "terminate", "(", "$", "request", ",", "$", "response", ")", ";", "}", "}", "}"], "docstring": "Call the terminate method on middlewares.\n\n@return void", "docstring_tokens": ["Call", "the", "terminate", "method", "on", "middlewares", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/Middleware/Request.php#L135-L168", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Route.php", "func_name": "Route.setupRouteProperties", "original_string": "protected function setupRouteProperties(Request $request, $route)\n    {\n        list($this->uri, $this->methods, $this->action) = $this->adapter->getRouteProperties($route, $request);\n\n        $this->versions = Arr::pull($this->action, 'version');\n        $this->conditionalRequest = Arr::pull($this->action, 'conditionalRequest', true);\n        $this->middleware = (array) Arr::pull($this->action, 'middleware', []);\n        $this->throttle = Arr::pull($this->action, 'throttle');\n        $this->scopes = Arr::pull($this->action, 'scopes', []);\n        $this->authenticationProviders = Arr::pull($this->action, 'providers', []);\n        $this->rateLimit = Arr::pull($this->action, 'limit', 0);\n        $this->rateExpiration = Arr::pull($this->action, 'expires', 0);\n\n        // Now that the default route properties have been set we'll go ahead and merge\n        // any controller properties to fully configure the route.\n        $this->mergeControllerProperties();\n\n        // If we have a string based throttle then we'll new up an instance of the\n        // throttle through the container.\n        if (is_string($this->throttle)) {\n            $this->throttle = $this->container->make($this->throttle);\n        }\n    }", "language": "php", "code": "protected function setupRouteProperties(Request $request, $route)\n    {\n        list($this->uri, $this->methods, $this->action) = $this->adapter->getRouteProperties($route, $request);\n\n        $this->versions = Arr::pull($this->action, 'version');\n        $this->conditionalRequest = Arr::pull($this->action, 'conditionalRequest', true);\n        $this->middleware = (array) Arr::pull($this->action, 'middleware', []);\n        $this->throttle = Arr::pull($this->action, 'throttle');\n        $this->scopes = Arr::pull($this->action, 'scopes', []);\n        $this->authenticationProviders = Arr::pull($this->action, 'providers', []);\n        $this->rateLimit = Arr::pull($this->action, 'limit', 0);\n        $this->rateExpiration = Arr::pull($this->action, 'expires', 0);\n\n        // Now that the default route properties have been set we'll go ahead and merge\n        // any controller properties to fully configure the route.\n        $this->mergeControllerProperties();\n\n        // If we have a string based throttle then we'll new up an instance of the\n        // throttle through the container.\n        if (is_string($this->throttle)) {\n            $this->throttle = $this->container->make($this->throttle);\n        }\n    }", "code_tokens": ["protected", "function", "setupRouteProperties", "(", "Request", "$", "request", ",", "$", "route", ")", "{", "list", "(", "$", "this", "->", "uri", ",", "$", "this", "->", "methods", ",", "$", "this", "->", "action", ")", "=", "$", "this", "->", "adapter", "->", "getRouteProperties", "(", "$", "route", ",", "$", "request", ")", ";", "$", "this", "->", "versions", "=", "Arr", "::", "pull", "(", "$", "this", "->", "action", ",", "'version'", ")", ";", "$", "this", "->", "conditionalRequest", "=", "Arr", "::", "pull", "(", "$", "this", "->", "action", ",", "'conditionalRequest'", ",", "true", ")", ";", "$", "this", "->", "middleware", "=", "(", "array", ")", "Arr", "::", "pull", "(", "$", "this", "->", "action", ",", "'middleware'", ",", "[", "]", ")", ";", "$", "this", "->", "throttle", "=", "Arr", "::", "pull", "(", "$", "this", "->", "action", ",", "'throttle'", ")", ";", "$", "this", "->", "scopes", "=", "Arr", "::", "pull", "(", "$", "this", "->", "action", ",", "'scopes'", ",", "[", "]", ")", ";", "$", "this", "->", "authenticationProviders", "=", "Arr", "::", "pull", "(", "$", "this", "->", "action", ",", "'providers'", ",", "[", "]", ")", ";", "$", "this", "->", "rateLimit", "=", "Arr", "::", "pull", "(", "$", "this", "->", "action", ",", "'limit'", ",", "0", ")", ";", "$", "this", "->", "rateExpiration", "=", "Arr", "::", "pull", "(", "$", "this", "->", "action", ",", "'expires'", ",", "0", ")", ";", "$", "this", "->", "mergeControllerProperties", "(", ")", ";", "if", "(", "is_string", "(", "$", "this", "->", "throttle", ")", ")", "{", "$", "this", "->", "throttle", "=", "$", "this", "->", "container", "->", "make", "(", "$", "this", "->", "throttle", ")", ";", "}", "}"], "docstring": "Setup the route properties.\n\n@param Request $request\n@param         $route\n\n@return void", "docstring_tokens": ["Setup", "the", "route", "properties", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Route.php#L111-L133", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Route.php", "func_name": "Route.mergeControllerProperties", "original_string": "protected function mergeControllerProperties()\n    {\n        if (isset($this->action['uses']) && is_string($this->action['uses']) && Str::contains($this->action['uses'],\n                '@')) {\n            $this->action['controller'] = $this->action['uses'];\n\n            $this->makeControllerInstance();\n        }\n\n        if (! $this->controllerUsesHelpersTrait()) {\n            return;\n        }\n\n        $controller = $this->getControllerInstance();\n\n        $controllerMiddleware = [];\n\n        if (method_exists($controller, 'getMiddleware')) {\n            $controllerMiddleware = $controller->getMiddleware();\n        } elseif (method_exists($controller, 'getMiddlewareForMethod')) {\n            $controllerMiddleware = $controller->getMiddlewareForMethod($this->controllerMethod);\n        }\n\n        $this->middleware = array_merge($this->middleware, $controllerMiddleware);\n\n        if ($property = $this->findControllerPropertyOptions('throttles')) {\n            $this->throttle = $property['class'];\n        }\n\n        if ($property = $this->findControllerPropertyOptions('scopes')) {\n            $this->scopes = array_merge($this->scopes, $property['scopes']);\n        }\n\n        if ($property = $this->findControllerPropertyOptions('authenticationProviders')) {\n            $this->authenticationProviders = array_merge($this->authenticationProviders, $property['providers']);\n        }\n\n        if ($property = $this->findControllerPropertyOptions('rateLimit')) {\n            $this->rateLimit = $property['limit'];\n            $this->rateExpiration = $property['expires'];\n        }\n    }", "language": "php", "code": "protected function mergeControllerProperties()\n    {\n        if (isset($this->action['uses']) && is_string($this->action['uses']) && Str::contains($this->action['uses'],\n                '@')) {\n            $this->action['controller'] = $this->action['uses'];\n\n            $this->makeControllerInstance();\n        }\n\n        if (! $this->controllerUsesHelpersTrait()) {\n            return;\n        }\n\n        $controller = $this->getControllerInstance();\n\n        $controllerMiddleware = [];\n\n        if (method_exists($controller, 'getMiddleware')) {\n            $controllerMiddleware = $controller->getMiddleware();\n        } elseif (method_exists($controller, 'getMiddlewareForMethod')) {\n            $controllerMiddleware = $controller->getMiddlewareForMethod($this->controllerMethod);\n        }\n\n        $this->middleware = array_merge($this->middleware, $controllerMiddleware);\n\n        if ($property = $this->findControllerPropertyOptions('throttles')) {\n            $this->throttle = $property['class'];\n        }\n\n        if ($property = $this->findControllerPropertyOptions('scopes')) {\n            $this->scopes = array_merge($this->scopes, $property['scopes']);\n        }\n\n        if ($property = $this->findControllerPropertyOptions('authenticationProviders')) {\n            $this->authenticationProviders = array_merge($this->authenticationProviders, $property['providers']);\n        }\n\n        if ($property = $this->findControllerPropertyOptions('rateLimit')) {\n            $this->rateLimit = $property['limit'];\n            $this->rateExpiration = $property['expires'];\n        }\n    }", "code_tokens": ["protected", "function", "mergeControllerProperties", "(", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "action", "[", "'uses'", "]", ")", "&&", "is_string", "(", "$", "this", "->", "action", "[", "'uses'", "]", ")", "&&", "Str", "::", "contains", "(", "$", "this", "->", "action", "[", "'uses'", "]", ",", "'@'", ")", ")", "{", "$", "this", "->", "action", "[", "'controller'", "]", "=", "$", "this", "->", "action", "[", "'uses'", "]", ";", "$", "this", "->", "makeControllerInstance", "(", ")", ";", "}", "if", "(", "!", "$", "this", "->", "controllerUsesHelpersTrait", "(", ")", ")", "{", "return", ";", "}", "$", "controller", "=", "$", "this", "->", "getControllerInstance", "(", ")", ";", "$", "controllerMiddleware", "=", "[", "]", ";", "if", "(", "method_exists", "(", "$", "controller", ",", "'getMiddleware'", ")", ")", "{", "$", "controllerMiddleware", "=", "$", "controller", "->", "getMiddleware", "(", ")", ";", "}", "elseif", "(", "method_exists", "(", "$", "controller", ",", "'getMiddlewareForMethod'", ")", ")", "{", "$", "controllerMiddleware", "=", "$", "controller", "->", "getMiddlewareForMethod", "(", "$", "this", "->", "controllerMethod", ")", ";", "}", "$", "this", "->", "middleware", "=", "array_merge", "(", "$", "this", "->", "middleware", ",", "$", "controllerMiddleware", ")", ";", "if", "(", "$", "property", "=", "$", "this", "->", "findControllerPropertyOptions", "(", "'throttles'", ")", ")", "{", "$", "this", "->", "throttle", "=", "$", "property", "[", "'class'", "]", ";", "}", "if", "(", "$", "property", "=", "$", "this", "->", "findControllerPropertyOptions", "(", "'scopes'", ")", ")", "{", "$", "this", "->", "scopes", "=", "array_merge", "(", "$", "this", "->", "scopes", ",", "$", "property", "[", "'scopes'", "]", ")", ";", "}", "if", "(", "$", "property", "=", "$", "this", "->", "findControllerPropertyOptions", "(", "'authenticationProviders'", ")", ")", "{", "$", "this", "->", "authenticationProviders", "=", "array_merge", "(", "$", "this", "->", "authenticationProviders", ",", "$", "property", "[", "'providers'", "]", ")", ";", "}", "if", "(", "$", "property", "=", "$", "this", "->", "findControllerPropertyOptions", "(", "'rateLimit'", ")", ")", "{", "$", "this", "->", "rateLimit", "=", "$", "property", "[", "'limit'", "]", ";", "$", "this", "->", "rateExpiration", "=", "$", "property", "[", "'expires'", "]", ";", "}", "}"], "docstring": "Merge the controller properties onto the route properties.", "docstring_tokens": ["Merge", "the", "controller", "properties", "onto", "the", "route", "properties", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Route.php#L138-L179", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Route.php", "func_name": "Route.findControllerPropertyOptions", "original_string": "protected function findControllerPropertyOptions($name)\n    {\n        $properties = [];\n\n        foreach ($this->getControllerInstance()->{'get'.ucfirst($name)}() as $property) {\n            if (isset($property['options']) && ! $this->optionsApplyToControllerMethod($property['options'])) {\n                continue;\n            }\n\n            unset($property['options']);\n\n            $properties = array_merge_recursive($properties, $property);\n        }\n\n        return $properties;\n    }", "language": "php", "code": "protected function findControllerPropertyOptions($name)\n    {\n        $properties = [];\n\n        foreach ($this->getControllerInstance()->{'get'.ucfirst($name)}() as $property) {\n            if (isset($property['options']) && ! $this->optionsApplyToControllerMethod($property['options'])) {\n                continue;\n            }\n\n            unset($property['options']);\n\n            $properties = array_merge_recursive($properties, $property);\n        }\n\n        return $properties;\n    }", "code_tokens": ["protected", "function", "findControllerPropertyOptions", "(", "$", "name", ")", "{", "$", "properties", "=", "[", "]", ";", "foreach", "(", "$", "this", "->", "getControllerInstance", "(", ")", "->", "{", "'get'", ".", "ucfirst", "(", "$", "name", ")", "}", "(", ")", "as", "$", "property", ")", "{", "if", "(", "isset", "(", "$", "property", "[", "'options'", "]", ")", "&&", "!", "$", "this", "->", "optionsApplyToControllerMethod", "(", "$", "property", "[", "'options'", "]", ")", ")", "{", "continue", ";", "}", "unset", "(", "$", "property", "[", "'options'", "]", ")", ";", "$", "properties", "=", "array_merge_recursive", "(", "$", "properties", ",", "$", "property", ")", ";", "}", "return", "$", "properties", ";", "}"], "docstring": "Find the controller options and whether or not it will apply to this routes controller method.\n\n@param string $name\n\n@return array", "docstring_tokens": ["Find", "the", "controller", "options", "and", "whether", "or", "not", "it", "will", "apply", "to", "this", "routes", "controller", "method", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Route.php#L188-L203", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Route.php", "func_name": "Route.optionsApplyToControllerMethod", "original_string": "protected function optionsApplyToControllerMethod(array $options)\n    {\n        if (empty($options)) {\n            return true;\n        } elseif (isset($options['only']) && in_array($this->controllerMethod,\n                $this->explodeOnPipes($options['only']))) {\n            return true;\n        } elseif (isset($options['except'])) {\n            return ! in_array($this->controllerMethod, $this->explodeOnPipes($options['except']));\n        } elseif (in_array($this->controllerMethod, $this->explodeOnPipes($options))) {\n            return true;\n        }\n\n        return false;\n    }", "language": "php", "code": "protected function optionsApplyToControllerMethod(array $options)\n    {\n        if (empty($options)) {\n            return true;\n        } elseif (isset($options['only']) && in_array($this->controllerMethod,\n                $this->explodeOnPipes($options['only']))) {\n            return true;\n        } elseif (isset($options['except'])) {\n            return ! in_array($this->controllerMethod, $this->explodeOnPipes($options['except']));\n        } elseif (in_array($this->controllerMethod, $this->explodeOnPipes($options))) {\n            return true;\n        }\n\n        return false;\n    }", "code_tokens": ["protected", "function", "optionsApplyToControllerMethod", "(", "array", "$", "options", ")", "{", "if", "(", "empty", "(", "$", "options", ")", ")", "{", "return", "true", ";", "}", "elseif", "(", "isset", "(", "$", "options", "[", "'only'", "]", ")", "&&", "in_array", "(", "$", "this", "->", "controllerMethod", ",", "$", "this", "->", "explodeOnPipes", "(", "$", "options", "[", "'only'", "]", ")", ")", ")", "{", "return", "true", ";", "}", "elseif", "(", "isset", "(", "$", "options", "[", "'except'", "]", ")", ")", "{", "return", "!", "in_array", "(", "$", "this", "->", "controllerMethod", ",", "$", "this", "->", "explodeOnPipes", "(", "$", "options", "[", "'except'", "]", ")", ")", ";", "}", "elseif", "(", "in_array", "(", "$", "this", "->", "controllerMethod", ",", "$", "this", "->", "explodeOnPipes", "(", "$", "options", ")", ")", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}"], "docstring": "Determine if a controller method is in an array of options.\n\n@param array $options\n\n@return bool", "docstring_tokens": ["Determine", "if", "a", "controller", "method", "is", "in", "an", "array", "of", "options", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Route.php#L212-L226", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Route.php", "func_name": "Route.controllerUsesHelpersTrait", "original_string": "protected function controllerUsesHelpersTrait()\n    {\n        if (! $controller = $this->getControllerInstance()) {\n            return false;\n        }\n\n        $traits = [];\n\n        do {\n            $traits = array_merge(class_uses($controller, false), $traits);\n        } while ($controller = get_parent_class($controller));\n\n        foreach ($traits as $trait => $same) {\n            $traits = array_merge(class_uses($trait, false), $traits);\n        }\n\n        return isset($traits[Helpers::class]);\n    }", "language": "php", "code": "protected function controllerUsesHelpersTrait()\n    {\n        if (! $controller = $this->getControllerInstance()) {\n            return false;\n        }\n\n        $traits = [];\n\n        do {\n            $traits = array_merge(class_uses($controller, false), $traits);\n        } while ($controller = get_parent_class($controller));\n\n        foreach ($traits as $trait => $same) {\n            $traits = array_merge(class_uses($trait, false), $traits);\n        }\n\n        return isset($traits[Helpers::class]);\n    }", "code_tokens": ["protected", "function", "controllerUsesHelpersTrait", "(", ")", "{", "if", "(", "!", "$", "controller", "=", "$", "this", "->", "getControllerInstance", "(", ")", ")", "{", "return", "false", ";", "}", "$", "traits", "=", "[", "]", ";", "do", "{", "$", "traits", "=", "array_merge", "(", "class_uses", "(", "$", "controller", ",", "false", ")", ",", "$", "traits", ")", ";", "}", "while", "(", "$", "controller", "=", "get_parent_class", "(", "$", "controller", ")", ")", ";", "foreach", "(", "$", "traits", "as", "$", "trait", "=>", "$", "same", ")", "{", "$", "traits", "=", "array_merge", "(", "class_uses", "(", "$", "trait", ",", "false", ")", ",", "$", "traits", ")", ";", "}", "return", "isset", "(", "$", "traits", "[", "Helpers", "::", "class", "]", ")", ";", "}"], "docstring": "Determine if the controller instance uses the helpers trait.\n\n@return bool", "docstring_tokens": ["Determine", "if", "the", "controller", "instance", "uses", "the", "helpers", "trait", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Route.php#L245-L262", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Route.php", "func_name": "Route.makeControllerInstance", "original_string": "protected function makeControllerInstance()\n    {\n        list($this->controllerClass, $this->controllerMethod) = explode('@', $this->action['uses']);\n\n        $this->container->instance($this->controllerClass,\n            $this->controller = $this->container->make($this->controllerClass));\n\n        return $this->controller;\n    }", "language": "php", "code": "protected function makeControllerInstance()\n    {\n        list($this->controllerClass, $this->controllerMethod) = explode('@', $this->action['uses']);\n\n        $this->container->instance($this->controllerClass,\n            $this->controller = $this->container->make($this->controllerClass));\n\n        return $this->controller;\n    }", "code_tokens": ["protected", "function", "makeControllerInstance", "(", ")", "{", "list", "(", "$", "this", "->", "controllerClass", ",", "$", "this", "->", "controllerMethod", ")", "=", "explode", "(", "'@'", ",", "$", "this", "->", "action", "[", "'uses'", "]", ")", ";", "$", "this", "->", "container", "->", "instance", "(", "$", "this", "->", "controllerClass", ",", "$", "this", "->", "controller", "=", "$", "this", "->", "container", "->", "make", "(", "$", "this", "->", "controllerClass", ")", ")", ";", "return", "$", "this", "->", "controller", ";", "}"], "docstring": "Make a new controller instance through the container.\n\n@return \\Illuminate\\Routing\\Controller|\\Laravel\\Lumen\\Routing\\Controller", "docstring_tokens": ["Make", "a", "new", "controller", "instance", "through", "the", "container", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Route.php#L279-L287", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Route.php", "func_name": "Route.isProtected", "original_string": "public function isProtected()\n    {\n        if (isset($this->middleware['api.auth']) || in_array('api.auth', $this->middleware)) {\n            if ($this->controller && isset($this->middleware['api.auth'])) {\n                return $this->optionsApplyToControllerMethod($this->middleware['api.auth']);\n            }\n\n            return true;\n        }\n\n        return false;\n    }", "language": "php", "code": "public function isProtected()\n    {\n        if (isset($this->middleware['api.auth']) || in_array('api.auth', $this->middleware)) {\n            if ($this->controller && isset($this->middleware['api.auth'])) {\n                return $this->optionsApplyToControllerMethod($this->middleware['api.auth']);\n            }\n\n            return true;\n        }\n\n        return false;\n    }", "code_tokens": ["public", "function", "isProtected", "(", ")", "{", "if", "(", "isset", "(", "$", "this", "->", "middleware", "[", "'api.auth'", "]", ")", "||", "in_array", "(", "'api.auth'", ",", "$", "this", "->", "middleware", ")", ")", "{", "if", "(", "$", "this", "->", "controller", "&&", "isset", "(", "$", "this", "->", "middleware", "[", "'api.auth'", "]", ")", ")", "{", "return", "$", "this", "->", "optionsApplyToControllerMethod", "(", "$", "this", "->", "middleware", "[", "'api.auth'", "]", ")", ";", "}", "return", "true", ";", "}", "return", "false", ";", "}"], "docstring": "Determine if the route is protected.\n\n@return bool", "docstring_tokens": ["Determine", "if", "the", "route", "is", "protected", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Route.php#L294-L305", "partition": "train"}
{"repo": "dingo/api", "path": "src/Auth/Provider/JWT.php", "func_name": "JWT.getToken", "original_string": "protected function getToken(Request $request)\n    {\n        try {\n            $this->validateAuthorizationHeader($request);\n\n            $token = $this->parseAuthorizationHeader($request);\n        } catch (Exception $exception) {\n            if (! $token = $request->query('token', false)) {\n                throw $exception;\n            }\n        }\n\n        return $token;\n    }", "language": "php", "code": "protected function getToken(Request $request)\n    {\n        try {\n            $this->validateAuthorizationHeader($request);\n\n            $token = $this->parseAuthorizationHeader($request);\n        } catch (Exception $exception) {\n            if (! $token = $request->query('token', false)) {\n                throw $exception;\n            }\n        }\n\n        return $token;\n    }", "code_tokens": ["protected", "function", "getToken", "(", "Request", "$", "request", ")", "{", "try", "{", "$", "this", "->", "validateAuthorizationHeader", "(", "$", "request", ")", ";", "$", "token", "=", "$", "this", "->", "parseAuthorizationHeader", "(", "$", "request", ")", ";", "}", "catch", "(", "Exception", "$", "exception", ")", "{", "if", "(", "!", "$", "token", "=", "$", "request", "->", "query", "(", "'token'", ",", "false", ")", ")", "{", "throw", "$", "exception", ";", "}", "}", "return", "$", "token", ";", "}"], "docstring": "Get the JWT from the request.\n\n@param \\Illuminate\\Http\\Request $request\n\n@throws \\Exception\n\n@return string", "docstring_tokens": ["Get", "the", "JWT", "from", "the", "request", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Auth/Provider/JWT.php#L65-L78", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/Response/Format/JsonOptionalFormatting.php", "func_name": "JsonOptionalFormatting.isCustomIndentStyleRequired", "original_string": "protected function isCustomIndentStyleRequired()\n    {\n        return $this->isJsonPrettyPrintEnabled() &&\n            isset($this->options['indent_style']) &&\n            in_array($this->options['indent_style'], $this->indentStyles);\n    }", "language": "php", "code": "protected function isCustomIndentStyleRequired()\n    {\n        return $this->isJsonPrettyPrintEnabled() &&\n            isset($this->options['indent_style']) &&\n            in_array($this->options['indent_style'], $this->indentStyles);\n    }", "code_tokens": ["protected", "function", "isCustomIndentStyleRequired", "(", ")", "{", "return", "$", "this", "->", "isJsonPrettyPrintEnabled", "(", ")", "&&", "isset", "(", "$", "this", "->", "options", "[", "'indent_style'", "]", ")", "&&", "in_array", "(", "$", "this", "->", "options", "[", "'indent_style'", "]", ",", "$", "this", "->", "indentStyles", ")", ";", "}"], "docstring": "Determine if JSON custom indent style is set.\n\n@return bool", "docstring_tokens": ["Determine", "if", "JSON", "custom", "indent", "style", "is", "set", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/Response/Format/JsonOptionalFormatting.php#L63-L68", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/Response/Format/JsonOptionalFormatting.php", "func_name": "JsonOptionalFormatting.performJsonEncoding", "original_string": "protected function performJsonEncoding($content, array $jsonEncodeOptions = [])\n    {\n        $jsonEncodeOptions = $this->filterJsonEncodeOptions($jsonEncodeOptions);\n\n        $optionsBitmask = $this->calucateJsonEncodeOptionsBitmask($jsonEncodeOptions);\n\n        if (($encodedString = json_encode($content, $optionsBitmask)) === false) {\n            throw new \\ErrorException('Error encoding data in JSON format: '.json_last_error());\n        }\n\n        return $encodedString;\n    }", "language": "php", "code": "protected function performJsonEncoding($content, array $jsonEncodeOptions = [])\n    {\n        $jsonEncodeOptions = $this->filterJsonEncodeOptions($jsonEncodeOptions);\n\n        $optionsBitmask = $this->calucateJsonEncodeOptionsBitmask($jsonEncodeOptions);\n\n        if (($encodedString = json_encode($content, $optionsBitmask)) === false) {\n            throw new \\ErrorException('Error encoding data in JSON format: '.json_last_error());\n        }\n\n        return $encodedString;\n    }", "code_tokens": ["protected", "function", "performJsonEncoding", "(", "$", "content", ",", "array", "$", "jsonEncodeOptions", "=", "[", "]", ")", "{", "$", "jsonEncodeOptions", "=", "$", "this", "->", "filterJsonEncodeOptions", "(", "$", "jsonEncodeOptions", ")", ";", "$", "optionsBitmask", "=", "$", "this", "->", "calucateJsonEncodeOptionsBitmask", "(", "$", "jsonEncodeOptions", ")", ";", "if", "(", "(", "$", "encodedString", "=", "json_encode", "(", "$", "content", ",", "$", "optionsBitmask", ")", ")", "===", "false", ")", "{", "throw", "new", "\\", "ErrorException", "(", "'Error encoding data in JSON format: '", ".", "json_last_error", "(", ")", ")", ";", "}", "return", "$", "encodedString", ";", "}"], "docstring": "Perform JSON encode.\n\n@param string $content\n@param array  $jsonEncodeOptions\n\n@return string", "docstring_tokens": ["Perform", "JSON", "encode", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/Response/Format/JsonOptionalFormatting.php#L78-L89", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/Response/Format/JsonOptionalFormatting.php", "func_name": "JsonOptionalFormatting.indentPrettyPrintedJson", "original_string": "protected function indentPrettyPrintedJson($jsonString, $indentStyle, $defaultIndentSize = 2)\n    {\n        $indentChar = $this->getIndentCharForIndentStyle($indentStyle);\n        $indentSize = $this->getPrettyPrintIndentSize() ?: $defaultIndentSize;\n\n        // If the given indentation style is allowed to have various indent size\n        // (number of chars, that are used to indent one level in each line),\n        // indent the JSON string with given (or default) indent size.\n        if ($this->hasVariousIndentSize($indentStyle)) {\n            return $this->peformIndentation($jsonString, $indentChar, $indentSize);\n        }\n\n        // Otherwise following the convention, that indent styles, that does not\n        // allowed to have various indent size (e.g. tab) are indented using\n        // one tabulation character per one indent level in each line.\n        return $this->peformIndentation($jsonString, $indentChar);\n    }", "language": "php", "code": "protected function indentPrettyPrintedJson($jsonString, $indentStyle, $defaultIndentSize = 2)\n    {\n        $indentChar = $this->getIndentCharForIndentStyle($indentStyle);\n        $indentSize = $this->getPrettyPrintIndentSize() ?: $defaultIndentSize;\n\n        // If the given indentation style is allowed to have various indent size\n        // (number of chars, that are used to indent one level in each line),\n        // indent the JSON string with given (or default) indent size.\n        if ($this->hasVariousIndentSize($indentStyle)) {\n            return $this->peformIndentation($jsonString, $indentChar, $indentSize);\n        }\n\n        // Otherwise following the convention, that indent styles, that does not\n        // allowed to have various indent size (e.g. tab) are indented using\n        // one tabulation character per one indent level in each line.\n        return $this->peformIndentation($jsonString, $indentChar);\n    }", "code_tokens": ["protected", "function", "indentPrettyPrintedJson", "(", "$", "jsonString", ",", "$", "indentStyle", ",", "$", "defaultIndentSize", "=", "2", ")", "{", "$", "indentChar", "=", "$", "this", "->", "getIndentCharForIndentStyle", "(", "$", "indentStyle", ")", ";", "$", "indentSize", "=", "$", "this", "->", "getPrettyPrintIndentSize", "(", ")", "?", ":", "$", "defaultIndentSize", ";", "if", "(", "$", "this", "->", "hasVariousIndentSize", "(", "$", "indentStyle", ")", ")", "{", "return", "$", "this", "->", "peformIndentation", "(", "$", "jsonString", ",", "$", "indentChar", ",", "$", "indentSize", ")", ";", "}", "return", "$", "this", "->", "peformIndentation", "(", "$", "jsonString", ",", "$", "indentChar", ")", ";", "}"], "docstring": "Indent pretty printed JSON string, using given indent style.\n\n@param string $jsonString\n@param string $indentStyle\n@param int    $defaultIndentSize\n\n@return string", "docstring_tokens": ["Indent", "pretty", "printed", "JSON", "string", "using", "given", "indent", "style", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/Response/Format/JsonOptionalFormatting.php#L124-L140", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/Response/Format/JsonOptionalFormatting.php", "func_name": "JsonOptionalFormatting.peformIndentation", "original_string": "protected function peformIndentation($jsonString, $indentChar = \"\\t\", $indentSize = 1, $defaultSpaces = 4)\n    {\n        $pattern = '/(^|\\G) {'.$defaultSpaces.'}/m';\n        $replacement = str_repeat($indentChar, $indentSize).'$1';\n\n        return preg_replace($pattern, $replacement, $jsonString);\n    }", "language": "php", "code": "protected function peformIndentation($jsonString, $indentChar = \"\\t\", $indentSize = 1, $defaultSpaces = 4)\n    {\n        $pattern = '/(^|\\G) {'.$defaultSpaces.'}/m';\n        $replacement = str_repeat($indentChar, $indentSize).'$1';\n\n        return preg_replace($pattern, $replacement, $jsonString);\n    }", "code_tokens": ["protected", "function", "peformIndentation", "(", "$", "jsonString", ",", "$", "indentChar", "=", "\"\\t\"", ",", "$", "indentSize", "=", "1", ",", "$", "defaultSpaces", "=", "4", ")", "{", "$", "pattern", "=", "'/(^|\\G) {'", ".", "$", "defaultSpaces", ".", "'}/m'", ";", "$", "replacement", "=", "str_repeat", "(", "$", "indentChar", ",", "$", "indentSize", ")", ".", "'$1'", ";", "return", "preg_replace", "(", "$", "pattern", ",", "$", "replacement", ",", "$", "jsonString", ")", ";", "}"], "docstring": "Perform indentation for pretty printed JSON string with a given\nindent char, repeated N times, as determined by indent size.\n\n@param string $jsonString    JSON string, which must be indented\n@param string $indentChar    Char, used for indent (default is tab)\n@param int    $indentSize    Number of times to repeat indent char per one indent level\n@param int    $defaultSpaces Default number of indent spaces after json_encode()\n\n@return string", "docstring_tokens": ["Perform", "indentation", "for", "pretty", "printed", "JSON", "string", "with", "a", "given", "indent", "char", "repeated", "N", "times", "as", "determined", "by", "indent", "size", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/Response/Format/JsonOptionalFormatting.php#L189-L195", "partition": "train"}
{"repo": "dingo/api", "path": "src/Provider/ServiceProvider.php", "func_name": "ServiceProvider.config", "original_string": "protected function config($item, $instantiate = true)\n    {\n        $value = $this->app['config']->get('api.'.$item);\n\n        if (is_array($value)) {\n            return $instantiate ? $this->instantiateConfigValues($item, $value) : $value;\n        }\n\n        return $instantiate ? $this->instantiateConfigValue($item, $value) : $value;\n    }", "language": "php", "code": "protected function config($item, $instantiate = true)\n    {\n        $value = $this->app['config']->get('api.'.$item);\n\n        if (is_array($value)) {\n            return $instantiate ? $this->instantiateConfigValues($item, $value) : $value;\n        }\n\n        return $instantiate ? $this->instantiateConfigValue($item, $value) : $value;\n    }", "code_tokens": ["protected", "function", "config", "(", "$", "item", ",", "$", "instantiate", "=", "true", ")", "{", "$", "value", "=", "$", "this", "->", "app", "[", "'config'", "]", "->", "get", "(", "'api.'", ".", "$", "item", ")", ";", "if", "(", "is_array", "(", "$", "value", ")", ")", "{", "return", "$", "instantiate", "?", "$", "this", "->", "instantiateConfigValues", "(", "$", "item", ",", "$", "value", ")", ":", "$", "value", ";", "}", "return", "$", "instantiate", "?", "$", "this", "->", "instantiateConfigValue", "(", "$", "item", ",", "$", "value", ")", ":", "$", "value", ";", "}"], "docstring": "Retrieve and instantiate a config value if it exists and is a class.\n\n@param string $item\n@param bool   $instantiate\n\n@return mixed", "docstring_tokens": ["Retrieve", "and", "instantiate", "a", "config", "value", "if", "it", "exists", "and", "is", "a", "class", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Provider/ServiceProvider.php#L26-L35", "partition": "train"}
{"repo": "dingo/api", "path": "src/Provider/ServiceProvider.php", "func_name": "ServiceProvider.instantiateConfigValues", "original_string": "protected function instantiateConfigValues($item, array $values)\n    {\n        foreach ($values as $key => $value) {\n            $values[$key] = $this->instantiateConfigValue($item, $value);\n        }\n\n        return $values;\n    }", "language": "php", "code": "protected function instantiateConfigValues($item, array $values)\n    {\n        foreach ($values as $key => $value) {\n            $values[$key] = $this->instantiateConfigValue($item, $value);\n        }\n\n        return $values;\n    }", "code_tokens": ["protected", "function", "instantiateConfigValues", "(", "$", "item", ",", "array", "$", "values", ")", "{", "foreach", "(", "$", "values", "as", "$", "key", "=>", "$", "value", ")", "{", "$", "values", "[", "$", "key", "]", "=", "$", "this", "->", "instantiateConfigValue", "(", "$", "item", ",", "$", "value", ")", ";", "}", "return", "$", "values", ";", "}"], "docstring": "Instantiate an array of instantiable configuration values.\n\n@param string $item\n@param array  $values\n\n@return array", "docstring_tokens": ["Instantiate", "an", "array", "of", "instantiable", "configuration", "values", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Provider/ServiceProvider.php#L45-L52", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/Validation/Accept.php", "func_name": "Accept.validate", "original_string": "public function validate(Request $request)\n    {\n        try {\n            $this->accept->parse($request, $this->strict);\n        } catch (BadRequestHttpException $exception) {\n            if ($request->getMethod() === 'OPTIONS') {\n                return true;\n            }\n\n            throw $exception;\n        }\n    }", "language": "php", "code": "public function validate(Request $request)\n    {\n        try {\n            $this->accept->parse($request, $this->strict);\n        } catch (BadRequestHttpException $exception) {\n            if ($request->getMethod() === 'OPTIONS') {\n                return true;\n            }\n\n            throw $exception;\n        }\n    }", "code_tokens": ["public", "function", "validate", "(", "Request", "$", "request", ")", "{", "try", "{", "$", "this", "->", "accept", "->", "parse", "(", "$", "request", ",", "$", "this", "->", "strict", ")", ";", "}", "catch", "(", "BadRequestHttpException", "$", "exception", ")", "{", "if", "(", "$", "request", "->", "getMethod", "(", ")", "===", "'OPTIONS'", ")", "{", "return", "true", ";", "}", "throw", "$", "exception", ";", "}", "}"], "docstring": "Validate the accept header on the request. If this fails it will throw\nan HTTP exception that will be caught by the middleware. This\nvalidator should always be run last and must not return\na success boolean.\n\n@param \\Illuminate\\Http\\Request $request\n\n@throws \\Exception|\\Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException\n\n@return bool", "docstring_tokens": ["Validate", "the", "accept", "header", "on", "the", "request", ".", "If", "this", "fails", "it", "will", "throw", "an", "HTTP", "exception", "that", "will", "be", "caught", "by", "the", "middleware", ".", "This", "validator", "should", "always", "be", "run", "last", "and", "must", "not", "return", "a", "success", "boolean", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/Validation/Accept.php#L52-L63", "partition": "train"}
{"repo": "dingo/api", "path": "src/Provider/LaravelServiceProvider.php", "func_name": "LaravelServiceProvider.updateRouterBindings", "original_string": "protected function updateRouterBindings()\n    {\n        foreach ($this->getRouterBindings() as $key => $binding) {\n            $this->app['api.router.adapter']->getRouter()->bind($key, $binding);\n        }\n    }", "language": "php", "code": "protected function updateRouterBindings()\n    {\n        foreach ($this->getRouterBindings() as $key => $binding) {\n            $this->app['api.router.adapter']->getRouter()->bind($key, $binding);\n        }\n    }", "code_tokens": ["protected", "function", "updateRouterBindings", "(", ")", "{", "foreach", "(", "$", "this", "->", "getRouterBindings", "(", ")", "as", "$", "key", "=>", "$", "binding", ")", "{", "$", "this", "->", "app", "[", "'api.router.adapter'", "]", "->", "getRouter", "(", ")", "->", "bind", "(", "$", "key", ",", "$", "binding", ")", ";", "}", "}"], "docstring": "Grab the bindings from the Laravel router and set them on the adapters\nrouter.\n\n@return void", "docstring_tokens": ["Grab", "the", "bindings", "from", "the", "Laravel", "router", "and", "set", "them", "on", "the", "adapters", "router", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Provider/LaravelServiceProvider.php#L75-L80", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Router.php", "func_name": "Router.version", "original_string": "public function version($version, $second, $third = null)\n    {\n        if (func_num_args() == 2) {\n            list($version, $callback, $attributes) = array_merge(func_get_args(), [[]]);\n        } else {\n            list($version, $attributes, $callback) = func_get_args();\n        }\n\n        $attributes = array_merge($attributes, ['version' => $version]);\n\n        $this->group($attributes, $callback);\n    }", "language": "php", "code": "public function version($version, $second, $third = null)\n    {\n        if (func_num_args() == 2) {\n            list($version, $callback, $attributes) = array_merge(func_get_args(), [[]]);\n        } else {\n            list($version, $attributes, $callback) = func_get_args();\n        }\n\n        $attributes = array_merge($attributes, ['version' => $version]);\n\n        $this->group($attributes, $callback);\n    }", "code_tokens": ["public", "function", "version", "(", "$", "version", ",", "$", "second", ",", "$", "third", "=", "null", ")", "{", "if", "(", "func_num_args", "(", ")", "==", "2", ")", "{", "list", "(", "$", "version", ",", "$", "callback", ",", "$", "attributes", ")", "=", "array_merge", "(", "func_get_args", "(", ")", ",", "[", "[", "]", "]", ")", ";", "}", "else", "{", "list", "(", "$", "version", ",", "$", "attributes", ",", "$", "callback", ")", "=", "func_get_args", "(", ")", ";", "}", "$", "attributes", "=", "array_merge", "(", "$", "attributes", ",", "[", "'version'", "=>", "$", "version", "]", ")", ";", "$", "this", "->", "group", "(", "$", "attributes", ",", "$", "callback", ")", ";", "}"], "docstring": "An alias for calling the group method, allows a more fluent API\nfor registering a new API version group with optional\nattributes and a required callback.\n\nThis method can be called without the third parameter, however,\nthe callback should always be the last parameter.\n\n@param array|string   $version\n@param array|callable $second\n@param callable       $third\n\n@return void", "docstring_tokens": ["An", "alias", "for", "calling", "the", "group", "method", "allows", "a", "more", "fluent", "API", "for", "registering", "a", "new", "API", "version", "group", "with", "optional", "attributes", "and", "a", "required", "callback", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Router.php#L128-L139", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Router.php", "func_name": "Router.resource", "original_string": "public function resource($name, $controller, array $options = [])\n    {\n        if ($this->container->bound(ResourceRegistrar::class)) {\n            $registrar = $this->container->make(ResourceRegistrar::class);\n        } else {\n            $registrar = new ResourceRegistrar($this);\n        }\n\n        $registrar->register($name, $controller, $options);\n    }", "language": "php", "code": "public function resource($name, $controller, array $options = [])\n    {\n        if ($this->container->bound(ResourceRegistrar::class)) {\n            $registrar = $this->container->make(ResourceRegistrar::class);\n        } else {\n            $registrar = new ResourceRegistrar($this);\n        }\n\n        $registrar->register($name, $controller, $options);\n    }", "code_tokens": ["public", "function", "resource", "(", "$", "name", ",", "$", "controller", ",", "array", "$", "options", "=", "[", "]", ")", "{", "if", "(", "$", "this", "->", "container", "->", "bound", "(", "ResourceRegistrar", "::", "class", ")", ")", "{", "$", "registrar", "=", "$", "this", "->", "container", "->", "make", "(", "ResourceRegistrar", "::", "class", ")", ";", "}", "else", "{", "$", "registrar", "=", "new", "ResourceRegistrar", "(", "$", "this", ")", ";", "}", "$", "registrar", "->", "register", "(", "$", "name", ",", "$", "controller", ",", "$", "options", ")", ";", "}"], "docstring": "Register a resource controller.\n\n@param string $name\n@param string $controller\n@param array  $options\n\n@return void", "docstring_tokens": ["Register", "a", "resource", "controller", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Router.php#L314-L323", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Router.php", "func_name": "Router.mergeLastGroupAttributes", "original_string": "protected function mergeLastGroupAttributes(array $attributes)\n    {\n        if (empty($this->groupStack)) {\n            return $this->mergeGroup($attributes, []);\n        }\n\n        return $this->mergeGroup($attributes, end($this->groupStack));\n    }", "language": "php", "code": "protected function mergeLastGroupAttributes(array $attributes)\n    {\n        if (empty($this->groupStack)) {\n            return $this->mergeGroup($attributes, []);\n        }\n\n        return $this->mergeGroup($attributes, end($this->groupStack));\n    }", "code_tokens": ["protected", "function", "mergeLastGroupAttributes", "(", "array", "$", "attributes", ")", "{", "if", "(", "empty", "(", "$", "this", "->", "groupStack", ")", ")", "{", "return", "$", "this", "->", "mergeGroup", "(", "$", "attributes", ",", "[", "]", ")", ";", "}", "return", "$", "this", "->", "mergeGroup", "(", "$", "attributes", ",", "end", "(", "$", "this", "->", "groupStack", ")", ")", ";", "}"], "docstring": "Merge the last groups attributes.\n\n@param array $attributes\n\n@return array", "docstring_tokens": ["Merge", "the", "last", "groups", "attributes", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Router.php#L380-L387", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Router.php", "func_name": "Router.dispatch", "original_string": "public function dispatch(Request $request)\n    {\n        $this->currentRoute = null;\n\n        $this->container->instance(Request::class, $request);\n\n        $this->routesDispatched++;\n\n        try {\n            $response = $this->adapter->dispatch($request, $request->version());\n        } catch (Exception $exception) {\n            if ($request instanceof InternalRequest) {\n                throw $exception;\n            }\n\n            $this->exception->report($exception);\n\n            $response = $this->exception->handle($exception);\n        }\n\n        return $this->prepareResponse($response, $request, $request->format());\n    }", "language": "php", "code": "public function dispatch(Request $request)\n    {\n        $this->currentRoute = null;\n\n        $this->container->instance(Request::class, $request);\n\n        $this->routesDispatched++;\n\n        try {\n            $response = $this->adapter->dispatch($request, $request->version());\n        } catch (Exception $exception) {\n            if ($request instanceof InternalRequest) {\n                throw $exception;\n            }\n\n            $this->exception->report($exception);\n\n            $response = $this->exception->handle($exception);\n        }\n\n        return $this->prepareResponse($response, $request, $request->format());\n    }", "code_tokens": ["public", "function", "dispatch", "(", "Request", "$", "request", ")", "{", "$", "this", "->", "currentRoute", "=", "null", ";", "$", "this", "->", "container", "->", "instance", "(", "Request", "::", "class", ",", "$", "request", ")", ";", "$", "this", "->", "routesDispatched", "++", ";", "try", "{", "$", "response", "=", "$", "this", "->", "adapter", "->", "dispatch", "(", "$", "request", ",", "$", "request", "->", "version", "(", ")", ")", ";", "}", "catch", "(", "Exception", "$", "exception", ")", "{", "if", "(", "$", "request", "instanceof", "InternalRequest", ")", "{", "throw", "$", "exception", ";", "}", "$", "this", "->", "exception", "->", "report", "(", "$", "exception", ")", ";", "$", "response", "=", "$", "this", "->", "exception", "->", "handle", "(", "$", "exception", ")", ";", "}", "return", "$", "this", "->", "prepareResponse", "(", "$", "response", ",", "$", "request", ",", "$", "request", "->", "format", "(", ")", ")", ";", "}"], "docstring": "Dispatch a request via the adapter.\n\n@param \\Dingo\\Api\\Http\\Request $request\n\n@throws \\Exception\n\n@return \\Dingo\\Api\\Http\\Response", "docstring_tokens": ["Dispatch", "a", "request", "via", "the", "adapter", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Router.php#L505-L526", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Router.php", "func_name": "Router.createRoute", "original_string": "public function createRoute($route)\n    {\n        return new Route($this->adapter, $this->container, $this->container['request'], $route);\n    }", "language": "php", "code": "public function createRoute($route)\n    {\n        return new Route($this->adapter, $this->container, $this->container['request'], $route);\n    }", "code_tokens": ["public", "function", "createRoute", "(", "$", "route", ")", "{", "return", "new", "Route", "(", "$", "this", "->", "adapter", ",", "$", "this", "->", "container", ",", "$", "this", "->", "container", "[", "'request'", "]", ",", "$", "route", ")", ";", "}"], "docstring": "Create a new route instance from an adapter route.\n\n@param array|\\Illuminate\\Routing\\Route $route\n\n@return \\Dingo\\Api\\Routing\\Route", "docstring_tokens": ["Create", "a", "new", "route", "instance", "from", "an", "adapter", "route", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Router.php#L658-L661", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Router.php", "func_name": "Router.getRoutes", "original_string": "public function getRoutes($version = null)\n    {\n        $routes = $this->adapter->getIterableRoutes($version);\n\n        if (! is_null($version)) {\n            $routes = [$version => $routes];\n        }\n\n        $collections = [];\n\n        foreach ($routes as $key => $value) {\n            $collections[$key] = new RouteCollection($this->container['request']);\n\n            foreach ($value as $route) {\n                $route = $this->createRoute($route);\n\n                $collections[$key]->add($route);\n            }\n        }\n\n        return is_null($version) ? $collections : $collections[$version];\n    }", "language": "php", "code": "public function getRoutes($version = null)\n    {\n        $routes = $this->adapter->getIterableRoutes($version);\n\n        if (! is_null($version)) {\n            $routes = [$version => $routes];\n        }\n\n        $collections = [];\n\n        foreach ($routes as $key => $value) {\n            $collections[$key] = new RouteCollection($this->container['request']);\n\n            foreach ($value as $route) {\n                $route = $this->createRoute($route);\n\n                $collections[$key]->add($route);\n            }\n        }\n\n        return is_null($version) ? $collections : $collections[$version];\n    }", "code_tokens": ["public", "function", "getRoutes", "(", "$", "version", "=", "null", ")", "{", "$", "routes", "=", "$", "this", "->", "adapter", "->", "getIterableRoutes", "(", "$", "version", ")", ";", "if", "(", "!", "is_null", "(", "$", "version", ")", ")", "{", "$", "routes", "=", "[", "$", "version", "=>", "$", "routes", "]", ";", "}", "$", "collections", "=", "[", "]", ";", "foreach", "(", "$", "routes", "as", "$", "key", "=>", "$", "value", ")", "{", "$", "collections", "[", "$", "key", "]", "=", "new", "RouteCollection", "(", "$", "this", "->", "container", "[", "'request'", "]", ")", ";", "foreach", "(", "$", "value", "as", "$", "route", ")", "{", "$", "route", "=", "$", "this", "->", "createRoute", "(", "$", "route", ")", ";", "$", "collections", "[", "$", "key", "]", "->", "add", "(", "$", "route", ")", ";", "}", "}", "return", "is_null", "(", "$", "version", ")", "?", "$", "collections", ":", "$", "collections", "[", "$", "version", "]", ";", "}"], "docstring": "Get all routes registered on the adapter.\n\n@param string $version\n\n@return mixed", "docstring_tokens": ["Get", "all", "routes", "registered", "on", "the", "adapter", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Router.php#L708-L729", "partition": "train"}
{"repo": "dingo/api", "path": "src/Routing/Router.php", "func_name": "Router.setAdapterRoutes", "original_string": "public function setAdapterRoutes(array $routes)\n    {\n        $this->adapter->setRoutes($routes);\n\n        $this->container->instance('api.routes', $this->getRoutes());\n    }", "language": "php", "code": "public function setAdapterRoutes(array $routes)\n    {\n        $this->adapter->setRoutes($routes);\n\n        $this->container->instance('api.routes', $this->getRoutes());\n    }", "code_tokens": ["public", "function", "setAdapterRoutes", "(", "array", "$", "routes", ")", "{", "$", "this", "->", "adapter", "->", "setRoutes", "(", "$", "routes", ")", ";", "$", "this", "->", "container", "->", "instance", "(", "'api.routes'", ",", "$", "this", "->", "getRoutes", "(", ")", ")", ";", "}"], "docstring": "Set the raw adapter routes.\n\n@param array $routes\n\n@return void", "docstring_tokens": ["Set", "the", "raw", "adapter", "routes", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Routing/Router.php#L748-L753", "partition": "train"}
{"repo": "dingo/api", "path": "src/Auth/Auth.php", "func_name": "Auth.filterProviders", "original_string": "protected function filterProviders(array $providers)\n    {\n        if (empty($providers)) {\n            return $this->providers;\n        }\n\n        return array_intersect_key($this->providers, array_flip($providers));\n    }", "language": "php", "code": "protected function filterProviders(array $providers)\n    {\n        if (empty($providers)) {\n            return $this->providers;\n        }\n\n        return array_intersect_key($this->providers, array_flip($providers));\n    }", "code_tokens": ["protected", "function", "filterProviders", "(", "array", "$", "providers", ")", "{", "if", "(", "empty", "(", "$", "providers", ")", ")", "{", "return", "$", "this", "->", "providers", ";", "}", "return", "array_intersect_key", "(", "$", "this", "->", "providers", ",", "array_flip", "(", "$", "providers", ")", ")", ";", "}"], "docstring": "Filter the requested providers from the available providers.\n\n@param array $providers\n\n@return array", "docstring_tokens": ["Filter", "the", "requested", "providers", "from", "the", "available", "providers", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Auth/Auth.php#L126-L133", "partition": "train"}
{"repo": "dingo/api", "path": "src/Auth/Auth.php", "func_name": "Auth.extend", "original_string": "public function extend($key, $provider)\n    {\n        if (is_callable($provider)) {\n            $provider = call_user_func($provider, $this->container);\n        }\n\n        $this->providers[$key] = $provider;\n    }", "language": "php", "code": "public function extend($key, $provider)\n    {\n        if (is_callable($provider)) {\n            $provider = call_user_func($provider, $this->container);\n        }\n\n        $this->providers[$key] = $provider;\n    }", "code_tokens": ["public", "function", "extend", "(", "$", "key", ",", "$", "provider", ")", "{", "if", "(", "is_callable", "(", "$", "provider", ")", ")", "{", "$", "provider", "=", "call_user_func", "(", "$", "provider", ",", "$", "this", "->", "container", ")", ";", "}", "$", "this", "->", "providers", "[", "$", "key", "]", "=", "$", "provider", ";", "}"], "docstring": "Extend the authentication layer with a custom provider.\n\n@param string          $key\n@param object|callable $provider\n\n@return void", "docstring_tokens": ["Extend", "the", "authentication", "layer", "with", "a", "custom", "provider", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Auth/Auth.php#L213-L220", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/Middleware/RateLimit.php", "func_name": "RateLimit.handle", "original_string": "public function handle($request, Closure $next)\n    {\n        if ($request instanceof InternalRequest) {\n            return $next($request);\n        }\n\n        $route = $this->router->getCurrentRoute();\n\n        if ($route->hasThrottle()) {\n            $this->handler->setThrottle($route->getThrottle());\n        }\n\n        $this->handler->rateLimitRequest($request, $route->getRateLimit(), $route->getRateLimitExpiration());\n\n        if ($this->handler->exceededRateLimit()) {\n            throw new RateLimitExceededException('You have exceeded your rate limit.', null, $this->getHeaders());\n        }\n\n        $response = $next($request);\n\n        if ($this->handler->requestWasRateLimited()) {\n            return $this->responseWithHeaders($response);\n        }\n\n        return $response;\n    }", "language": "php", "code": "public function handle($request, Closure $next)\n    {\n        if ($request instanceof InternalRequest) {\n            return $next($request);\n        }\n\n        $route = $this->router->getCurrentRoute();\n\n        if ($route->hasThrottle()) {\n            $this->handler->setThrottle($route->getThrottle());\n        }\n\n        $this->handler->rateLimitRequest($request, $route->getRateLimit(), $route->getRateLimitExpiration());\n\n        if ($this->handler->exceededRateLimit()) {\n            throw new RateLimitExceededException('You have exceeded your rate limit.', null, $this->getHeaders());\n        }\n\n        $response = $next($request);\n\n        if ($this->handler->requestWasRateLimited()) {\n            return $this->responseWithHeaders($response);\n        }\n\n        return $response;\n    }", "code_tokens": ["public", "function", "handle", "(", "$", "request", ",", "Closure", "$", "next", ")", "{", "if", "(", "$", "request", "instanceof", "InternalRequest", ")", "{", "return", "$", "next", "(", "$", "request", ")", ";", "}", "$", "route", "=", "$", "this", "->", "router", "->", "getCurrentRoute", "(", ")", ";", "if", "(", "$", "route", "->", "hasThrottle", "(", ")", ")", "{", "$", "this", "->", "handler", "->", "setThrottle", "(", "$", "route", "->", "getThrottle", "(", ")", ")", ";", "}", "$", "this", "->", "handler", "->", "rateLimitRequest", "(", "$", "request", ",", "$", "route", "->", "getRateLimit", "(", ")", ",", "$", "route", "->", "getRateLimitExpiration", "(", ")", ")", ";", "if", "(", "$", "this", "->", "handler", "->", "exceededRateLimit", "(", ")", ")", "{", "throw", "new", "RateLimitExceededException", "(", "'You have exceeded your rate limit.'", ",", "null", ",", "$", "this", "->", "getHeaders", "(", ")", ")", ";", "}", "$", "response", "=", "$", "next", "(", "$", "request", ")", ";", "if", "(", "$", "this", "->", "handler", "->", "requestWasRateLimited", "(", ")", ")", "{", "return", "$", "this", "->", "responseWithHeaders", "(", "$", "response", ")", ";", "}", "return", "$", "response", ";", "}"], "docstring": "Perform rate limiting before a request is executed.\n\n@param \\Dingo\\Api\\Http\\Request $request\n@param \\Closure                $next\n\n@throws \\Symfony\\Component\\HttpKernel\\Exception\\HttpException\n\n@return mixed", "docstring_tokens": ["Perform", "rate", "limiting", "before", "a", "request", "is", "executed", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/Middleware/RateLimit.php#L52-L77", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/Middleware/RateLimit.php", "func_name": "RateLimit.responseWithHeaders", "original_string": "protected function responseWithHeaders($response)\n    {\n        foreach ($this->getHeaders() as $key => $value) {\n            $response->headers->set($key, $value);\n        }\n\n        return $response;\n    }", "language": "php", "code": "protected function responseWithHeaders($response)\n    {\n        foreach ($this->getHeaders() as $key => $value) {\n            $response->headers->set($key, $value);\n        }\n\n        return $response;\n    }", "code_tokens": ["protected", "function", "responseWithHeaders", "(", "$", "response", ")", "{", "foreach", "(", "$", "this", "->", "getHeaders", "(", ")", "as", "$", "key", "=>", "$", "value", ")", "{", "$", "response", "->", "headers", "->", "set", "(", "$", "key", ",", "$", "value", ")", ";", "}", "return", "$", "response", ";", "}"], "docstring": "Send the response with the rate limit headers.\n\n@param \\Dingo\\Api\\Http\\Response $response\n\n@return \\Dingo\\Api\\Http\\Response", "docstring_tokens": ["Send", "the", "response", "with", "the", "rate", "limit", "headers", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/Middleware/RateLimit.php#L86-L93", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/Middleware/RateLimit.php", "func_name": "RateLimit.getHeaders", "original_string": "protected function getHeaders()\n    {\n        return [\n            'X-RateLimit-Limit' => $this->handler->getThrottleLimit(),\n            'X-RateLimit-Remaining' => $this->handler->getRemainingLimit(),\n            'X-RateLimit-Reset' => $this->handler->getRateLimitReset(),\n        ];\n    }", "language": "php", "code": "protected function getHeaders()\n    {\n        return [\n            'X-RateLimit-Limit' => $this->handler->getThrottleLimit(),\n            'X-RateLimit-Remaining' => $this->handler->getRemainingLimit(),\n            'X-RateLimit-Reset' => $this->handler->getRateLimitReset(),\n        ];\n    }", "code_tokens": ["protected", "function", "getHeaders", "(", ")", "{", "return", "[", "'X-RateLimit-Limit'", "=>", "$", "this", "->", "handler", "->", "getThrottleLimit", "(", ")", ",", "'X-RateLimit-Remaining'", "=>", "$", "this", "->", "handler", "->", "getRemainingLimit", "(", ")", ",", "'X-RateLimit-Reset'", "=>", "$", "this", "->", "handler", "->", "getRateLimitReset", "(", ")", ",", "]", ";", "}"], "docstring": "Get the headers for the response.\n\n@return array", "docstring_tokens": ["Get", "the", "headers", "for", "the", "response", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/Middleware/RateLimit.php#L100-L107", "partition": "train"}
{"repo": "dingo/api", "path": "src/Console/Command/Docs.php", "func_name": "Docs.getDocName", "original_string": "protected function getDocName()\n    {\n        $name = $this->option('name') ?: $this->name;\n\n        if (! $name) {\n            $this->comment('A name for the documentation was not supplied. Use the --name option or set a default in the configuration.');\n\n            exit;\n        }\n\n        return $name;\n    }", "language": "php", "code": "protected function getDocName()\n    {\n        $name = $this->option('name') ?: $this->name;\n\n        if (! $name) {\n            $this->comment('A name for the documentation was not supplied. Use the --name option or set a default in the configuration.');\n\n            exit;\n        }\n\n        return $name;\n    }", "code_tokens": ["protected", "function", "getDocName", "(", ")", "{", "$", "name", "=", "$", "this", "->", "option", "(", "'name'", ")", "?", ":", "$", "this", "->", "name", ";", "if", "(", "!", "$", "name", ")", "{", "$", "this", "->", "comment", "(", "'A name for the documentation was not supplied. Use the --name option or set a default in the configuration.'", ")", ";", "exit", ";", "}", "return", "$", "name", ";", "}"], "docstring": "Get the documentation name.\n\n@return string", "docstring_tokens": ["Get", "the", "documentation", "name", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Console/Command/Docs.php#L120-L131", "partition": "train"}
{"repo": "dingo/api", "path": "src/Console/Command/Docs.php", "func_name": "Docs.getVersion", "original_string": "protected function getVersion()\n    {\n        $version = $this->option('use-version') ?: $this->version;\n\n        if (! $version) {\n            $this->comment('A version for the documentation was not supplied. Use the --use-version option or set a default in the configuration.');\n\n            exit;\n        }\n\n        return $version;\n    }", "language": "php", "code": "protected function getVersion()\n    {\n        $version = $this->option('use-version') ?: $this->version;\n\n        if (! $version) {\n            $this->comment('A version for the documentation was not supplied. Use the --use-version option or set a default in the configuration.');\n\n            exit;\n        }\n\n        return $version;\n    }", "code_tokens": ["protected", "function", "getVersion", "(", ")", "{", "$", "version", "=", "$", "this", "->", "option", "(", "'use-version'", ")", "?", ":", "$", "this", "->", "version", ";", "if", "(", "!", "$", "version", ")", "{", "$", "this", "->", "comment", "(", "'A version for the documentation was not supplied. Use the --use-version option or set a default in the configuration.'", ")", ";", "exit", ";", "}", "return", "$", "version", ";", "}"], "docstring": "Get the documentation version.\n\n@return string", "docstring_tokens": ["Get", "the", "documentation", "version", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Console/Command/Docs.php#L148-L159", "partition": "train"}
{"repo": "dingo/api", "path": "src/Console/Command/Docs.php", "func_name": "Docs.getControllers", "original_string": "protected function getControllers()\n    {\n        $controllers = new Collection;\n\n        if ($controller = $this->option('use-controller')) {\n            $this->addControllerIfNotExists($controllers, app($controller));\n\n            return $controllers;\n        }\n\n        foreach ($this->router->getRoutes() as $collections) {\n            foreach ($collections as $route) {\n                if ($controller = $route->getControllerInstance()) {\n                    $this->addControllerIfNotExists($controllers, $controller);\n                }\n            }\n        }\n\n        return $controllers;\n    }", "language": "php", "code": "protected function getControllers()\n    {\n        $controllers = new Collection;\n\n        if ($controller = $this->option('use-controller')) {\n            $this->addControllerIfNotExists($controllers, app($controller));\n\n            return $controllers;\n        }\n\n        foreach ($this->router->getRoutes() as $collections) {\n            foreach ($collections as $route) {\n                if ($controller = $route->getControllerInstance()) {\n                    $this->addControllerIfNotExists($controllers, $controller);\n                }\n            }\n        }\n\n        return $controllers;\n    }", "code_tokens": ["protected", "function", "getControllers", "(", ")", "{", "$", "controllers", "=", "new", "Collection", ";", "if", "(", "$", "controller", "=", "$", "this", "->", "option", "(", "'use-controller'", ")", ")", "{", "$", "this", "->", "addControllerIfNotExists", "(", "$", "controllers", ",", "app", "(", "$", "controller", ")", ")", ";", "return", "$", "controllers", ";", "}", "foreach", "(", "$", "this", "->", "router", "->", "getRoutes", "(", ")", "as", "$", "collections", ")", "{", "foreach", "(", "$", "collections", "as", "$", "route", ")", "{", "if", "(", "$", "controller", "=", "$", "route", "->", "getControllerInstance", "(", ")", ")", "{", "$", "this", "->", "addControllerIfNotExists", "(", "$", "controllers", ",", "$", "controller", ")", ";", "}", "}", "}", "return", "$", "controllers", ";", "}"], "docstring": "Get all the controller instances.\n\n@return array", "docstring_tokens": ["Get", "all", "the", "controller", "instances", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Console/Command/Docs.php#L166-L185", "partition": "train"}
{"repo": "dingo/api", "path": "src/Console/Command/Docs.php", "func_name": "Docs.addControllerIfNotExists", "original_string": "protected function addControllerIfNotExists(Collection $controllers, $controller)\n    {\n        $class = get_class($controller);\n\n        if ($controllers->has($class)) {\n            return;\n        }\n\n        $reflection = new ReflectionClass($controller);\n\n        $interface = Arr::first($reflection->getInterfaces(), function ($key, $value) {\n            return ends_with($key, 'Docs');\n        });\n\n        if ($interface) {\n            $controller = $interface;\n        }\n\n        $controllers->put($class, $controller);\n    }", "language": "php", "code": "protected function addControllerIfNotExists(Collection $controllers, $controller)\n    {\n        $class = get_class($controller);\n\n        if ($controllers->has($class)) {\n            return;\n        }\n\n        $reflection = new ReflectionClass($controller);\n\n        $interface = Arr::first($reflection->getInterfaces(), function ($key, $value) {\n            return ends_with($key, 'Docs');\n        });\n\n        if ($interface) {\n            $controller = $interface;\n        }\n\n        $controllers->put($class, $controller);\n    }", "code_tokens": ["protected", "function", "addControllerIfNotExists", "(", "Collection", "$", "controllers", ",", "$", "controller", ")", "{", "$", "class", "=", "get_class", "(", "$", "controller", ")", ";", "if", "(", "$", "controllers", "->", "has", "(", "$", "class", ")", ")", "{", "return", ";", "}", "$", "reflection", "=", "new", "ReflectionClass", "(", "$", "controller", ")", ";", "$", "interface", "=", "Arr", "::", "first", "(", "$", "reflection", "->", "getInterfaces", "(", ")", ",", "function", "(", "$", "key", ",", "$", "value", ")", "{", "return", "ends_with", "(", "$", "key", ",", "'Docs'", ")", ";", "}", ")", ";", "if", "(", "$", "interface", ")", "{", "$", "controller", "=", "$", "interface", ";", "}", "$", "controllers", "->", "put", "(", "$", "class", ",", "$", "controller", ")", ";", "}"], "docstring": "Add a controller to the collection if it does not exist. If the\ncontroller implements an interface suffixed with \"Docs\" it\nwill be used instead of the controller.\n\n@param \\Illuminate\\Support\\Collection $controllers\n@param object                         $controller\n\n@return void", "docstring_tokens": ["Add", "a", "controller", "to", "the", "collection", "if", "it", "does", "not", "exist", ".", "If", "the", "controller", "implements", "an", "interface", "suffixed", "with", "Docs", "it", "will", "be", "used", "instead", "of", "the", "controller", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Console/Command/Docs.php#L197-L216", "partition": "train"}
{"repo": "dingo/api", "path": "src/Dispatcher.php", "func_name": "Dispatcher.attach", "original_string": "public function attach(array $files)\n    {\n        foreach ($files as $key => $file) {\n            if (is_array($file)) {\n                $file = new UploadedFile($file['path'], basename($file['path']), $file['mime'], $file['size']);\n            } elseif (is_string($file)) {\n                $finfo = finfo_open(FILEINFO_MIME_TYPE);\n\n                $file = new UploadedFile($file, basename($file), finfo_file($finfo, $file), $this->files->size($file));\n            } elseif (! $file instanceof UploadedFile) {\n                continue;\n            }\n\n            $this->uploads[$key] = $file;\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function attach(array $files)\n    {\n        foreach ($files as $key => $file) {\n            if (is_array($file)) {\n                $file = new UploadedFile($file['path'], basename($file['path']), $file['mime'], $file['size']);\n            } elseif (is_string($file)) {\n                $finfo = finfo_open(FILEINFO_MIME_TYPE);\n\n                $file = new UploadedFile($file, basename($file), finfo_file($finfo, $file), $this->files->size($file));\n            } elseif (! $file instanceof UploadedFile) {\n                continue;\n            }\n\n            $this->uploads[$key] = $file;\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "attach", "(", "array", "$", "files", ")", "{", "foreach", "(", "$", "files", "as", "$", "key", "=>", "$", "file", ")", "{", "if", "(", "is_array", "(", "$", "file", ")", ")", "{", "$", "file", "=", "new", "UploadedFile", "(", "$", "file", "[", "'path'", "]", ",", "basename", "(", "$", "file", "[", "'path'", "]", ")", ",", "$", "file", "[", "'mime'", "]", ",", "$", "file", "[", "'size'", "]", ")", ";", "}", "elseif", "(", "is_string", "(", "$", "file", ")", ")", "{", "$", "finfo", "=", "finfo_open", "(", "FILEINFO_MIME_TYPE", ")", ";", "$", "file", "=", "new", "UploadedFile", "(", "$", "file", ",", "basename", "(", "$", "file", ")", ",", "finfo_file", "(", "$", "finfo", ",", "$", "file", ")", ",", "$", "this", "->", "files", "->", "size", "(", "$", "file", ")", ")", ";", "}", "elseif", "(", "!", "$", "file", "instanceof", "UploadedFile", ")", "{", "continue", ";", "}", "$", "this", "->", "uploads", "[", "$", "key", "]", "=", "$", "file", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Attach files to be uploaded.\n\n@param array $files\n\n@return \\Dingo\\Api\\Dispatcher", "docstring_tokens": ["Attach", "files", "to", "be", "uploaded", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Dispatcher.php#L202-L219", "partition": "train"}
{"repo": "dingo/api", "path": "src/Dispatcher.php", "func_name": "Dispatcher.json", "original_string": "public function json($content)\n    {\n        if (is_array($content)) {\n            $content = json_encode($content);\n        }\n\n        $this->content = $content;\n\n        return $this->header('Content-Type', 'application/json');\n    }", "language": "php", "code": "public function json($content)\n    {\n        if (is_array($content)) {\n            $content = json_encode($content);\n        }\n\n        $this->content = $content;\n\n        return $this->header('Content-Type', 'application/json');\n    }", "code_tokens": ["public", "function", "json", "(", "$", "content", ")", "{", "if", "(", "is_array", "(", "$", "content", ")", ")", "{", "$", "content", "=", "json_encode", "(", "$", "content", ")", ";", "}", "$", "this", "->", "content", "=", "$", "content", ";", "return", "$", "this", "->", "header", "(", "'Content-Type'", ",", "'application/json'", ")", ";", "}"], "docstring": "Send a JSON payload in the request body.\n\n@param string|array $content\n\n@return \\Dingo\\Api\\Dispatcher", "docstring_tokens": ["Send", "a", "JSON", "payload", "in", "the", "request", "body", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Dispatcher.php#L242-L251", "partition": "train"}
{"repo": "dingo/api", "path": "src/Dispatcher.php", "func_name": "Dispatcher.with", "original_string": "public function with($parameters)\n    {\n        $this->parameters = array_merge($this->parameters, is_array($parameters) ? $parameters : func_get_args());\n\n        return $this;\n    }", "language": "php", "code": "public function with($parameters)\n    {\n        $this->parameters = array_merge($this->parameters, is_array($parameters) ? $parameters : func_get_args());\n\n        return $this;\n    }", "code_tokens": ["public", "function", "with", "(", "$", "parameters", ")", "{", "$", "this", "->", "parameters", "=", "array_merge", "(", "$", "this", "->", "parameters", ",", "is_array", "(", "$", "parameters", ")", "?", "$", "parameters", ":", "func_get_args", "(", ")", ")", ";", "return", "$", "this", ";", "}"], "docstring": "Set the parameters to be sent on the next API request.\n\n@param string|array $parameters\n\n@return \\Dingo\\Api\\Dispatcher", "docstring_tokens": ["Set", "the", "parameters", "to", "be", "sent", "on", "the", "next", "API", "request", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Dispatcher.php#L312-L317", "partition": "train"}
{"repo": "dingo/api", "path": "src/Dispatcher.php", "func_name": "Dispatcher.queueRequest", "original_string": "protected function queueRequest($verb, $uri, $parameters, $content = '')\n    {\n        if (! empty($content)) {\n            $this->content = $content;\n        }\n\n        // Sometimes after setting the initial request another request might be made prior to\n        // internally dispatching an API request. We need to capture this request as well\n        // and add it to the request stack as it has become the new parent request to\n        // this internal request. This will generally occur during tests when\n        // using the crawler to navigate pages that also make internal\n        // requests.\n        if (end($this->requestStack) != $this->container['request']) {\n            $this->requestStack[] = $this->container['request'];\n        }\n\n        $this->requestStack[] = $request = $this->createRequest($verb, $uri, $parameters);\n\n        return $this->dispatch($request);\n    }", "language": "php", "code": "protected function queueRequest($verb, $uri, $parameters, $content = '')\n    {\n        if (! empty($content)) {\n            $this->content = $content;\n        }\n\n        // Sometimes after setting the initial request another request might be made prior to\n        // internally dispatching an API request. We need to capture this request as well\n        // and add it to the request stack as it has become the new parent request to\n        // this internal request. This will generally occur during tests when\n        // using the crawler to navigate pages that also make internal\n        // requests.\n        if (end($this->requestStack) != $this->container['request']) {\n            $this->requestStack[] = $this->container['request'];\n        }\n\n        $this->requestStack[] = $request = $this->createRequest($verb, $uri, $parameters);\n\n        return $this->dispatch($request);\n    }", "code_tokens": ["protected", "function", "queueRequest", "(", "$", "verb", ",", "$", "uri", ",", "$", "parameters", ",", "$", "content", "=", "''", ")", "{", "if", "(", "!", "empty", "(", "$", "content", ")", ")", "{", "$", "this", "->", "content", "=", "$", "content", ";", "}", "if", "(", "end", "(", "$", "this", "->", "requestStack", ")", "!=", "$", "this", "->", "container", "[", "'request'", "]", ")", "{", "$", "this", "->", "requestStack", "[", "]", "=", "$", "this", "->", "container", "[", "'request'", "]", ";", "}", "$", "this", "->", "requestStack", "[", "]", "=", "$", "request", "=", "$", "this", "->", "createRequest", "(", "$", "verb", ",", "$", "uri", ",", "$", "parameters", ")", ";", "return", "$", "this", "->", "dispatch", "(", "$", "request", ")", ";", "}"], "docstring": "Queue up and dispatch a new request.\n\n@param string       $verb\n@param string       $uri\n@param string|array $parameters\n@param string       $content\n\n@return mixed", "docstring_tokens": ["Queue", "up", "and", "dispatch", "a", "new", "request", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Dispatcher.php#L427-L446", "partition": "train"}
{"repo": "dingo/api", "path": "src/Dispatcher.php", "func_name": "Dispatcher.dispatch", "original_string": "protected function dispatch(InternalRequest $request)\n    {\n        $this->routeStack[] = $this->router->getCurrentRoute();\n\n        $this->clearCachedFacadeInstance();\n\n        try {\n            $this->container->instance('request', $request);\n\n            $response = $this->router->dispatch($request);\n\n            if (! $response->isSuccessful() && ! $response->isRedirection()) {\n                throw new InternalHttpException($response);\n            }\n\n            if (! $this->raw) {\n                $response = $response->getOriginalContent();\n            }\n        } catch (HttpExceptionInterface $exception) {\n            $this->refreshRequestStack();\n\n            throw $exception;\n        }\n\n        $this->refreshRequestStack();\n\n        return $response;\n    }", "language": "php", "code": "protected function dispatch(InternalRequest $request)\n    {\n        $this->routeStack[] = $this->router->getCurrentRoute();\n\n        $this->clearCachedFacadeInstance();\n\n        try {\n            $this->container->instance('request', $request);\n\n            $response = $this->router->dispatch($request);\n\n            if (! $response->isSuccessful() && ! $response->isRedirection()) {\n                throw new InternalHttpException($response);\n            }\n\n            if (! $this->raw) {\n                $response = $response->getOriginalContent();\n            }\n        } catch (HttpExceptionInterface $exception) {\n            $this->refreshRequestStack();\n\n            throw $exception;\n        }\n\n        $this->refreshRequestStack();\n\n        return $response;\n    }", "code_tokens": ["protected", "function", "dispatch", "(", "InternalRequest", "$", "request", ")", "{", "$", "this", "->", "routeStack", "[", "]", "=", "$", "this", "->", "router", "->", "getCurrentRoute", "(", ")", ";", "$", "this", "->", "clearCachedFacadeInstance", "(", ")", ";", "try", "{", "$", "this", "->", "container", "->", "instance", "(", "'request'", ",", "$", "request", ")", ";", "$", "response", "=", "$", "this", "->", "router", "->", "dispatch", "(", "$", "request", ")", ";", "if", "(", "!", "$", "response", "->", "isSuccessful", "(", ")", "&&", "!", "$", "response", "->", "isRedirection", "(", ")", ")", "{", "throw", "new", "InternalHttpException", "(", "$", "response", ")", ";", "}", "if", "(", "!", "$", "this", "->", "raw", ")", "{", "$", "response", "=", "$", "response", "->", "getOriginalContent", "(", ")", ";", "}", "}", "catch", "(", "HttpExceptionInterface", "$", "exception", ")", "{", "$", "this", "->", "refreshRequestStack", "(", ")", ";", "throw", "$", "exception", ";", "}", "$", "this", "->", "refreshRequestStack", "(", ")", ";", "return", "$", "response", ";", "}"], "docstring": "Attempt to dispatch an internal request.\n\n@param \\Dingo\\Api\\Http\\InternalRequest $request\n\n@throws \\Exception|\\Symfony\\Component\\HttpKernel\\Exception\\HttpExceptionInterface\n\n@return mixed", "docstring_tokens": ["Attempt", "to", "dispatch", "an", "internal", "request", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Dispatcher.php#L532-L559", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/Response/Format/Json.php", "func_name": "Json.formatEloquentModel", "original_string": "public function formatEloquentModel($model)\n    {\n        $key = Str::singular($model->getTable());\n\n        if (! $model::$snakeAttributes) {\n            $key = Str::camel($key);\n        }\n\n        return $this->encode([$key => $model->toArray()]);\n    }", "language": "php", "code": "public function formatEloquentModel($model)\n    {\n        $key = Str::singular($model->getTable());\n\n        if (! $model::$snakeAttributes) {\n            $key = Str::camel($key);\n        }\n\n        return $this->encode([$key => $model->toArray()]);\n    }", "code_tokens": ["public", "function", "formatEloquentModel", "(", "$", "model", ")", "{", "$", "key", "=", "Str", "::", "singular", "(", "$", "model", "->", "getTable", "(", ")", ")", ";", "if", "(", "!", "$", "model", "::", "$", "snakeAttributes", ")", "{", "$", "key", "=", "Str", "::", "camel", "(", "$", "key", ")", ";", "}", "return", "$", "this", "->", "encode", "(", "[", "$", "key", "=>", "$", "model", "->", "toArray", "(", ")", "]", ")", ";", "}"], "docstring": "Format an Eloquent model.\n\n@param \\Illuminate\\Database\\Eloquent\\Model $model\n\n@return string", "docstring_tokens": ["Format", "an", "Eloquent", "model", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/Response/Format/Json.php#L24-L33", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/Response/Format/Json.php", "func_name": "Json.formatEloquentCollection", "original_string": "public function formatEloquentCollection($collection)\n    {\n        if ($collection->isEmpty()) {\n            return $this->encode([]);\n        }\n\n        $model = $collection->first();\n        $key = Str::plural($model->getTable());\n\n        if (! $model::$snakeAttributes) {\n            $key = Str::camel($key);\n        }\n\n        return $this->encode([$key => $collection->toArray()]);\n    }", "language": "php", "code": "public function formatEloquentCollection($collection)\n    {\n        if ($collection->isEmpty()) {\n            return $this->encode([]);\n        }\n\n        $model = $collection->first();\n        $key = Str::plural($model->getTable());\n\n        if (! $model::$snakeAttributes) {\n            $key = Str::camel($key);\n        }\n\n        return $this->encode([$key => $collection->toArray()]);\n    }", "code_tokens": ["public", "function", "formatEloquentCollection", "(", "$", "collection", ")", "{", "if", "(", "$", "collection", "->", "isEmpty", "(", ")", ")", "{", "return", "$", "this", "->", "encode", "(", "[", "]", ")", ";", "}", "$", "model", "=", "$", "collection", "->", "first", "(", ")", ";", "$", "key", "=", "Str", "::", "plural", "(", "$", "model", "->", "getTable", "(", ")", ")", ";", "if", "(", "!", "$", "model", "::", "$", "snakeAttributes", ")", "{", "$", "key", "=", "Str", "::", "camel", "(", "$", "key", ")", ";", "}", "return", "$", "this", "->", "encode", "(", "[", "$", "key", "=>", "$", "collection", "->", "toArray", "(", ")", "]", ")", ";", "}"], "docstring": "Format an Eloquent collection.\n\n@param \\Illuminate\\Database\\Eloquent\\Collection $collection\n\n@return string", "docstring_tokens": ["Format", "an", "Eloquent", "collection", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/Response/Format/Json.php#L42-L56", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/Response/Format/Json.php", "func_name": "Json.encode", "original_string": "protected function encode($content)\n    {\n        $jsonEncodeOptions = [];\n\n        // Here is a place, where any available JSON encoding options, that\n        // deal with users' requirements to JSON response formatting and\n        // structure, can be conveniently applied to tweak the output.\n\n        if ($this->isJsonPrettyPrintEnabled()) {\n            $jsonEncodeOptions[] = JSON_PRETTY_PRINT;\n        }\n\n        $encodedString = $this->performJsonEncoding($content, $jsonEncodeOptions);\n\n        if ($this->isCustomIndentStyleRequired()) {\n            $encodedString = $this->indentPrettyPrintedJson(\n                $encodedString,\n                $this->options['indent_style']\n            );\n        }\n\n        return $encodedString;\n    }", "language": "php", "code": "protected function encode($content)\n    {\n        $jsonEncodeOptions = [];\n\n        // Here is a place, where any available JSON encoding options, that\n        // deal with users' requirements to JSON response formatting and\n        // structure, can be conveniently applied to tweak the output.\n\n        if ($this->isJsonPrettyPrintEnabled()) {\n            $jsonEncodeOptions[] = JSON_PRETTY_PRINT;\n        }\n\n        $encodedString = $this->performJsonEncoding($content, $jsonEncodeOptions);\n\n        if ($this->isCustomIndentStyleRequired()) {\n            $encodedString = $this->indentPrettyPrintedJson(\n                $encodedString,\n                $this->options['indent_style']\n            );\n        }\n\n        return $encodedString;\n    }", "code_tokens": ["protected", "function", "encode", "(", "$", "content", ")", "{", "$", "jsonEncodeOptions", "=", "[", "]", ";", "if", "(", "$", "this", "->", "isJsonPrettyPrintEnabled", "(", ")", ")", "{", "$", "jsonEncodeOptions", "[", "]", "=", "JSON_PRETTY_PRINT", ";", "}", "$", "encodedString", "=", "$", "this", "->", "performJsonEncoding", "(", "$", "content", ",", "$", "jsonEncodeOptions", ")", ";", "if", "(", "$", "this", "->", "isCustomIndentStyleRequired", "(", ")", ")", "{", "$", "encodedString", "=", "$", "this", "->", "indentPrettyPrintedJson", "(", "$", "encodedString", ",", "$", "this", "->", "options", "[", "'indent_style'", "]", ")", ";", "}", "return", "$", "encodedString", ";", "}"], "docstring": "Encode the content to its JSON representation.\n\n@param mixed $content\n\n@return string", "docstring_tokens": ["Encode", "the", "content", "to", "its", "JSON", "representation", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/Response/Format/Json.php#L105-L127", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/RateLimit/Handler.php", "func_name": "Handler.rateLimitRequest", "original_string": "public function rateLimitRequest(Request $request, $limit = 0, $expires = 0)\n    {\n        $this->request = $request;\n\n        // If the throttle instance is already set then we'll just carry on as\n        // per usual.\n        if ($this->throttle instanceof Throttle) {\n\n            // If the developer specified a certain amount of requests or expiration\n        // time on a specific route then we'll always use the route specific\n        // throttle with the given values.\n        } elseif ($limit > 0 || $expires > 0) {\n            $this->throttle = new Route(['limit' => $limit, 'expires' => $expires]);\n            $this->keyPrefix = sha1($request->path());\n\n        // Otherwise we'll use the throttle that gives the consumer the largest\n        // amount of requests. If no matching throttle is found then rate\n        // limiting will not be imposed for the request.\n        } else {\n            $this->throttle = $this->getMatchingThrottles()->sort(function ($a, $b) {\n                return $a->getLimit() < $b->getLimit();\n            })->first();\n        }\n\n        if (is_null($this->throttle)) {\n            return;\n        }\n\n        if ($this->throttle instanceof HasRateLimiter) {\n            $this->setRateLimiter([$this->throttle, 'getRateLimiter']);\n        }\n\n        $this->prepareCacheStore();\n\n        $this->cache('requests', 0, $this->throttle->getExpires());\n        $this->cache('expires', $this->throttle->getExpires(), $this->throttle->getExpires());\n        $this->cache('reset', time() + ($this->throttle->getExpires() * 60), $this->throttle->getExpires());\n        $this->increment('requests');\n    }", "language": "php", "code": "public function rateLimitRequest(Request $request, $limit = 0, $expires = 0)\n    {\n        $this->request = $request;\n\n        // If the throttle instance is already set then we'll just carry on as\n        // per usual.\n        if ($this->throttle instanceof Throttle) {\n\n            // If the developer specified a certain amount of requests or expiration\n        // time on a specific route then we'll always use the route specific\n        // throttle with the given values.\n        } elseif ($limit > 0 || $expires > 0) {\n            $this->throttle = new Route(['limit' => $limit, 'expires' => $expires]);\n            $this->keyPrefix = sha1($request->path());\n\n        // Otherwise we'll use the throttle that gives the consumer the largest\n        // amount of requests. If no matching throttle is found then rate\n        // limiting will not be imposed for the request.\n        } else {\n            $this->throttle = $this->getMatchingThrottles()->sort(function ($a, $b) {\n                return $a->getLimit() < $b->getLimit();\n            })->first();\n        }\n\n        if (is_null($this->throttle)) {\n            return;\n        }\n\n        if ($this->throttle instanceof HasRateLimiter) {\n            $this->setRateLimiter([$this->throttle, 'getRateLimiter']);\n        }\n\n        $this->prepareCacheStore();\n\n        $this->cache('requests', 0, $this->throttle->getExpires());\n        $this->cache('expires', $this->throttle->getExpires(), $this->throttle->getExpires());\n        $this->cache('reset', time() + ($this->throttle->getExpires() * 60), $this->throttle->getExpires());\n        $this->increment('requests');\n    }", "code_tokens": ["public", "function", "rateLimitRequest", "(", "Request", "$", "request", ",", "$", "limit", "=", "0", ",", "$", "expires", "=", "0", ")", "{", "$", "this", "->", "request", "=", "$", "request", ";", "if", "(", "$", "this", "->", "throttle", "instanceof", "Throttle", ")", "{", "}", "elseif", "(", "$", "limit", ">", "0", "||", "$", "expires", ">", "0", ")", "{", "$", "this", "->", "throttle", "=", "new", "Route", "(", "[", "'limit'", "=>", "$", "limit", ",", "'expires'", "=>", "$", "expires", "]", ")", ";", "$", "this", "->", "keyPrefix", "=", "sha1", "(", "$", "request", "->", "path", "(", ")", ")", ";", "}", "else", "{", "$", "this", "->", "throttle", "=", "$", "this", "->", "getMatchingThrottles", "(", ")", "->", "sort", "(", "function", "(", "$", "a", ",", "$", "b", ")", "{", "return", "$", "a", "->", "getLimit", "(", ")", "<", "$", "b", "->", "getLimit", "(", ")", ";", "}", ")", "->", "first", "(", ")", ";", "}", "if", "(", "is_null", "(", "$", "this", "->", "throttle", ")", ")", "{", "return", ";", "}", "if", "(", "$", "this", "->", "throttle", "instanceof", "HasRateLimiter", ")", "{", "$", "this", "->", "setRateLimiter", "(", "[", "$", "this", "->", "throttle", ",", "'getRateLimiter'", "]", ")", ";", "}", "$", "this", "->", "prepareCacheStore", "(", ")", ";", "$", "this", "->", "cache", "(", "'requests'", ",", "0", ",", "$", "this", "->", "throttle", "->", "getExpires", "(", ")", ")", ";", "$", "this", "->", "cache", "(", "'expires'", ",", "$", "this", "->", "throttle", "->", "getExpires", "(", ")", ",", "$", "this", "->", "throttle", "->", "getExpires", "(", ")", ")", ";", "$", "this", "->", "cache", "(", "'reset'", ",", "time", "(", ")", "+", "(", "$", "this", "->", "throttle", "->", "getExpires", "(", ")", "*", "60", ")", ",", "$", "this", "->", "throttle", "->", "getExpires", "(", ")", ")", ";", "$", "this", "->", "increment", "(", "'requests'", ")", ";", "}"], "docstring": "Execute the rate limiting for the given request.\n\n@param \\Dingo\\Api\\Http\\Request $request\n@param int                     $limit\n@param int                     $expires\n\n@return void", "docstring_tokens": ["Execute", "the", "rate", "limiting", "for", "the", "given", "request", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/RateLimit/Handler.php#L90-L128", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/RateLimit/Handler.php", "func_name": "Handler.prepareCacheStore", "original_string": "protected function prepareCacheStore()\n    {\n        if ($this->retrieve('expires') != $this->throttle->getExpires()) {\n            $this->forget('requests');\n            $this->forget('expires');\n            $this->forget('reset');\n        }\n    }", "language": "php", "code": "protected function prepareCacheStore()\n    {\n        if ($this->retrieve('expires') != $this->throttle->getExpires()) {\n            $this->forget('requests');\n            $this->forget('expires');\n            $this->forget('reset');\n        }\n    }", "code_tokens": ["protected", "function", "prepareCacheStore", "(", ")", "{", "if", "(", "$", "this", "->", "retrieve", "(", "'expires'", ")", "!=", "$", "this", "->", "throttle", "->", "getExpires", "(", ")", ")", "{", "$", "this", "->", "forget", "(", "'requests'", ")", ";", "$", "this", "->", "forget", "(", "'expires'", ")", ";", "$", "this", "->", "forget", "(", "'reset'", ")", ";", "}", "}"], "docstring": "Prepare the cache store.\n\n@return void", "docstring_tokens": ["Prepare", "the", "cache", "store", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/RateLimit/Handler.php#L135-L142", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/RateLimit/Handler.php", "func_name": "Handler.cache", "original_string": "protected function cache($key, $value, $minutes)\n    {\n        $this->cache->add($this->key($key), $value, Carbon::now()->addMinutes($minutes));\n    }", "language": "php", "code": "protected function cache($key, $value, $minutes)\n    {\n        $this->cache->add($this->key($key), $value, Carbon::now()->addMinutes($minutes));\n    }", "code_tokens": ["protected", "function", "cache", "(", "$", "key", ",", "$", "value", ",", "$", "minutes", ")", "{", "$", "this", "->", "cache", "->", "add", "(", "$", "this", "->", "key", "(", "$", "key", ")", ",", "$", "value", ",", "Carbon", "::", "now", "(", ")", "->", "addMinutes", "(", "$", "minutes", ")", ")", ";", "}"], "docstring": "Cache a value under a given key for a certain amount of minutes.\n\n@param string $key\n@param mixed  $value\n@param int    $minutes\n\n@return void", "docstring_tokens": ["Cache", "a", "value", "under", "a", "given", "key", "for", "a", "certain", "amount", "of", "minutes", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/RateLimit/Handler.php#L187-L190", "partition": "train"}
{"repo": "dingo/api", "path": "src/Http/RateLimit/Handler.php", "func_name": "Handler.extend", "original_string": "public function extend($throttle)\n    {\n        if (is_callable($throttle)) {\n            $throttle = call_user_func($throttle, $this->container);\n        }\n\n        $this->throttles->push($throttle);\n    }", "language": "php", "code": "public function extend($throttle)\n    {\n        if (is_callable($throttle)) {\n            $throttle = call_user_func($throttle, $this->container);\n        }\n\n        $this->throttles->push($throttle);\n    }", "code_tokens": ["public", "function", "extend", "(", "$", "throttle", ")", "{", "if", "(", "is_callable", "(", "$", "throttle", ")", ")", "{", "$", "throttle", "=", "call_user_func", "(", "$", "throttle", ",", "$", "this", "->", "container", ")", ";", "}", "$", "this", "->", "throttles", "->", "push", "(", "$", "throttle", ")", ";", "}"], "docstring": "Extend the rate limiter by adding a new throttle.\n\n@param callable|\\Dingo\\Api\\Http\\RateLimit\\Throttle $throttle\n\n@return void", "docstring_tokens": ["Extend", "the", "rate", "limiter", "by", "adding", "a", "new", "throttle", "."], "sha": "8f97fadae800202e618e0c3f678b4aab78e1dc05", "url": "https://github.com/dingo/api/blob/8f97fadae800202e618e0c3f678b4aab78e1dc05/src/Http/RateLimit/Handler.php#L327-L334", "partition": "train"}
{"repo": "roots/bedrock", "path": "web/app/mu-plugins/bedrock-autoloader.php", "func_name": "Autoloader.loadPlugins", "original_string": "public function loadPlugins()\n    {\n        $this->checkCache();\n        $this->validatePlugins();\n        $this->countPlugins();\n\n        array_map(static function () {\n            include_once WPMU_PLUGIN_DIR . '/' . func_get_args()[0];\n        }, array_keys(self::$cache['plugins']));\n\n        $this->pluginHooks();\n    }", "language": "php", "code": "public function loadPlugins()\n    {\n        $this->checkCache();\n        $this->validatePlugins();\n        $this->countPlugins();\n\n        array_map(static function () {\n            include_once WPMU_PLUGIN_DIR . '/' . func_get_args()[0];\n        }, array_keys(self::$cache['plugins']));\n\n        $this->pluginHooks();\n    }", "code_tokens": ["public", "function", "loadPlugins", "(", ")", "{", "$", "this", "->", "checkCache", "(", ")", ";", "$", "this", "->", "validatePlugins", "(", ")", ";", "$", "this", "->", "countPlugins", "(", ")", ";", "array_map", "(", "static", "function", "(", ")", "{", "include_once", "WPMU_PLUGIN_DIR", ".", "'/'", ".", "func_get_args", "(", ")", "[", "0", "]", ";", "}", ",", "array_keys", "(", "self", "::", "$", "cache", "[", "'plugins'", "]", ")", ")", ";", "$", "this", "->", "pluginHooks", "(", ")", ";", "}"], "docstring": "Run some checks then autoload our plugins.", "docstring_tokens": ["Run", "some", "checks", "then", "autoload", "our", "plugins", "."], "sha": "96b7e793848cdb33eebac979c42b40b6053e43fb", "url": "https://github.com/roots/bedrock/blob/96b7e793848cdb33eebac979c42b40b6053e43fb/web/app/mu-plugins/bedrock-autoloader.php#L69-L80", "partition": "train"}
{"repo": "roots/bedrock", "path": "web/app/mu-plugins/bedrock-autoloader.php", "func_name": "Autoloader.checkCache", "original_string": "private function checkCache()\n    {\n        $cache = get_site_option('bedrock_autoloader');\n\n        if ($cache === false || (isset($cache['plugins'], $cache['count']) && count($cache['plugins']) !== $cache['count'])) {\n            $this->updateCache();\n            return;\n        }\n\n        self::$cache = $cache;\n    }", "language": "php", "code": "private function checkCache()\n    {\n        $cache = get_site_option('bedrock_autoloader');\n\n        if ($cache === false || (isset($cache['plugins'], $cache['count']) && count($cache['plugins']) !== $cache['count'])) {\n            $this->updateCache();\n            return;\n        }\n\n        self::$cache = $cache;\n    }", "code_tokens": ["private", "function", "checkCache", "(", ")", "{", "$", "cache", "=", "get_site_option", "(", "'bedrock_autoloader'", ")", ";", "if", "(", "$", "cache", "===", "false", "||", "(", "isset", "(", "$", "cache", "[", "'plugins'", "]", ",", "$", "cache", "[", "'count'", "]", ")", "&&", "count", "(", "$", "cache", "[", "'plugins'", "]", ")", "!==", "$", "cache", "[", "'count'", "]", ")", ")", "{", "$", "this", "->", "updateCache", "(", ")", ";", "return", ";", "}", "self", "::", "$", "cache", "=", "$", "cache", ";", "}"], "docstring": "This sets the cache or calls for an update", "docstring_tokens": ["This", "sets", "the", "cache", "or", "calls", "for", "an", "update"], "sha": "96b7e793848cdb33eebac979c42b40b6053e43fb", "url": "https://github.com/roots/bedrock/blob/96b7e793848cdb33eebac979c42b40b6053e43fb/web/app/mu-plugins/bedrock-autoloader.php#L113-L123", "partition": "train"}
{"repo": "roots/bedrock", "path": "web/app/mu-plugins/bedrock-autoloader.php", "func_name": "Autoloader.validatePlugins", "original_string": "private function validatePlugins()\n    {\n        foreach (self::$cache['plugins'] as $plugin_file => $plugin_info) {\n            if (!file_exists(WPMU_PLUGIN_DIR . '/' . $plugin_file)) {\n                $this->updateCache();\n                break;\n            }\n        }\n    }", "language": "php", "code": "private function validatePlugins()\n    {\n        foreach (self::$cache['plugins'] as $plugin_file => $plugin_info) {\n            if (!file_exists(WPMU_PLUGIN_DIR . '/' . $plugin_file)) {\n                $this->updateCache();\n                break;\n            }\n        }\n    }", "code_tokens": ["private", "function", "validatePlugins", "(", ")", "{", "foreach", "(", "self", "::", "$", "cache", "[", "'plugins'", "]", "as", "$", "plugin_file", "=>", "$", "plugin_info", ")", "{", "if", "(", "!", "file_exists", "(", "WPMU_PLUGIN_DIR", ".", "'/'", ".", "$", "plugin_file", ")", ")", "{", "$", "this", "->", "updateCache", "(", ")", ";", "break", ";", "}", "}", "}"], "docstring": "Check that the plugin file exists, if it doesn't update the cache.", "docstring_tokens": ["Check", "that", "the", "plugin", "file", "exists", "if", "it", "doesn", "t", "update", "the", "cache", "."], "sha": "96b7e793848cdb33eebac979c42b40b6053e43fb", "url": "https://github.com/roots/bedrock/blob/96b7e793848cdb33eebac979c42b40b6053e43fb/web/app/mu-plugins/bedrock-autoloader.php#L163-L171", "partition": "train"}
{"repo": "roots/bedrock", "path": "web/app/mu-plugins/bedrock-autoloader.php", "func_name": "Autoloader.countPlugins", "original_string": "private function countPlugins()\n    {\n        if (isset(self::$count)) {\n            return self::$count;\n        }\n\n        $count = count(glob(WPMU_PLUGIN_DIR . '/*/', GLOB_ONLYDIR | GLOB_NOSORT));\n\n        if (!isset(self::$cache['count']) || $count !== self::$cache['count']) {\n            self::$count = $count;\n            $this->updateCache();\n        }\n\n        return self::$count;\n    }", "language": "php", "code": "private function countPlugins()\n    {\n        if (isset(self::$count)) {\n            return self::$count;\n        }\n\n        $count = count(glob(WPMU_PLUGIN_DIR . '/*/', GLOB_ONLYDIR | GLOB_NOSORT));\n\n        if (!isset(self::$cache['count']) || $count !== self::$cache['count']) {\n            self::$count = $count;\n            $this->updateCache();\n        }\n\n        return self::$count;\n    }", "code_tokens": ["private", "function", "countPlugins", "(", ")", "{", "if", "(", "isset", "(", "self", "::", "$", "count", ")", ")", "{", "return", "self", "::", "$", "count", ";", "}", "$", "count", "=", "count", "(", "glob", "(", "WPMU_PLUGIN_DIR", ".", "'/*/'", ",", "GLOB_ONLYDIR", "|", "GLOB_NOSORT", ")", ")", ";", "if", "(", "!", "isset", "(", "self", "::", "$", "cache", "[", "'count'", "]", ")", "||", "$", "count", "!==", "self", "::", "$", "cache", "[", "'count'", "]", ")", "{", "self", "::", "$", "count", "=", "$", "count", ";", "$", "this", "->", "updateCache", "(", ")", ";", "}", "return", "self", "::", "$", "count", ";", "}"], "docstring": "Count the number of autoloaded plugins.\n\nCount our plugins (but only once) by counting the top level folders in the\nmu-plugins dir. If it's more or less than last time, update the cache.\n\n@return int Number of autoloaded plugins.", "docstring_tokens": ["Count", "the", "number", "of", "autoloaded", "plugins", "."], "sha": "96b7e793848cdb33eebac979c42b40b6053e43fb", "url": "https://github.com/roots/bedrock/blob/96b7e793848cdb33eebac979c42b40b6053e43fb/web/app/mu-plugins/bedrock-autoloader.php#L181-L195", "partition": "train"}
{"repo": "danog/MadelineProto", "path": "src/danog/MadelineProto/Serialization.php", "func_name": "Serialization.serialize", "original_string": "public static function serialize($filename, $instance, $force = false)\n    {\n        if ($filename == '') {\n            throw new \\danog\\MadelineProto\\Exception('Empty filename');\n        }\n        if ($instance->API->asyncInitPromise) {\n            return $instance->call(static function () use ($filename, $instance, $force) {\n                yield $instance->API->asyncInitPromise;\n                $instance->API->asyncInitPromise = null;\n                return self::serialize($filename, $instance, $force);\n            });\n        }\n        if (isset($instance->API->setdem) && $instance->API->setdem) {\n            $instance->API->setdem = false;\n            $instance->API->__construct($instance->API->settings);\n        }\n        if ($instance->API === null && !$instance->getting_api_id) {\n            return false;\n        }\n        $instance->serialized = time();\n        $realpaths = self::realpaths($filename);\n        if (!file_exists($realpaths['lockfile'])) {\n            touch($realpaths['lockfile']);\n            clearstatcache();\n        }\n        $realpaths['lockfile'] = fopen($realpaths['lockfile'], 'w');\n        \\danog\\MadelineProto\\Logger::log('Waiting for exclusive lock of serialization lockfile...');\n        flock($realpaths['lockfile'], LOCK_EX);\n        \\danog\\MadelineProto\\Logger::log('Lock acquired, serializing');\n\n        try {\n            if (!$instance->getting_api_id) {\n                $update_closure = $instance->API->settings['updates']['callback'];\n                if ($instance->API->settings['updates']['callback'] instanceof \\Closure) {\n                    $instance->API->settings['updates']['callback'] = [$instance->API, 'noop'];\n                }\n                $logger_closure = $instance->API->settings['logger']['logger_param'];\n                if ($instance->API->settings['logger']['logger_param'] instanceof \\Closure) {\n                    $instance->API->settings['logger']['logger_param'] = [$instance->API, 'noop'];\n                }\n            }\n            $wrote = file_put_contents($realpaths['tempfile'], serialize($instance));\n            rename($realpaths['tempfile'], $realpaths['file']);\n        } finally {\n            if (!$instance->getting_api_id) {\n                $instance->API->settings['updates']['callback'] = $update_closure;\n                $instance->API->settings['logger']['logger_param'] = $logger_closure;\n            }\n            flock($realpaths['lockfile'], LOCK_UN);\n            fclose($realpaths['lockfile']);\n        }\n\n        return $wrote;\n    }", "language": "php", "code": "public static function serialize($filename, $instance, $force = false)\n    {\n        if ($filename == '') {\n            throw new \\danog\\MadelineProto\\Exception('Empty filename');\n        }\n        if ($instance->API->asyncInitPromise) {\n            return $instance->call(static function () use ($filename, $instance, $force) {\n                yield $instance->API->asyncInitPromise;\n                $instance->API->asyncInitPromise = null;\n                return self::serialize($filename, $instance, $force);\n            });\n        }\n        if (isset($instance->API->setdem) && $instance->API->setdem) {\n            $instance->API->setdem = false;\n            $instance->API->__construct($instance->API->settings);\n        }\n        if ($instance->API === null && !$instance->getting_api_id) {\n            return false;\n        }\n        $instance->serialized = time();\n        $realpaths = self::realpaths($filename);\n        if (!file_exists($realpaths['lockfile'])) {\n            touch($realpaths['lockfile']);\n            clearstatcache();\n        }\n        $realpaths['lockfile'] = fopen($realpaths['lockfile'], 'w');\n        \\danog\\MadelineProto\\Logger::log('Waiting for exclusive lock of serialization lockfile...');\n        flock($realpaths['lockfile'], LOCK_EX);\n        \\danog\\MadelineProto\\Logger::log('Lock acquired, serializing');\n\n        try {\n            if (!$instance->getting_api_id) {\n                $update_closure = $instance->API->settings['updates']['callback'];\n                if ($instance->API->settings['updates']['callback'] instanceof \\Closure) {\n                    $instance->API->settings['updates']['callback'] = [$instance->API, 'noop'];\n                }\n                $logger_closure = $instance->API->settings['logger']['logger_param'];\n                if ($instance->API->settings['logger']['logger_param'] instanceof \\Closure) {\n                    $instance->API->settings['logger']['logger_param'] = [$instance->API, 'noop'];\n                }\n            }\n            $wrote = file_put_contents($realpaths['tempfile'], serialize($instance));\n            rename($realpaths['tempfile'], $realpaths['file']);\n        } finally {\n            if (!$instance->getting_api_id) {\n                $instance->API->settings['updates']['callback'] = $update_closure;\n                $instance->API->settings['logger']['logger_param'] = $logger_closure;\n            }\n            flock($realpaths['lockfile'], LOCK_UN);\n            fclose($realpaths['lockfile']);\n        }\n\n        return $wrote;\n    }", "code_tokens": ["public", "static", "function", "serialize", "(", "$", "filename", ",", "$", "instance", ",", "$", "force", "=", "false", ")", "{", "if", "(", "$", "filename", "==", "''", ")", "{", "throw", "new", "\\", "danog", "\\", "MadelineProto", "\\", "Exception", "(", "'Empty filename'", ")", ";", "}", "if", "(", "$", "instance", "->", "API", "->", "asyncInitPromise", ")", "{", "return", "$", "instance", "->", "call", "(", "static", "function", "(", ")", "use", "(", "$", "filename", ",", "$", "instance", ",", "$", "force", ")", "{", "yield", "$", "instance", "->", "API", "->", "asyncInitPromise", ";", "$", "instance", "->", "API", "->", "asyncInitPromise", "=", "null", ";", "return", "self", "::", "serialize", "(", "$", "filename", ",", "$", "instance", ",", "$", "force", ")", ";", "}", ")", ";", "}", "if", "(", "isset", "(", "$", "instance", "->", "API", "->", "setdem", ")", "&&", "$", "instance", "->", "API", "->", "setdem", ")", "{", "$", "instance", "->", "API", "->", "setdem", "=", "false", ";", "$", "instance", "->", "API", "->", "__construct", "(", "$", "instance", "->", "API", "->", "settings", ")", ";", "}", "if", "(", "$", "instance", "->", "API", "===", "null", "&&", "!", "$", "instance", "->", "getting_api_id", ")", "{", "return", "false", ";", "}", "$", "instance", "->", "serialized", "=", "time", "(", ")", ";", "$", "realpaths", "=", "self", "::", "realpaths", "(", "$", "filename", ")", ";", "if", "(", "!", "file_exists", "(", "$", "realpaths", "[", "'lockfile'", "]", ")", ")", "{", "touch", "(", "$", "realpaths", "[", "'lockfile'", "]", ")", ";", "clearstatcache", "(", ")", ";", "}", "$", "realpaths", "[", "'lockfile'", "]", "=", "fopen", "(", "$", "realpaths", "[", "'lockfile'", "]", ",", "'w'", ")", ";", "\\", "danog", "\\", "MadelineProto", "\\", "Logger", "::", "log", "(", "'Waiting for exclusive lock of serialization lockfile...'", ")", ";", "flock", "(", "$", "realpaths", "[", "'lockfile'", "]", ",", "LOCK_EX", ")", ";", "\\", "danog", "\\", "MadelineProto", "\\", "Logger", "::", "log", "(", "'Lock acquired, serializing'", ")", ";", "try", "{", "if", "(", "!", "$", "instance", "->", "getting_api_id", ")", "{", "$", "update_closure", "=", "$", "instance", "->", "API", "->", "settings", "[", "'updates'", "]", "[", "'callback'", "]", ";", "if", "(", "$", "instance", "->", "API", "->", "settings", "[", "'updates'", "]", "[", "'callback'", "]", "instanceof", "\\", "Closure", ")", "{", "$", "instance", "->", "API", "->", "settings", "[", "'updates'", "]", "[", "'callback'", "]", "=", "[", "$", "instance", "->", "API", ",", "'noop'", "]", ";", "}", "$", "logger_closure", "=", "$", "instance", "->", "API", "->", "settings", "[", "'logger'", "]", "[", "'logger_param'", "]", ";", "if", "(", "$", "instance", "->", "API", "->", "settings", "[", "'logger'", "]", "[", "'logger_param'", "]", "instanceof", "\\", "Closure", ")", "{", "$", "instance", "->", "API", "->", "settings", "[", "'logger'", "]", "[", "'logger_param'", "]", "=", "[", "$", "instance", "->", "API", ",", "'noop'", "]", ";", "}", "}", "$", "wrote", "=", "file_put_contents", "(", "$", "realpaths", "[", "'tempfile'", "]", ",", "serialize", "(", "$", "instance", ")", ")", ";", "rename", "(", "$", "realpaths", "[", "'tempfile'", "]", ",", "$", "realpaths", "[", "'file'", "]", ")", ";", "}", "finally", "{", "if", "(", "!", "$", "instance", "->", "getting_api_id", ")", "{", "$", "instance", "->", "API", "->", "settings", "[", "'updates'", "]", "[", "'callback'", "]", "=", "$", "update_closure", ";", "$", "instance", "->", "API", "->", "settings", "[", "'logger'", "]", "[", "'logger_param'", "]", "=", "$", "logger_closure", ";", "}", "flock", "(", "$", "realpaths", "[", "'lockfile'", "]", ",", "LOCK_UN", ")", ";", "fclose", "(", "$", "realpaths", "[", "'lockfile'", "]", ")", ";", "}", "return", "$", "wrote", ";", "}"], "docstring": "Serialize API class.\n\n@param string $filename the dump file\n@param API    $instance\n@param bool   $force\n\n@return number", "docstring_tokens": ["Serialize", "API", "class", "."], "sha": "52fffa7a6817ccdedc8b3129e054554c6e141485", "url": "https://github.com/danog/MadelineProto/blob/52fffa7a6817ccdedc8b3129e054554c6e141485/src/danog/MadelineProto/Serialization.php#L55-L108", "partition": "train"}
{"repo": "danog/MadelineProto", "path": "src/danog/MadelineProto/Stream/MTProtoTransport/ObfuscatedStream.php", "func_name": "ObfuscatedStream.bufferReadAsync", "original_string": "public function bufferReadAsync(int $length): \\Generator\n    {\n        return @$this->decrypt->encrypt(yield $this->read_buffer->bufferRead($length));\n    }", "language": "php", "code": "public function bufferReadAsync(int $length): \\Generator\n    {\n        return @$this->decrypt->encrypt(yield $this->read_buffer->bufferRead($length));\n    }", "code_tokens": ["public", "function", "bufferReadAsync", "(", "int", "$", "length", ")", ":", "\\", "Generator", "{", "return", "@", "$", "this", "->", "decrypt", "->", "encrypt", "(", "yield", "$", "this", "->", "read_buffer", "->", "bufferRead", "(", "$", "length", ")", ")", ";", "}"], "docstring": "Decrypts read data asynchronously.\n\n@param Promise $promise Promise that resolves with a string when new data is available or `null` if the stream has closed.\n\n@throws PendingReadError Thrown if another read operation is still pending.\n\n@return Generator That resolves with a string when the provided promise is resolved and the data is decrypted", "docstring_tokens": ["Decrypts", "read", "data", "asynchronously", "."], "sha": "52fffa7a6817ccdedc8b3129e054554c6e141485", "url": "https://github.com/danog/MadelineProto/blob/52fffa7a6817ccdedc8b3129e054554c6e141485/src/danog/MadelineProto/Stream/MTProtoTransport/ObfuscatedStream.php#L150-L153", "partition": "train"}
{"repo": "danog/MadelineProto", "path": "src/danog/MadelineProto/Stream/MTProtoTransport/ObfuscatedStream.php", "func_name": "ObfuscatedStream.setExtra", "original_string": "public function setExtra($extra)\n    {\n        if (isset($extra['secret']) && strlen($extra['secret']) > 17) {\n            $extra['secret'] = hex2bin($extra['secret']);\n        }\n        if (isset($extra['secret']) && strlen($extra['secret']) == 17) {\n            $extra['secret'] = substr($extra['secret'], 0, 16);\n        }\n        $this->extra = $extra;\n    }", "language": "php", "code": "public function setExtra($extra)\n    {\n        if (isset($extra['secret']) && strlen($extra['secret']) > 17) {\n            $extra['secret'] = hex2bin($extra['secret']);\n        }\n        if (isset($extra['secret']) && strlen($extra['secret']) == 17) {\n            $extra['secret'] = substr($extra['secret'], 0, 16);\n        }\n        $this->extra = $extra;\n    }", "code_tokens": ["public", "function", "setExtra", "(", "$", "extra", ")", "{", "if", "(", "isset", "(", "$", "extra", "[", "'secret'", "]", ")", "&&", "strlen", "(", "$", "extra", "[", "'secret'", "]", ")", ">", "17", ")", "{", "$", "extra", "[", "'secret'", "]", "=", "hex2bin", "(", "$", "extra", "[", "'secret'", "]", ")", ";", "}", "if", "(", "isset", "(", "$", "extra", "[", "'secret'", "]", ")", "&&", "strlen", "(", "$", "extra", "[", "'secret'", "]", ")", "==", "17", ")", "{", "$", "extra", "[", "'secret'", "]", "=", "substr", "(", "$", "extra", "[", "'secret'", "]", ",", "0", ",", "16", ")", ";", "}", "$", "this", "->", "extra", "=", "$", "extra", ";", "}"], "docstring": "Does nothing.\n\n@param void $data Nothing\n\n@return void", "docstring_tokens": ["Does", "nothing", "."], "sha": "52fffa7a6817ccdedc8b3129e054554c6e141485", "url": "https://github.com/danog/MadelineProto/blob/52fffa7a6817ccdedc8b3129e054554c6e141485/src/danog/MadelineProto/Stream/MTProtoTransport/ObfuscatedStream.php#L189-L198", "partition": "train"}
{"repo": "danog/MadelineProto", "path": "src/danog/MadelineProto/Stream/Transport/DefaultStream.php", "func_name": "DefaultStream.read", "original_string": "public function read(): Promise\n    {\n        return $this->stream ? $this->stream->read() : new \\Amp\\Success(null);\n    }", "language": "php", "code": "public function read(): Promise\n    {\n        return $this->stream ? $this->stream->read() : new \\Amp\\Success(null);\n    }", "code_tokens": ["public", "function", "read", "(", ")", ":", "Promise", "{", "return", "$", "this", "->", "stream", "?", "$", "this", "->", "stream", "->", "read", "(", ")", ":", "new", "\\", "Amp", "\\", "Success", "(", "null", ")", ";", "}"], "docstring": "Async chunked read.\n\n@return Promise", "docstring_tokens": ["Async", "chunked", "read", "."], "sha": "52fffa7a6817ccdedc8b3129e054554c6e141485", "url": "https://github.com/danog/MadelineProto/blob/52fffa7a6817ccdedc8b3129e054554c6e141485/src/danog/MadelineProto/Stream/Transport/DefaultStream.php#L69-L72", "partition": "train"}