{"repo": "composer/composer", "path": "src/Composer/Repository/Vcs/GitLabDriver.php", "func_name": "GitLabDriver.supports", "original_string": "public static function supports(IOInterface $io, Config $config, $url, $deep = false)\n    {\n        if (!preg_match(self::URL_REGEX, $url, $match)) {\n            return false;\n        }\n\n        $scheme = !empty($match['scheme']) ? $match['scheme'] : null;\n        $guessedDomain = !empty($match['domain']) ? $match['domain'] : $match['domain2'];\n        $urlParts = explode('/', $match['parts']);\n\n        if (false === self::determineOrigin((array) $config->get('gitlab-domains'), $guessedDomain, $urlParts)) {\n            return false;\n        }\n\n        if ('https' === $scheme && !extension_loaded('openssl')) {\n            $io->writeError('Skipping GitLab driver for '.$url.' because the OpenSSL PHP extension is missing.', true, IOInterface::VERBOSE);\n\n            return false;\n        }\n\n        return true;\n    }", "language": "php", "code": "public static function supports(IOInterface $io, Config $config, $url, $deep = false)\n    {\n        if (!preg_match(self::URL_REGEX, $url, $match)) {\n            return false;\n        }\n\n        $scheme = !empty($match['scheme']) ? $match['scheme'] : null;\n        $guessedDomain = !empty($match['domain']) ? $match['domain'] : $match['domain2'];\n        $urlParts = explode('/', $match['parts']);\n\n        if (false === self::determineOrigin((array) $config->get('gitlab-domains'), $guessedDomain, $urlParts)) {\n            return false;\n        }\n\n        if ('https' === $scheme && !extension_loaded('openssl')) {\n            $io->writeError('Skipping GitLab driver for '.$url.' because the OpenSSL PHP extension is missing.', true, IOInterface::VERBOSE);\n\n            return false;\n        }\n\n        return true;\n    }", "code_tokens": ["public", "static", "function", "supports", "(", "IOInterface", "$", "io", ",", "Config", "$", "config", ",", "$", "url", ",", "$", "deep", "=", "false", ")", "{", "if", "(", "!", "preg_match", "(", "self", "::", "URL_REGEX", ",", "$", "url", ",", "$", "match", ")", ")", "{", "return", "false", ";", "}", "$", "scheme", "=", "!", "empty", "(", "$", "match", "[", "'scheme'", "]", ")", "?", "$", "match", "[", "'scheme'", "]", ":", "null", ";", "$", "guessedDomain", "=", "!", "empty", "(", "$", "match", "[", "'domain'", "]", ")", "?", "$", "match", "[", "'domain'", "]", ":", "$", "match", "[", "'domain2'", "]", ";", "$", "urlParts", "=", "explode", "(", "'/'", ",", "$", "match", "[", "'parts'", "]", ")", ";", "if", "(", "false", "===", "self", "::", "determineOrigin", "(", "(", "array", ")", "$", "config", "->", "get", "(", "'gitlab-domains'", ")", ",", "$", "guessedDomain", ",", "$", "urlParts", ")", ")", "{", "return", "false", ";", "}", "if", "(", "'https'", "===", "$", "scheme", "&&", "!", "extension_loaded", "(", "'openssl'", ")", ")", "{", "$", "io", "->", "writeError", "(", "'Skipping GitLab driver for '", ".", "$", "url", ".", "' because the OpenSSL PHP extension is missing.'", ",", "true", ",", "IOInterface", "::", "VERBOSE", ")", ";", "return", "false", ";", "}", "return", "true", ";", "}"], "docstring": "Uses the config `gitlab-domains` to see if the driver supports the url for the\nrepository given.\n\n{@inheritDoc}", "docstring_tokens": ["Uses", "the", "config", "gitlab", "-", "domains", "to", "see", "if", "the", "driver", "supports", "the", "url", "for", "the", "repository", "given", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Repository/Vcs/GitLabDriver.php#L451-L472", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Repository/Pear/PackageDependencyParser.php", "func_name": "PackageDependencyParser.buildDependencyInfo", "original_string": "public function buildDependencyInfo($depArray)\n    {\n        if (!is_array($depArray)) {\n            return new DependencyInfo(array(), array());\n        }\n        if (!$this->isHash($depArray)) {\n            return new DependencyInfo($this->buildDependency10Info($depArray), array());\n        }\n\n        return $this->buildDependency20Info($depArray);\n    }", "language": "php", "code": "public function buildDependencyInfo($depArray)\n    {\n        if (!is_array($depArray)) {\n            return new DependencyInfo(array(), array());\n        }\n        if (!$this->isHash($depArray)) {\n            return new DependencyInfo($this->buildDependency10Info($depArray), array());\n        }\n\n        return $this->buildDependency20Info($depArray);\n    }", "code_tokens": ["public", "function", "buildDependencyInfo", "(", "$", "depArray", ")", "{", "if", "(", "!", "is_array", "(", "$", "depArray", ")", ")", "{", "return", "new", "DependencyInfo", "(", "array", "(", ")", ",", "array", "(", ")", ")", ";", "}", "if", "(", "!", "$", "this", "->", "isHash", "(", "$", "depArray", ")", ")", "{", "return", "new", "DependencyInfo", "(", "$", "this", "->", "buildDependency10Info", "(", "$", "depArray", ")", ",", "array", "(", ")", ")", ";", "}", "return", "$", "this", "->", "buildDependency20Info", "(", "$", "depArray", ")", ";", "}"], "docstring": "Builds dependency information. It detects used package.xml format.\n\n@param array $depArray\n@return DependencyInfo", "docstring_tokens": ["Builds", "dependency", "information", ".", "It", "detects", "used", "package", ".", "xml", "format", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Repository/Pear/PackageDependencyParser.php#L28-L38", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Repository/Pear/PackageDependencyParser.php", "func_name": "PackageDependencyParser.buildDependency10Info", "original_string": "private function buildDependency10Info($depArray)\n    {\n        static $dep10toOperatorMap = array('has' => '==', 'eq' => '==', 'ge' => '>=', 'gt' => '>', 'le' => '<=', 'lt' => '<', 'not' => '!=');\n\n        $result = array();\n\n        foreach ($depArray as $depItem) {\n            if (empty($depItem['rel']) || !array_key_exists($depItem['rel'], $dep10toOperatorMap)) {\n                // 'unknown rel type:' . $depItem['rel'];\n                continue;\n            }\n\n            $depType = !empty($depItem['optional']) && 'yes' == $depItem['optional']\n                ? 'optional'\n                : 'required';\n            $depType = 'not' == $depItem['rel']\n                ? 'conflicts'\n                : $depType;\n\n            $depVersion = !empty($depItem['version']) ? $this->parseVersion($depItem['version']) : '*';\n\n            // has & not are special operators that does not requires version\n            $depVersionConstraint = ('has' == $depItem['rel'] || 'not' == $depItem['rel']) && '*' == $depVersion\n                ? '*'\n                : $dep10toOperatorMap[$depItem['rel']] . $depVersion;\n\n            switch ($depItem['type']) {\n                case 'php':\n                    $depChannelName = 'php';\n                    $depPackageName = '';\n                    break;\n                case 'pkg':\n                    $depChannelName = !empty($depItem['channel']) ? $depItem['channel'] : 'pear.php.net';\n                    $depPackageName = $depItem['name'];\n                    break;\n                case 'ext':\n                    $depChannelName = 'ext';\n                    $depPackageName = $depItem['name'];\n                    break;\n                case 'os':\n                case 'sapi':\n                    $depChannelName = '';\n                    $depPackageName = '';\n                break;\n                default:\n                    $depChannelName = '';\n                    $depPackageName = '';\n                    break;\n            }\n\n            if ('' != $depChannelName) {\n                $result[] = new DependencyConstraint(\n                    $depType,\n                    $depVersionConstraint,\n                    $depChannelName,\n                    $depPackageName\n                );\n            }\n        }\n\n        return $result;\n    }", "language": "php", "code": "private function buildDependency10Info($depArray)\n    {\n        static $dep10toOperatorMap = array('has' => '==', 'eq' => '==', 'ge' => '>=', 'gt' => '>', 'le' => '<=', 'lt' => '<', 'not' => '!=');\n\n        $result = array();\n\n        foreach ($depArray as $depItem) {\n            if (empty($depItem['rel']) || !array_key_exists($depItem['rel'], $dep10toOperatorMap)) {\n                // 'unknown rel type:' . $depItem['rel'];\n                continue;\n            }\n\n            $depType = !empty($depItem['optional']) && 'yes' == $depItem['optional']\n                ? 'optional'\n                : 'required';\n            $depType = 'not' == $depItem['rel']\n                ? 'conflicts'\n                : $depType;\n\n            $depVersion = !empty($depItem['version']) ? $this->parseVersion($depItem['version']) : '*';\n\n            // has & not are special operators that does not requires version\n            $depVersionConstraint = ('has' == $depItem['rel'] || 'not' == $depItem['rel']) && '*' == $depVersion\n                ? '*'\n                : $dep10toOperatorMap[$depItem['rel']] . $depVersion;\n\n            switch ($depItem['type']) {\n                case 'php':\n                    $depChannelName = 'php';\n                    $depPackageName = '';\n                    break;\n                case 'pkg':\n                    $depChannelName = !empty($depItem['channel']) ? $depItem['channel'] : 'pear.php.net';\n                    $depPackageName = $depItem['name'];\n                    break;\n                case 'ext':\n                    $depChannelName = 'ext';\n                    $depPackageName = $depItem['name'];\n                    break;\n                case 'os':\n                case 'sapi':\n                    $depChannelName = '';\n                    $depPackageName = '';\n                break;\n                default:\n                    $depChannelName = '';\n                    $depPackageName = '';\n                    break;\n            }\n\n            if ('' != $depChannelName) {\n                $result[] = new DependencyConstraint(\n                    $depType,\n                    $depVersionConstraint,\n                    $depChannelName,\n                    $depPackageName\n                );\n            }\n        }\n\n        return $result;\n    }", "code_tokens": ["private", "function", "buildDependency10Info", "(", "$", "depArray", ")", "{", "static", "$", "dep10toOperatorMap", "=", "array", "(", "'has'", "=>", "'=='", ",", "'eq'", "=>", "'=='", ",", "'ge'", "=>", "'>='", ",", "'gt'", "=>", "'>'", ",", "'le'", "=>", "'<='", ",", "'lt'", "=>", "'<'", ",", "'not'", "=>", "'!='", ")", ";", "$", "result", "=", "array", "(", ")", ";", "foreach", "(", "$", "depArray", "as", "$", "depItem", ")", "{", "if", "(", "empty", "(", "$", "depItem", "[", "'rel'", "]", ")", "||", "!", "array_key_exists", "(", "$", "depItem", "[", "'rel'", "]", ",", "$", "dep10toOperatorMap", ")", ")", "{", "continue", ";", "}", "$", "depType", "=", "!", "empty", "(", "$", "depItem", "[", "'optional'", "]", ")", "&&", "'yes'", "==", "$", "depItem", "[", "'optional'", "]", "?", "'optional'", ":", "'required'", ";", "$", "depType", "=", "'not'", "==", "$", "depItem", "[", "'rel'", "]", "?", "'conflicts'", ":", "$", "depType", ";", "$", "depVersion", "=", "!", "empty", "(", "$", "depItem", "[", "'version'", "]", ")", "?", "$", "this", "->", "parseVersion", "(", "$", "depItem", "[", "'version'", "]", ")", ":", "'*'", ";", "$", "depVersionConstraint", "=", "(", "'has'", "==", "$", "depItem", "[", "'rel'", "]", "||", "'not'", "==", "$", "depItem", "[", "'rel'", "]", ")", "&&", "'*'", "==", "$", "depVersion", "?", "'*'", ":", "$", "dep10toOperatorMap", "[", "$", "depItem", "[", "'rel'", "]", "]", ".", "$", "depVersion", ";", "switch", "(", "$", "depItem", "[", "'type'", "]", ")", "{", "case", "'php'", ":", "$", "depChannelName", "=", "'php'", ";", "$", "depPackageName", "=", "''", ";", "break", ";", "case", "'pkg'", ":", "$", "depChannelName", "=", "!", "empty", "(", "$", "depItem", "[", "'channel'", "]", ")", "?", "$", "depItem", "[", "'channel'", "]", ":", "'pear.php.net'", ";", "$", "depPackageName", "=", "$", "depItem", "[", "'name'", "]", ";", "break", ";", "case", "'ext'", ":", "$", "depChannelName", "=", "'ext'", ";", "$", "depPackageName", "=", "$", "depItem", "[", "'name'", "]", ";", "break", ";", "case", "'os'", ":", "case", "'sapi'", ":", "$", "depChannelName", "=", "''", ";", "$", "depPackageName", "=", "''", ";", "break", ";", "default", ":", "$", "depChannelName", "=", "''", ";", "$", "depPackageName", "=", "''", ";", "break", ";", "}", "if", "(", "''", "!=", "$", "depChannelName", ")", "{", "$", "result", "[", "]", "=", "new", "DependencyConstraint", "(", "$", "depType", ",", "$", "depVersionConstraint", ",", "$", "depChannelName", ",", "$", "depPackageName", ")", ";", "}", "}", "return", "$", "result", ";", "}"], "docstring": "Builds dependency information from package.xml 1.0 format\n\nhttps://pear.php.net/manual/en/guide.developers.package2.dependencies.php\n\npackage.xml 1.0 format consists of array of\n{ type=\"php|os|sapi|ext|pkg\" rel=\"has|not|eq|ge|gt|le|lt\" optional=\"yes\"\nchannel=\"channelName\" name=\"extName|packageName\" }\n\n@param array $depArray Dependency data in package.xml 1.0 format\n@return DependencyConstraint[]", "docstring_tokens": ["Builds", "dependency", "information", "from", "package", ".", "xml", "1", ".", "0", "format"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Repository/Pear/PackageDependencyParser.php#L52-L113", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Repository/Pear/PackageDependencyParser.php", "func_name": "PackageDependencyParser.buildDependency20Info", "original_string": "private function buildDependency20Info($depArray)\n    {\n        $result = array();\n        $optionals = array();\n        $defaultOptionals = array();\n        foreach ($depArray as $depType => $depTypeGroup) {\n            if (!is_array($depTypeGroup)) {\n                continue;\n            }\n            if ('required' == $depType || 'optional' == $depType) {\n                foreach ($depTypeGroup as $depItemType => $depItem) {\n                    switch ($depItemType) {\n                        case 'php':\n                            $result[] = new DependencyConstraint(\n                                $depType,\n                                $this->parse20VersionConstraint($depItem),\n                                'php',\n                                ''\n                            );\n                            break;\n                        case 'package':\n                            $deps = $this->buildDepPackageConstraints($depItem, $depType);\n                            $result = array_merge($result, $deps);\n                            break;\n                        case 'extension':\n                            $deps = $this->buildDepExtensionConstraints($depItem, $depType);\n                            $result = array_merge($result, $deps);\n                            break;\n                        case 'subpackage':\n                            $deps = $this->buildDepPackageConstraints($depItem, 'replaces');\n                            $defaultOptionals += $deps;\n                            break;\n                        case 'os':\n                        case 'pearinstaller':\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            } elseif ('group' == $depType) {\n                if ($this->isHash($depTypeGroup)) {\n                    $depTypeGroup = array($depTypeGroup);\n                }\n\n                foreach ($depTypeGroup as $depItem) {\n                    $groupName = $depItem['attribs']['name'];\n                    if (!isset($optionals[$groupName])) {\n                        $optionals[$groupName] = array();\n                    }\n\n                    if (isset($depItem['subpackage'])) {\n                        $optionals[$groupName] += $this->buildDepPackageConstraints($depItem['subpackage'], 'replaces');\n                    } else {\n                        $result += $this->buildDepPackageConstraints($depItem['package'], 'optional');\n                    }\n                }\n            }\n        }\n\n        if (count($defaultOptionals) > 0) {\n            $optionals['*'] = $defaultOptionals;\n        }\n\n        return new DependencyInfo($result, $optionals);\n    }", "language": "php", "code": "private function buildDependency20Info($depArray)\n    {\n        $result = array();\n        $optionals = array();\n        $defaultOptionals = array();\n        foreach ($depArray as $depType => $depTypeGroup) {\n            if (!is_array($depTypeGroup)) {\n                continue;\n            }\n            if ('required' == $depType || 'optional' == $depType) {\n                foreach ($depTypeGroup as $depItemType => $depItem) {\n                    switch ($depItemType) {\n                        case 'php':\n                            $result[] = new DependencyConstraint(\n                                $depType,\n                                $this->parse20VersionConstraint($depItem),\n                                'php',\n                                ''\n                            );\n                            break;\n                        case 'package':\n                            $deps = $this->buildDepPackageConstraints($depItem, $depType);\n                            $result = array_merge($result, $deps);\n                            break;\n                        case 'extension':\n                            $deps = $this->buildDepExtensionConstraints($depItem, $depType);\n                            $result = array_merge($result, $deps);\n                            break;\n                        case 'subpackage':\n                            $deps = $this->buildDepPackageConstraints($depItem, 'replaces');\n                            $defaultOptionals += $deps;\n                            break;\n                        case 'os':\n                        case 'pearinstaller':\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            } elseif ('group' == $depType) {\n                if ($this->isHash($depTypeGroup)) {\n                    $depTypeGroup = array($depTypeGroup);\n                }\n\n                foreach ($depTypeGroup as $depItem) {\n                    $groupName = $depItem['attribs']['name'];\n                    if (!isset($optionals[$groupName])) {\n                        $optionals[$groupName] = array();\n                    }\n\n                    if (isset($depItem['subpackage'])) {\n                        $optionals[$groupName] += $this->buildDepPackageConstraints($depItem['subpackage'], 'replaces');\n                    } else {\n                        $result += $this->buildDepPackageConstraints($depItem['package'], 'optional');\n                    }\n                }\n            }\n        }\n\n        if (count($defaultOptionals) > 0) {\n            $optionals['*'] = $defaultOptionals;\n        }\n\n        return new DependencyInfo($result, $optionals);\n    }", "code_tokens": ["private", "function", "buildDependency20Info", "(", "$", "depArray", ")", "{", "$", "result", "=", "array", "(", ")", ";", "$", "optionals", "=", "array", "(", ")", ";", "$", "defaultOptionals", "=", "array", "(", ")", ";", "foreach", "(", "$", "depArray", "as", "$", "depType", "=>", "$", "depTypeGroup", ")", "{", "if", "(", "!", "is_array", "(", "$", "depTypeGroup", ")", ")", "{", "continue", ";", "}", "if", "(", "'required'", "==", "$", "depType", "||", "'optional'", "==", "$", "depType", ")", "{", "foreach", "(", "$", "depTypeGroup", "as", "$", "depItemType", "=>", "$", "depItem", ")", "{", "switch", "(", "$", "depItemType", ")", "{", "case", "'php'", ":", "$", "result", "[", "]", "=", "new", "DependencyConstraint", "(", "$", "depType", ",", "$", "this", "->", "parse20VersionConstraint", "(", "$", "depItem", ")", ",", "'php'", ",", "''", ")", ";", "break", ";", "case", "'package'", ":", "$", "deps", "=", "$", "this", "->", "buildDepPackageConstraints", "(", "$", "depItem", ",", "$", "depType", ")", ";", "$", "result", "=", "array_merge", "(", "$", "result", ",", "$", "deps", ")", ";", "break", ";", "case", "'extension'", ":", "$", "deps", "=", "$", "this", "->", "buildDepExtensionConstraints", "(", "$", "depItem", ",", "$", "depType", ")", ";", "$", "result", "=", "array_merge", "(", "$", "result", ",", "$", "deps", ")", ";", "break", ";", "case", "'subpackage'", ":", "$", "deps", "=", "$", "this", "->", "buildDepPackageConstraints", "(", "$", "depItem", ",", "'replaces'", ")", ";", "$", "defaultOptionals", "+=", "$", "deps", ";", "break", ";", "case", "'os'", ":", "case", "'pearinstaller'", ":", "break", ";", "default", ":", "break", ";", "}", "}", "}", "elseif", "(", "'group'", "==", "$", "depType", ")", "{", "if", "(", "$", "this", "->", "isHash", "(", "$", "depTypeGroup", ")", ")", "{", "$", "depTypeGroup", "=", "array", "(", "$", "depTypeGroup", ")", ";", "}", "foreach", "(", "$", "depTypeGroup", "as", "$", "depItem", ")", "{", "$", "groupName", "=", "$", "depItem", "[", "'attribs'", "]", "[", "'name'", "]", ";", "if", "(", "!", "isset", "(", "$", "optionals", "[", "$", "groupName", "]", ")", ")", "{", "$", "optionals", "[", "$", "groupName", "]", "=", "array", "(", ")", ";", "}", "if", "(", "isset", "(", "$", "depItem", "[", "'subpackage'", "]", ")", ")", "{", "$", "optionals", "[", "$", "groupName", "]", "+=", "$", "this", "->", "buildDepPackageConstraints", "(", "$", "depItem", "[", "'subpackage'", "]", ",", "'replaces'", ")", ";", "}", "else", "{", "$", "result", "+=", "$", "this", "->", "buildDepPackageConstraints", "(", "$", "depItem", "[", "'package'", "]", ",", "'optional'", ")", ";", "}", "}", "}", "}", "if", "(", "count", "(", "$", "defaultOptionals", ")", ">", "0", ")", "{", "$", "optionals", "[", "'*'", "]", "=", "$", "defaultOptionals", ";", "}", "return", "new", "DependencyInfo", "(", "$", "result", ",", "$", "optionals", ")", ";", "}"], "docstring": "Builds dependency information from package.xml 2.0 format\n\n@param array $depArray Dependency data in package.xml 1.0 format\n@return DependencyInfo", "docstring_tokens": ["Builds", "dependency", "information", "from", "package", ".", "xml", "2", ".", "0", "format"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Repository/Pear/PackageDependencyParser.php#L121-L185", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Repository/Pear/PackageDependencyParser.php", "func_name": "PackageDependencyParser.buildDepExtensionConstraints", "original_string": "private function buildDepExtensionConstraints($depItem, $depType)\n    {\n        if ($this->isHash($depItem)) {\n            $depItem = array($depItem);\n        }\n\n        $result = array();\n        foreach ($depItem as $subDepItem) {\n            $depChannelName = 'ext';\n            $depPackageName = $subDepItem['name'];\n            $depVersionConstraint = $this->parse20VersionConstraint($subDepItem);\n\n            $result[] = new DependencyConstraint(\n                $depType,\n                $depVersionConstraint,\n                $depChannelName,\n                $depPackageName\n            );\n        }\n\n        return $result;\n    }", "language": "php", "code": "private function buildDepExtensionConstraints($depItem, $depType)\n    {\n        if ($this->isHash($depItem)) {\n            $depItem = array($depItem);\n        }\n\n        $result = array();\n        foreach ($depItem as $subDepItem) {\n            $depChannelName = 'ext';\n            $depPackageName = $subDepItem['name'];\n            $depVersionConstraint = $this->parse20VersionConstraint($subDepItem);\n\n            $result[] = new DependencyConstraint(\n                $depType,\n                $depVersionConstraint,\n                $depChannelName,\n                $depPackageName\n            );\n        }\n\n        return $result;\n    }", "code_tokens": ["private", "function", "buildDepExtensionConstraints", "(", "$", "depItem", ",", "$", "depType", ")", "{", "if", "(", "$", "this", "->", "isHash", "(", "$", "depItem", ")", ")", "{", "$", "depItem", "=", "array", "(", "$", "depItem", ")", ";", "}", "$", "result", "=", "array", "(", ")", ";", "foreach", "(", "$", "depItem", "as", "$", "subDepItem", ")", "{", "$", "depChannelName", "=", "'ext'", ";", "$", "depPackageName", "=", "$", "subDepItem", "[", "'name'", "]", ";", "$", "depVersionConstraint", "=", "$", "this", "->", "parse20VersionConstraint", "(", "$", "subDepItem", ")", ";", "$", "result", "[", "]", "=", "new", "DependencyConstraint", "(", "$", "depType", ",", "$", "depVersionConstraint", ",", "$", "depChannelName", ",", "$", "depPackageName", ")", ";", "}", "return", "$", "result", ";", "}"], "docstring": "Builds dependency constraint of 'extension' type\n\n@param array $depItem dependency constraint or array of dependency constraints\n@param string $depType target type of building constraint.\n@return DependencyConstraint[]", "docstring_tokens": ["Builds", "dependency", "constraint", "of", "extension", "type"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Repository/Pear/PackageDependencyParser.php#L194-L215", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Repository/Pear/PackageDependencyParser.php", "func_name": "PackageDependencyParser.buildDepPackageConstraints", "original_string": "private function buildDepPackageConstraints($depItem, $depType)\n    {\n        if ($this->isHash($depItem)) {\n            $depItem = array($depItem);\n        }\n\n        $result = array();\n        foreach ($depItem as $subDepItem) {\n            if (!array_key_exists('channel', $subDepItem)) {\n                $subDepItem['channel'] = $subDepItem['uri'];\n            }\n            $depChannelName = $subDepItem['channel'];\n            $depPackageName = $subDepItem['name'];\n            $depVersionConstraint = $this->parse20VersionConstraint($subDepItem);\n            if (isset($subDepItem['conflicts'])) {\n                $depType = 'conflicts';\n            }\n\n            $result[] = new DependencyConstraint(\n                $depType,\n                $depVersionConstraint,\n                $depChannelName,\n                $depPackageName\n            );\n        }\n\n        return $result;\n    }", "language": "php", "code": "private function buildDepPackageConstraints($depItem, $depType)\n    {\n        if ($this->isHash($depItem)) {\n            $depItem = array($depItem);\n        }\n\n        $result = array();\n        foreach ($depItem as $subDepItem) {\n            if (!array_key_exists('channel', $subDepItem)) {\n                $subDepItem['channel'] = $subDepItem['uri'];\n            }\n            $depChannelName = $subDepItem['channel'];\n            $depPackageName = $subDepItem['name'];\n            $depVersionConstraint = $this->parse20VersionConstraint($subDepItem);\n            if (isset($subDepItem['conflicts'])) {\n                $depType = 'conflicts';\n            }\n\n            $result[] = new DependencyConstraint(\n                $depType,\n                $depVersionConstraint,\n                $depChannelName,\n                $depPackageName\n            );\n        }\n\n        return $result;\n    }", "code_tokens": ["private", "function", "buildDepPackageConstraints", "(", "$", "depItem", ",", "$", "depType", ")", "{", "if", "(", "$", "this", "->", "isHash", "(", "$", "depItem", ")", ")", "{", "$", "depItem", "=", "array", "(", "$", "depItem", ")", ";", "}", "$", "result", "=", "array", "(", ")", ";", "foreach", "(", "$", "depItem", "as", "$", "subDepItem", ")", "{", "if", "(", "!", "array_key_exists", "(", "'channel'", ",", "$", "subDepItem", ")", ")", "{", "$", "subDepItem", "[", "'channel'", "]", "=", "$", "subDepItem", "[", "'uri'", "]", ";", "}", "$", "depChannelName", "=", "$", "subDepItem", "[", "'channel'", "]", ";", "$", "depPackageName", "=", "$", "subDepItem", "[", "'name'", "]", ";", "$", "depVersionConstraint", "=", "$", "this", "->", "parse20VersionConstraint", "(", "$", "subDepItem", ")", ";", "if", "(", "isset", "(", "$", "subDepItem", "[", "'conflicts'", "]", ")", ")", "{", "$", "depType", "=", "'conflicts'", ";", "}", "$", "result", "[", "]", "=", "new", "DependencyConstraint", "(", "$", "depType", ",", "$", "depVersionConstraint", ",", "$", "depChannelName", ",", "$", "depPackageName", ")", ";", "}", "return", "$", "result", ";", "}"], "docstring": "Builds dependency constraint of 'package' type\n\n@param array $depItem dependency constraint or array of dependency constraints\n@param string $depType target type of building constraint.\n@return DependencyConstraint[]", "docstring_tokens": ["Builds", "dependency", "constraint", "of", "package", "type"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Repository/Pear/PackageDependencyParser.php#L224-L251", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Repository/Pear/PackageDependencyParser.php", "func_name": "PackageDependencyParser.parse20VersionConstraint", "original_string": "private function parse20VersionConstraint(array $data)\n    {\n        static $dep20toOperatorMap = array('has' => '==', 'min' => '>=', 'max' => '<=', 'exclude' => '!=');\n\n        $versions = array();\n        $values = array_intersect_key($data, $dep20toOperatorMap);\n        if (0 == count($values)) {\n            return '*';\n        }\n        if (isset($values['min']) && isset($values['exclude']) && $data['min'] == $data['exclude']) {\n            $versions[] = '>' . $this->parseVersion($values['min']);\n        } elseif (isset($values['max']) && isset($values['exclude']) && $data['max'] == $data['exclude']) {\n            $versions[] = '<' . $this->parseVersion($values['max']);\n        } else {\n            foreach ($values as $op => $version) {\n                if ('exclude' == $op && is_array($version)) {\n                    foreach ($version as $versionPart) {\n                        $versions[] = $dep20toOperatorMap[$op] . $this->parseVersion($versionPart);\n                    }\n                } else {\n                    $versions[] = $dep20toOperatorMap[$op] . $this->parseVersion($version);\n                }\n            }\n        }\n\n        return implode(',', $versions);\n    }", "language": "php", "code": "private function parse20VersionConstraint(array $data)\n    {\n        static $dep20toOperatorMap = array('has' => '==', 'min' => '>=', 'max' => '<=', 'exclude' => '!=');\n\n        $versions = array();\n        $values = array_intersect_key($data, $dep20toOperatorMap);\n        if (0 == count($values)) {\n            return '*';\n        }\n        if (isset($values['min']) && isset($values['exclude']) && $data['min'] == $data['exclude']) {\n            $versions[] = '>' . $this->parseVersion($values['min']);\n        } elseif (isset($values['max']) && isset($values['exclude']) && $data['max'] == $data['exclude']) {\n            $versions[] = '<' . $this->parseVersion($values['max']);\n        } else {\n            foreach ($values as $op => $version) {\n                if ('exclude' == $op && is_array($version)) {\n                    foreach ($version as $versionPart) {\n                        $versions[] = $dep20toOperatorMap[$op] . $this->parseVersion($versionPart);\n                    }\n                } else {\n                    $versions[] = $dep20toOperatorMap[$op] . $this->parseVersion($version);\n                }\n            }\n        }\n\n        return implode(',', $versions);\n    }", "code_tokens": ["private", "function", "parse20VersionConstraint", "(", "array", "$", "data", ")", "{", "static", "$", "dep20toOperatorMap", "=", "array", "(", "'has'", "=>", "'=='", ",", "'min'", "=>", "'>='", ",", "'max'", "=>", "'<='", ",", "'exclude'", "=>", "'!='", ")", ";", "$", "versions", "=", "array", "(", ")", ";", "$", "values", "=", "array_intersect_key", "(", "$", "data", ",", "$", "dep20toOperatorMap", ")", ";", "if", "(", "0", "==", "count", "(", "$", "values", ")", ")", "{", "return", "'*'", ";", "}", "if", "(", "isset", "(", "$", "values", "[", "'min'", "]", ")", "&&", "isset", "(", "$", "values", "[", "'exclude'", "]", ")", "&&", "$", "data", "[", "'min'", "]", "==", "$", "data", "[", "'exclude'", "]", ")", "{", "$", "versions", "[", "]", "=", "'>'", ".", "$", "this", "->", "parseVersion", "(", "$", "values", "[", "'min'", "]", ")", ";", "}", "elseif", "(", "isset", "(", "$", "values", "[", "'max'", "]", ")", "&&", "isset", "(", "$", "values", "[", "'exclude'", "]", ")", "&&", "$", "data", "[", "'max'", "]", "==", "$", "data", "[", "'exclude'", "]", ")", "{", "$", "versions", "[", "]", "=", "'<'", ".", "$", "this", "->", "parseVersion", "(", "$", "values", "[", "'max'", "]", ")", ";", "}", "else", "{", "foreach", "(", "$", "values", "as", "$", "op", "=>", "$", "version", ")", "{", "if", "(", "'exclude'", "==", "$", "op", "&&", "is_array", "(", "$", "version", ")", ")", "{", "foreach", "(", "$", "version", "as", "$", "versionPart", ")", "{", "$", "versions", "[", "]", "=", "$", "dep20toOperatorMap", "[", "$", "op", "]", ".", "$", "this", "->", "parseVersion", "(", "$", "versionPart", ")", ";", "}", "}", "else", "{", "$", "versions", "[", "]", "=", "$", "dep20toOperatorMap", "[", "$", "op", "]", ".", "$", "this", "->", "parseVersion", "(", "$", "version", ")", ";", "}", "}", "}", "return", "implode", "(", "','", ",", "$", "versions", ")", ";", "}"], "docstring": "Parses version constraint\n\n@param  array  $data array containing several 'min', 'max', 'has', 'exclude' and other keys.\n@return string", "docstring_tokens": ["Parses", "version", "constraint"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Repository/Pear/PackageDependencyParser.php#L259-L285", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Repository/Pear/PackageDependencyParser.php", "func_name": "PackageDependencyParser.parseVersion", "original_string": "private function parseVersion($version)\n    {\n        if (preg_match('{^v?(\\d{1,3})(\\.\\d+)?(\\.\\d+)?(\\.\\d+)?}i', $version, $matches)) {\n            $version = $matches[1]\n                .(!empty($matches[2]) ? $matches[2] : '.0')\n                .(!empty($matches[3]) ? $matches[3] : '.0')\n                .(!empty($matches[4]) ? $matches[4] : '.0');\n\n            return $version;\n        }\n\n        return null;\n    }", "language": "php", "code": "private function parseVersion($version)\n    {\n        if (preg_match('{^v?(\\d{1,3})(\\.\\d+)?(\\.\\d+)?(\\.\\d+)?}i', $version, $matches)) {\n            $version = $matches[1]\n                .(!empty($matches[2]) ? $matches[2] : '.0')\n                .(!empty($matches[3]) ? $matches[3] : '.0')\n                .(!empty($matches[4]) ? $matches[4] : '.0');\n\n            return $version;\n        }\n\n        return null;\n    }", "code_tokens": ["private", "function", "parseVersion", "(", "$", "version", ")", "{", "if", "(", "preg_match", "(", "'{^v?(\\d{1,3})(\\.\\d+)?(\\.\\d+)?(\\.\\d+)?}i'", ",", "$", "version", ",", "$", "matches", ")", ")", "{", "$", "version", "=", "$", "matches", "[", "1", "]", ".", "(", "!", "empty", "(", "$", "matches", "[", "2", "]", ")", "?", "$", "matches", "[", "2", "]", ":", "'.0'", ")", ".", "(", "!", "empty", "(", "$", "matches", "[", "3", "]", ")", "?", "$", "matches", "[", "3", "]", ":", "'.0'", ")", ".", "(", "!", "empty", "(", "$", "matches", "[", "4", "]", ")", "?", "$", "matches", "[", "4", "]", ":", "'.0'", ")", ";", "return", "$", "version", ";", "}", "return", "null", ";", "}"], "docstring": "Softened version parser\n\n@param string $version\n@return null|string", "docstring_tokens": ["Softened", "version", "parser"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Repository/Pear/PackageDependencyParser.php#L293-L305", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/DependencyResolver/Request.php", "func_name": "Request.fix", "original_string": "public function fix($packageName, ConstraintInterface $constraint = null)\n    {\n        $this->addJob($packageName, 'install', $constraint, true);\n    }", "language": "php", "code": "public function fix($packageName, ConstraintInterface $constraint = null)\n    {\n        $this->addJob($packageName, 'install', $constraint, true);\n    }", "code_tokens": ["public", "function", "fix", "(", "$", "packageName", ",", "ConstraintInterface", "$", "constraint", "=", "null", ")", "{", "$", "this", "->", "addJob", "(", "$", "packageName", ",", "'install'", ",", "$", "constraint", ",", "true", ")", ";", "}"], "docstring": "Mark an existing package as being installed and having to remain installed\n\nThese jobs will not be tempered with by the solver\n\n@param string                   $packageName\n@param ConstraintInterface|null $constraint", "docstring_tokens": ["Mark", "an", "existing", "package", "as", "being", "installed", "and", "having", "to", "remain", "installed"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/DependencyResolver/Request.php#L52-L55", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Util/GitLab.php", "func_name": "GitLab.authorizeOAuth", "original_string": "public function authorizeOAuth($originUrl)\n    {\n        if (!in_array($originUrl, $this->config->get('gitlab-domains'), true)) {\n            return false;\n        }\n\n        // if available use token from git config\n        if (0 === $this->process->execute('git config gitlab.accesstoken', $output)) {\n            $this->io->setAuthentication($originUrl, trim($output), 'oauth2');\n\n            return true;\n        }\n\n        // if available use token from composer config\n        $authTokens = $this->config->get('gitlab-token');\n\n        if (isset($authTokens[$originUrl])) {\n            $this->io->setAuthentication($originUrl, $authTokens[$originUrl], 'private-token');\n\n            return true;\n        }\n\n        return false;\n    }", "language": "php", "code": "public function authorizeOAuth($originUrl)\n    {\n        if (!in_array($originUrl, $this->config->get('gitlab-domains'), true)) {\n            return false;\n        }\n\n        // if available use token from git config\n        if (0 === $this->process->execute('git config gitlab.accesstoken', $output)) {\n            $this->io->setAuthentication($originUrl, trim($output), 'oauth2');\n\n            return true;\n        }\n\n        // if available use token from composer config\n        $authTokens = $this->config->get('gitlab-token');\n\n        if (isset($authTokens[$originUrl])) {\n            $this->io->setAuthentication($originUrl, $authTokens[$originUrl], 'private-token');\n\n            return true;\n        }\n\n        return false;\n    }", "code_tokens": ["public", "function", "authorizeOAuth", "(", "$", "originUrl", ")", "{", "if", "(", "!", "in_array", "(", "$", "originUrl", ",", "$", "this", "->", "config", "->", "get", "(", "'gitlab-domains'", ")", ",", "true", ")", ")", "{", "return", "false", ";", "}", "if", "(", "0", "===", "$", "this", "->", "process", "->", "execute", "(", "'git config gitlab.accesstoken'", ",", "$", "output", ")", ")", "{", "$", "this", "->", "io", "->", "setAuthentication", "(", "$", "originUrl", ",", "trim", "(", "$", "output", ")", ",", "'oauth2'", ")", ";", "return", "true", ";", "}", "$", "authTokens", "=", "$", "this", "->", "config", "->", "get", "(", "'gitlab-token'", ")", ";", "if", "(", "isset", "(", "$", "authTokens", "[", "$", "originUrl", "]", ")", ")", "{", "$", "this", "->", "io", "->", "setAuthentication", "(", "$", "originUrl", ",", "$", "authTokens", "[", "$", "originUrl", "]", ",", "'private-token'", ")", ";", "return", "true", ";", "}", "return", "false", ";", "}"], "docstring": "Attempts to authorize a GitLab domain via OAuth.\n\n@param string $originUrl The host this GitLab instance is located at\n\n@return bool true on success", "docstring_tokens": ["Attempts", "to", "authorize", "a", "GitLab", "domain", "via", "OAuth", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Util/GitLab.php#L54-L77", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Installer.php", "func_name": "Installer.getCurrentPackages", "original_string": "private function getCurrentPackages($installedRepo)\n    {\n        if ($this->locker->isLocked()) {\n            try {\n                return $this->locker->getLockedRepository(true)->getPackages();\n            } catch (\\RuntimeException $e) {\n                // fetch only non-dev packages from lock if doing a dev update fails due to a previously incomplete lock file\n                return $this->locker->getLockedRepository()->getPackages();\n            }\n        }\n\n        return $installedRepo->getPackages();\n    }", "language": "php", "code": "private function getCurrentPackages($installedRepo)\n    {\n        if ($this->locker->isLocked()) {\n            try {\n                return $this->locker->getLockedRepository(true)->getPackages();\n            } catch (\\RuntimeException $e) {\n                // fetch only non-dev packages from lock if doing a dev update fails due to a previously incomplete lock file\n                return $this->locker->getLockedRepository()->getPackages();\n            }\n        }\n\n        return $installedRepo->getPackages();\n    }", "code_tokens": ["private", "function", "getCurrentPackages", "(", "$", "installedRepo", ")", "{", "if", "(", "$", "this", "->", "locker", "->", "isLocked", "(", ")", ")", "{", "try", "{", "return", "$", "this", "->", "locker", "->", "getLockedRepository", "(", "true", ")", "->", "getPackages", "(", ")", ";", "}", "catch", "(", "\\", "RuntimeException", "$", "e", ")", "{", "return", "$", "this", "->", "locker", "->", "getLockedRepository", "(", ")", "->", "getPackages", "(", ")", ";", "}", "}", "return", "$", "installedRepo", "->", "getPackages", "(", ")", ";", "}"], "docstring": "Loads the most \"current\" list of packages that are installed meaning from lock ideally or from installed repo as fallback\n@param  RepositoryInterface $installedRepo\n@return array", "docstring_tokens": ["Loads", "the", "most", "current", "list", "of", "packages", "that", "are", "installed", "meaning", "from", "lock", "ideally", "or", "from", "installed", "repo", "as", "fallback"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Installer.php#L1096-L1108", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Installer.php", "func_name": "Installer.mockLocalRepositories", "original_string": "private function mockLocalRepositories(RepositoryManager $rm)\n    {\n        $packages = array();\n        foreach ($rm->getLocalRepository()->getPackages() as $package) {\n            $packages[(string) $package] = clone $package;\n        }\n        foreach ($packages as $key => $package) {\n            if ($package instanceof AliasPackage) {\n                $alias = (string) $package->getAliasOf();\n                $packages[$key] = new AliasPackage($packages[$alias], $package->getVersion(), $package->getPrettyVersion());\n            }\n        }\n        $rm->setLocalRepository(\n            new InstalledArrayRepository($packages)\n        );\n    }", "language": "php", "code": "private function mockLocalRepositories(RepositoryManager $rm)\n    {\n        $packages = array();\n        foreach ($rm->getLocalRepository()->getPackages() as $package) {\n            $packages[(string) $package] = clone $package;\n        }\n        foreach ($packages as $key => $package) {\n            if ($package instanceof AliasPackage) {\n                $alias = (string) $package->getAliasOf();\n                $packages[$key] = new AliasPackage($packages[$alias], $package->getVersion(), $package->getPrettyVersion());\n            }\n        }\n        $rm->setLocalRepository(\n            new InstalledArrayRepository($packages)\n        );\n    }", "code_tokens": ["private", "function", "mockLocalRepositories", "(", "RepositoryManager", "$", "rm", ")", "{", "$", "packages", "=", "array", "(", ")", ";", "foreach", "(", "$", "rm", "->", "getLocalRepository", "(", ")", "->", "getPackages", "(", ")", "as", "$", "package", ")", "{", "$", "packages", "[", "(", "string", ")", "$", "package", "]", "=", "clone", "$", "package", ";", "}", "foreach", "(", "$", "packages", "as", "$", "key", "=>", "$", "package", ")", "{", "if", "(", "$", "package", "instanceof", "AliasPackage", ")", "{", "$", "alias", "=", "(", "string", ")", "$", "package", "->", "getAliasOf", "(", ")", ";", "$", "packages", "[", "$", "key", "]", "=", "new", "AliasPackage", "(", "$", "packages", "[", "$", "alias", "]", ",", "$", "package", "->", "getVersion", "(", ")", ",", "$", "package", "->", "getPrettyVersion", "(", ")", ")", ";", "}", "}", "$", "rm", "->", "setLocalRepository", "(", "new", "InstalledArrayRepository", "(", "$", "packages", ")", ")", ";", "}"], "docstring": "Replace local repositories with InstalledArrayRepository instances\n\nThis is to prevent any accidental modification of the existing repos on disk\n\n@param RepositoryManager $rm", "docstring_tokens": ["Replace", "local", "repositories", "with", "InstalledArrayRepository", "instances"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Installer.php#L1396-L1411", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Installer.php", "func_name": "Installer.setOptimizeAutoloader", "original_string": "public function setOptimizeAutoloader($optimizeAutoloader = false)\n    {\n        $this->optimizeAutoloader = (bool) $optimizeAutoloader;\n        if (!$this->optimizeAutoloader) {\n            // Force classMapAuthoritative off when not optimizing the\n            // autoloader\n            $this->setClassMapAuthoritative(false);\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function setOptimizeAutoloader($optimizeAutoloader = false)\n    {\n        $this->optimizeAutoloader = (bool) $optimizeAutoloader;\n        if (!$this->optimizeAutoloader) {\n            // Force classMapAuthoritative off when not optimizing the\n            // autoloader\n            $this->setClassMapAuthoritative(false);\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setOptimizeAutoloader", "(", "$", "optimizeAutoloader", "=", "false", ")", "{", "$", "this", "->", "optimizeAutoloader", "=", "(", "bool", ")", "$", "optimizeAutoloader", ";", "if", "(", "!", "$", "this", "->", "optimizeAutoloader", ")", "{", "$", "this", "->", "setClassMapAuthoritative", "(", "false", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Whether or not generated autoloader are optimized\n\n@param  bool      $optimizeAutoloader\n@return Installer", "docstring_tokens": ["Whether", "or", "not", "generated", "autoloader", "are", "optimized"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Installer.php#L1501-L1511", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Installer.php", "func_name": "Installer.setClassMapAuthoritative", "original_string": "public function setClassMapAuthoritative($classMapAuthoritative = false)\n    {\n        $this->classMapAuthoritative = (bool) $classMapAuthoritative;\n        if ($this->classMapAuthoritative) {\n            // Force optimizeAutoloader when classmap is authoritative\n            $this->setOptimizeAutoloader(true);\n        }\n\n        return $this;\n    }", "language": "php", "code": "public function setClassMapAuthoritative($classMapAuthoritative = false)\n    {\n        $this->classMapAuthoritative = (bool) $classMapAuthoritative;\n        if ($this->classMapAuthoritative) {\n            // Force optimizeAutoloader when classmap is authoritative\n            $this->setOptimizeAutoloader(true);\n        }\n\n        return $this;\n    }", "code_tokens": ["public", "function", "setClassMapAuthoritative", "(", "$", "classMapAuthoritative", "=", "false", ")", "{", "$", "this", "->", "classMapAuthoritative", "=", "(", "bool", ")", "$", "classMapAuthoritative", ";", "if", "(", "$", "this", "->", "classMapAuthoritative", ")", "{", "$", "this", "->", "setOptimizeAutoloader", "(", "true", ")", ";", "}", "return", "$", "this", ";", "}"], "docstring": "Whether or not generated autoloader considers the class map\nauthoritative.\n\n@param  bool      $classMapAuthoritative\n@return Installer", "docstring_tokens": ["Whether", "or", "not", "generated", "autoloader", "considers", "the", "class", "map", "authoritative", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Installer.php#L1520-L1529", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Cache.php", "func_name": "Cache.copyTo", "original_string": "public function copyTo($file, $target)\n    {\n        if ($this->enabled) {\n            $file = preg_replace('{[^'.$this->whitelist.']}i', '-', $file);\n            if (file_exists($this->root . $file)) {\n                try {\n                    touch($this->root . $file, filemtime($this->root . $file), time());\n                } catch (\\ErrorException $e) {\n                    // fallback in case the above failed due to incorrect ownership\n                    // see https://github.com/composer/composer/issues/4070\n                    Silencer::call('touch', $this->root . $file);\n                }\n\n                $this->io->writeError('Reading '.$this->root . $file.' from cache', true, IOInterface::DEBUG);\n\n                return copy($this->root . $file, $target);\n            }\n        }\n\n        return false;\n    }", "language": "php", "code": "public function copyTo($file, $target)\n    {\n        if ($this->enabled) {\n            $file = preg_replace('{[^'.$this->whitelist.']}i', '-', $file);\n            if (file_exists($this->root . $file)) {\n                try {\n                    touch($this->root . $file, filemtime($this->root . $file), time());\n                } catch (\\ErrorException $e) {\n                    // fallback in case the above failed due to incorrect ownership\n                    // see https://github.com/composer/composer/issues/4070\n                    Silencer::call('touch', $this->root . $file);\n                }\n\n                $this->io->writeError('Reading '.$this->root . $file.' from cache', true, IOInterface::DEBUG);\n\n                return copy($this->root . $file, $target);\n            }\n        }\n\n        return false;\n    }", "code_tokens": ["public", "function", "copyTo", "(", "$", "file", ",", "$", "target", ")", "{", "if", "(", "$", "this", "->", "enabled", ")", "{", "$", "file", "=", "preg_replace", "(", "'{[^'", ".", "$", "this", "->", "whitelist", ".", "']}i'", ",", "'-'", ",", "$", "file", ")", ";", "if", "(", "file_exists", "(", "$", "this", "->", "root", ".", "$", "file", ")", ")", "{", "try", "{", "touch", "(", "$", "this", "->", "root", ".", "$", "file", ",", "filemtime", "(", "$", "this", "->", "root", ".", "$", "file", ")", ",", "time", "(", ")", ")", ";", "}", "catch", "(", "\\", "ErrorException", "$", "e", ")", "{", "Silencer", "::", "call", "(", "'touch'", ",", "$", "this", "->", "root", ".", "$", "file", ")", ";", "}", "$", "this", "->", "io", "->", "writeError", "(", "'Reading '", ".", "$", "this", "->", "root", ".", "$", "file", ".", "' from cache'", ",", "true", ",", "IOInterface", "::", "DEBUG", ")", ";", "return", "copy", "(", "$", "this", "->", "root", ".", "$", "file", ",", "$", "target", ")", ";", "}", "}", "return", "false", ";", "}"], "docstring": "Copy a file out of the cache", "docstring_tokens": ["Copy", "a", "file", "out", "of", "the", "cache"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Cache.php#L150-L170", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Package/Package.php", "func_name": "Package.replaceVersion", "original_string": "public function replaceVersion($version, $prettyVersion)\n    {\n        $this->version = $version;\n        $this->prettyVersion = $prettyVersion;\n\n        $this->stability = VersionParser::parseStability($version);\n        $this->dev = $this->stability === 'dev';\n    }", "language": "php", "code": "public function replaceVersion($version, $prettyVersion)\n    {\n        $this->version = $version;\n        $this->prettyVersion = $prettyVersion;\n\n        $this->stability = VersionParser::parseStability($version);\n        $this->dev = $this->stability === 'dev';\n    }", "code_tokens": ["public", "function", "replaceVersion", "(", "$", "version", ",", "$", "prettyVersion", ")", "{", "$", "this", "->", "version", "=", "$", "version", ";", "$", "this", "->", "prettyVersion", "=", "$", "prettyVersion", ";", "$", "this", "->", "stability", "=", "VersionParser", "::", "parseStability", "(", "$", "version", ")", ";", "$", "this", "->", "dev", "=", "$", "this", "->", "stability", "===", "'dev'", ";", "}"], "docstring": "Replaces current version and pretty version with passed values.\nIt also sets stability.\n\n@param string $version       The package's normalized version\n@param string $prettyVersion The package's non-normalized version", "docstring_tokens": ["Replaces", "current", "version", "and", "pretty", "version", "with", "passed", "values", ".", "It", "also", "sets", "stability", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Package/Package.php#L579-L586", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Package/Locker.php", "func_name": "Locker.getContentHash", "original_string": "public static function getContentHash($composerFileContents)\n    {\n        $content = json_decode($composerFileContents, true);\n\n        $relevantKeys = array(\n            'name',\n            'version',\n            'require',\n            'require-dev',\n            'conflict',\n            'replace',\n            'provide',\n            'minimum-stability',\n            'prefer-stable',\n            'repositories',\n            'extra',\n        );\n\n        $relevantContent = array();\n\n        foreach (array_intersect($relevantKeys, array_keys($content)) as $key) {\n            $relevantContent[$key] = $content[$key];\n        }\n        if (isset($content['config']['platform'])) {\n            $relevantContent['config']['platform'] = $content['config']['platform'];\n        }\n\n        ksort($relevantContent);\n\n        return md5(json_encode($relevantContent));\n    }", "language": "php", "code": "public static function getContentHash($composerFileContents)\n    {\n        $content = json_decode($composerFileContents, true);\n\n        $relevantKeys = array(\n            'name',\n            'version',\n            'require',\n            'require-dev',\n            'conflict',\n            'replace',\n            'provide',\n            'minimum-stability',\n            'prefer-stable',\n            'repositories',\n            'extra',\n        );\n\n        $relevantContent = array();\n\n        foreach (array_intersect($relevantKeys, array_keys($content)) as $key) {\n            $relevantContent[$key] = $content[$key];\n        }\n        if (isset($content['config']['platform'])) {\n            $relevantContent['config']['platform'] = $content['config']['platform'];\n        }\n\n        ksort($relevantContent);\n\n        return md5(json_encode($relevantContent));\n    }", "code_tokens": ["public", "static", "function", "getContentHash", "(", "$", "composerFileContents", ")", "{", "$", "content", "=", "json_decode", "(", "$", "composerFileContents", ",", "true", ")", ";", "$", "relevantKeys", "=", "array", "(", "'name'", ",", "'version'", ",", "'require'", ",", "'require-dev'", ",", "'conflict'", ",", "'replace'", ",", "'provide'", ",", "'minimum-stability'", ",", "'prefer-stable'", ",", "'repositories'", ",", "'extra'", ",", ")", ";", "$", "relevantContent", "=", "array", "(", ")", ";", "foreach", "(", "array_intersect", "(", "$", "relevantKeys", ",", "array_keys", "(", "$", "content", ")", ")", "as", "$", "key", ")", "{", "$", "relevantContent", "[", "$", "key", "]", "=", "$", "content", "[", "$", "key", "]", ";", "}", "if", "(", "isset", "(", "$", "content", "[", "'config'", "]", "[", "'platform'", "]", ")", ")", "{", "$", "relevantContent", "[", "'config'", "]", "[", "'platform'", "]", "=", "$", "content", "[", "'config'", "]", "[", "'platform'", "]", ";", "}", "ksort", "(", "$", "relevantContent", ")", ";", "return", "md5", "(", "json_encode", "(", "$", "relevantContent", ")", ")", ";", "}"], "docstring": "Returns the md5 hash of the sorted content of the composer file.\n\n@param string $composerFileContents The contents of the composer file.\n\n@return string", "docstring_tokens": ["Returns", "the", "md5", "hash", "of", "the", "sorted", "content", "of", "the", "composer", "file", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Package/Locker.php#L72-L102", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Package/Locker.php", "func_name": "Locker.getLockedRepository", "original_string": "public function getLockedRepository($withDevReqs = false)\n    {\n        $lockData = $this->getLockData();\n        $packages = new ArrayRepository();\n\n        $lockedPackages = $lockData['packages'];\n        if ($withDevReqs) {\n            if (isset($lockData['packages-dev'])) {\n                $lockedPackages = array_merge($lockedPackages, $lockData['packages-dev']);\n            } else {\n                throw new \\RuntimeException('The lock file does not contain require-dev information, run install with the --no-dev option or run update to install those packages.');\n            }\n        }\n\n        if (empty($lockedPackages)) {\n            return $packages;\n        }\n\n        if (isset($lockedPackages[0]['name'])) {\n            foreach ($lockedPackages as $info) {\n                $packages->addPackage($this->loader->load($info));\n            }\n\n            return $packages;\n        }\n\n        throw new \\RuntimeException('Your composer.lock was created before 2012-09-15, and is not supported anymore. Run \"composer update\" to generate a new one.');\n    }", "language": "php", "code": "public function getLockedRepository($withDevReqs = false)\n    {\n        $lockData = $this->getLockData();\n        $packages = new ArrayRepository();\n\n        $lockedPackages = $lockData['packages'];\n        if ($withDevReqs) {\n            if (isset($lockData['packages-dev'])) {\n                $lockedPackages = array_merge($lockedPackages, $lockData['packages-dev']);\n            } else {\n                throw new \\RuntimeException('The lock file does not contain require-dev information, run install with the --no-dev option or run update to install those packages.');\n            }\n        }\n\n        if (empty($lockedPackages)) {\n            return $packages;\n        }\n\n        if (isset($lockedPackages[0]['name'])) {\n            foreach ($lockedPackages as $info) {\n                $packages->addPackage($this->loader->load($info));\n            }\n\n            return $packages;\n        }\n\n        throw new \\RuntimeException('Your composer.lock was created before 2012-09-15, and is not supported anymore. Run \"composer update\" to generate a new one.');\n    }", "code_tokens": ["public", "function", "getLockedRepository", "(", "$", "withDevReqs", "=", "false", ")", "{", "$", "lockData", "=", "$", "this", "->", "getLockData", "(", ")", ";", "$", "packages", "=", "new", "ArrayRepository", "(", ")", ";", "$", "lockedPackages", "=", "$", "lockData", "[", "'packages'", "]", ";", "if", "(", "$", "withDevReqs", ")", "{", "if", "(", "isset", "(", "$", "lockData", "[", "'packages-dev'", "]", ")", ")", "{", "$", "lockedPackages", "=", "array_merge", "(", "$", "lockedPackages", ",", "$", "lockData", "[", "'packages-dev'", "]", ")", ";", "}", "else", "{", "throw", "new", "\\", "RuntimeException", "(", "'The lock file does not contain require-dev information, run install with the --no-dev option or run update to install those packages.'", ")", ";", "}", "}", "if", "(", "empty", "(", "$", "lockedPackages", ")", ")", "{", "return", "$", "packages", ";", "}", "if", "(", "isset", "(", "$", "lockedPackages", "[", "0", "]", "[", "'name'", "]", ")", ")", "{", "foreach", "(", "$", "lockedPackages", "as", "$", "info", ")", "{", "$", "packages", "->", "addPackage", "(", "$", "this", "->", "loader", "->", "load", "(", "$", "info", ")", ")", ";", "}", "return", "$", "packages", ";", "}", "throw", "new", "\\", "RuntimeException", "(", "'Your composer.lock was created before 2012-09-15, and is not supported anymore. Run \"composer update\" to generate a new one.'", ")", ";", "}"], "docstring": "Searches and returns an array of locked packages, retrieved from registered repositories.\n\n@param  bool                                     $withDevReqs true to retrieve the locked dev packages\n@throws \\RuntimeException\n@return \\Composer\\Repository\\RepositoryInterface", "docstring_tokens": ["Searches", "and", "returns", "an", "array", "of", "locked", "packages", "retrieved", "from", "registered", "repositories", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Package/Locker.php#L150-L177", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Package/Locker.php", "func_name": "Locker.getPackageTime", "original_string": "private function getPackageTime(PackageInterface $package)\n    {\n        if (!function_exists('proc_open')) {\n            return null;\n        }\n\n        $path = realpath($this->installationManager->getInstallPath($package));\n        $sourceType = $package->getSourceType();\n        $datetime = null;\n\n        if ($path && in_array($sourceType, array('git', 'hg'))) {\n            $sourceRef = $package->getSourceReference() ?: $package->getDistReference();\n            switch ($sourceType) {\n                case 'git':\n                    GitUtil::cleanEnv();\n\n                    if (0 === $this->process->execute('git log -n1 --pretty=%ct '.ProcessExecutor::escape($sourceRef), $output, $path) && preg_match('{^\\s*\\d+\\s*$}', $output)) {\n                        $datetime = new \\DateTime('@'.trim($output), new \\DateTimeZone('UTC'));\n                    }\n                    break;\n\n                case 'hg':\n                    if (0 === $this->process->execute('hg log --template \"{date|hgdate}\" -r '.ProcessExecutor::escape($sourceRef), $output, $path) && preg_match('{^\\s*(\\d+)\\s*}', $output, $match)) {\n                        $datetime = new \\DateTime('@'.$match[1], new \\DateTimeZone('UTC'));\n                    }\n                    break;\n            }\n        }\n\n        return $datetime ? $datetime->format(DATE_RFC3339) : null;\n    }", "language": "php", "code": "private function getPackageTime(PackageInterface $package)\n    {\n        if (!function_exists('proc_open')) {\n            return null;\n        }\n\n        $path = realpath($this->installationManager->getInstallPath($package));\n        $sourceType = $package->getSourceType();\n        $datetime = null;\n\n        if ($path && in_array($sourceType, array('git', 'hg'))) {\n            $sourceRef = $package->getSourceReference() ?: $package->getDistReference();\n            switch ($sourceType) {\n                case 'git':\n                    GitUtil::cleanEnv();\n\n                    if (0 === $this->process->execute('git log -n1 --pretty=%ct '.ProcessExecutor::escape($sourceRef), $output, $path) && preg_match('{^\\s*\\d+\\s*$}', $output)) {\n                        $datetime = new \\DateTime('@'.trim($output), new \\DateTimeZone('UTC'));\n                    }\n                    break;\n\n                case 'hg':\n                    if (0 === $this->process->execute('hg log --template \"{date|hgdate}\" -r '.ProcessExecutor::escape($sourceRef), $output, $path) && preg_match('{^\\s*(\\d+)\\s*}', $output, $match)) {\n                        $datetime = new \\DateTime('@'.$match[1], new \\DateTimeZone('UTC'));\n                    }\n                    break;\n            }\n        }\n\n        return $datetime ? $datetime->format(DATE_RFC3339) : null;\n    }", "code_tokens": ["private", "function", "getPackageTime", "(", "PackageInterface", "$", "package", ")", "{", "if", "(", "!", "function_exists", "(", "'proc_open'", ")", ")", "{", "return", "null", ";", "}", "$", "path", "=", "realpath", "(", "$", "this", "->", "installationManager", "->", "getInstallPath", "(", "$", "package", ")", ")", ";", "$", "sourceType", "=", "$", "package", "->", "getSourceType", "(", ")", ";", "$", "datetime", "=", "null", ";", "if", "(", "$", "path", "&&", "in_array", "(", "$", "sourceType", ",", "array", "(", "'git'", ",", "'hg'", ")", ")", ")", "{", "$", "sourceRef", "=", "$", "package", "->", "getSourceReference", "(", ")", "?", ":", "$", "package", "->", "getDistReference", "(", ")", ";", "switch", "(", "$", "sourceType", ")", "{", "case", "'git'", ":", "GitUtil", "::", "cleanEnv", "(", ")", ";", "if", "(", "0", "===", "$", "this", "->", "process", "->", "execute", "(", "'git log -n1 --pretty=%ct '", ".", "ProcessExecutor", "::", "escape", "(", "$", "sourceRef", ")", ",", "$", "output", ",", "$", "path", ")", "&&", "preg_match", "(", "'{^\\s*\\d+\\s*$}'", ",", "$", "output", ")", ")", "{", "$", "datetime", "=", "new", "\\", "DateTime", "(", "'@'", ".", "trim", "(", "$", "output", ")", ",", "new", "\\", "DateTimeZone", "(", "'UTC'", ")", ")", ";", "}", "break", ";", "case", "'hg'", ":", "if", "(", "0", "===", "$", "this", "->", "process", "->", "execute", "(", "'hg log --template \"{date|hgdate}\" -r '", ".", "ProcessExecutor", "::", "escape", "(", "$", "sourceRef", ")", ",", "$", "output", ",", "$", "path", ")", "&&", "preg_match", "(", "'{^\\s*(\\d+)\\s*}'", ",", "$", "output", ",", "$", "match", ")", ")", "{", "$", "datetime", "=", "new", "\\", "DateTime", "(", "'@'", ".", "$", "match", "[", "1", "]", ",", "new", "\\", "DateTimeZone", "(", "'UTC'", ")", ")", ";", "}", "break", ";", "}", "}", "return", "$", "datetime", "?", "$", "datetime", "->", "format", "(", "DATE_RFC3339", ")", ":", "null", ";", "}"], "docstring": "Returns the packages's datetime for its source reference.\n\n@param  PackageInterface $package The package to scan.\n@return string|null      The formatted datetime or null if none was found.", "docstring_tokens": ["Returns", "the", "packages", "s", "datetime", "for", "its", "source", "reference", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Package/Locker.php#L407-L437", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Repository/Vcs/BitbucketDriver.php", "func_name": "BitbucketDriver.getRepoData", "original_string": "protected function getRepoData()\n    {\n        $resource = sprintf(\n            'https://api.bitbucket.org/2.0/repositories/%s/%s?%s',\n            $this->owner,\n            $this->repository,\n            http_build_query(\n                array('fields' => '-project,-owner'),\n                null,\n                '&'\n            )\n        );\n\n        $repoData = JsonFile::parseJson($this->getContentsWithOAuthCredentials($resource, true), $resource);\n        if ($this->fallbackDriver) {\n            return false;\n        }\n        $this->parseCloneUrls($repoData['links']['clone']);\n\n        $this->hasIssues = !empty($repoData['has_issues']);\n        $this->branchesUrl = $repoData['links']['branches']['href'];\n        $this->tagsUrl = $repoData['links']['tags']['href'];\n        $this->homeUrl = $repoData['links']['html']['href'];\n        $this->website = $repoData['website'];\n        $this->vcsType = $repoData['scm'];\n\n        return true;\n    }", "language": "php", "code": "protected function getRepoData()\n    {\n        $resource = sprintf(\n            'https://api.bitbucket.org/2.0/repositories/%s/%s?%s',\n            $this->owner,\n            $this->repository,\n            http_build_query(\n                array('fields' => '-project,-owner'),\n                null,\n                '&'\n            )\n        );\n\n        $repoData = JsonFile::parseJson($this->getContentsWithOAuthCredentials($resource, true), $resource);\n        if ($this->fallbackDriver) {\n            return false;\n        }\n        $this->parseCloneUrls($repoData['links']['clone']);\n\n        $this->hasIssues = !empty($repoData['has_issues']);\n        $this->branchesUrl = $repoData['links']['branches']['href'];\n        $this->tagsUrl = $repoData['links']['tags']['href'];\n        $this->homeUrl = $repoData['links']['html']['href'];\n        $this->website = $repoData['website'];\n        $this->vcsType = $repoData['scm'];\n\n        return true;\n    }", "code_tokens": ["protected", "function", "getRepoData", "(", ")", "{", "$", "resource", "=", "sprintf", "(", "'https://api.bitbucket.org/2.0/repositories/%s/%s?%s'", ",", "$", "this", "->", "owner", ",", "$", "this", "->", "repository", ",", "http_build_query", "(", "array", "(", "'fields'", "=>", "'-project,-owner'", ")", ",", "null", ",", "'&'", ")", ")", ";", "$", "repoData", "=", "JsonFile", "::", "parseJson", "(", "$", "this", "->", "getContentsWithOAuthCredentials", "(", "$", "resource", ",", "true", ")", ",", "$", "resource", ")", ";", "if", "(", "$", "this", "->", "fallbackDriver", ")", "{", "return", "false", ";", "}", "$", "this", "->", "parseCloneUrls", "(", "$", "repoData", "[", "'links'", "]", "[", "'clone'", "]", ")", ";", "$", "this", "->", "hasIssues", "=", "!", "empty", "(", "$", "repoData", "[", "'has_issues'", "]", ")", ";", "$", "this", "->", "branchesUrl", "=", "$", "repoData", "[", "'links'", "]", "[", "'branches'", "]", "[", "'href'", "]", ";", "$", "this", "->", "tagsUrl", "=", "$", "repoData", "[", "'links'", "]", "[", "'tags'", "]", "[", "'href'", "]", ";", "$", "this", "->", "homeUrl", "=", "$", "repoData", "[", "'links'", "]", "[", "'html'", "]", "[", "'href'", "]", ";", "$", "this", "->", "website", "=", "$", "repoData", "[", "'website'", "]", ";", "$", "this", "->", "vcsType", "=", "$", "repoData", "[", "'scm'", "]", ";", "return", "true", ";", "}"], "docstring": "Attempts to fetch the repository data via the BitBucket API and\nsets some parameters which are used in other methods\n\n@return bool", "docstring_tokens": ["Attempts", "to", "fetch", "the", "repository", "data", "via", "the", "BitBucket", "API", "and", "sets", "some", "parameters", "which", "are", "used", "in", "other", "methods"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Repository/Vcs/BitbucketDriver.php#L82-L109", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/DependencyResolver/Solver.php", "func_name": "Solver.propagate", "original_string": "protected function propagate($level)\n    {\n        while ($this->decisions->validOffset($this->propagateIndex)) {\n            $decision = $this->decisions->atOffset($this->propagateIndex);\n\n            $conflict = $this->watchGraph->propagateLiteral(\n                $decision[Decisions::DECISION_LITERAL],\n                $level,\n                $this->decisions\n            );\n\n            $this->propagateIndex++;\n\n            if ($conflict) {\n                return $conflict;\n            }\n        }\n\n        return null;\n    }", "language": "php", "code": "protected function propagate($level)\n    {\n        while ($this->decisions->validOffset($this->propagateIndex)) {\n            $decision = $this->decisions->atOffset($this->propagateIndex);\n\n            $conflict = $this->watchGraph->propagateLiteral(\n                $decision[Decisions::DECISION_LITERAL],\n                $level,\n                $this->decisions\n            );\n\n            $this->propagateIndex++;\n\n            if ($conflict) {\n                return $conflict;\n            }\n        }\n\n        return null;\n    }", "code_tokens": ["protected", "function", "propagate", "(", "$", "level", ")", "{", "while", "(", "$", "this", "->", "decisions", "->", "validOffset", "(", "$", "this", "->", "propagateIndex", ")", ")", "{", "$", "decision", "=", "$", "this", "->", "decisions", "->", "atOffset", "(", "$", "this", "->", "propagateIndex", ")", ";", "$", "conflict", "=", "$", "this", "->", "watchGraph", "->", "propagateLiteral", "(", "$", "decision", "[", "Decisions", "::", "DECISION_LITERAL", "]", ",", "$", "level", ",", "$", "this", "->", "decisions", ")", ";", "$", "this", "->", "propagateIndex", "++", ";", "if", "(", "$", "conflict", ")", "{", "return", "$", "conflict", ";", "}", "}", "return", "null", ";", "}"], "docstring": "Makes a decision and propagates it to all rules.\n\nEvaluates each term affected by the decision (linked through watches)\nIf we find unit rules we make new decisions based on them\n\n@param  int       $level\n@return Rule|null A rule on conflict, otherwise null.", "docstring_tokens": ["Makes", "a", "decision", "and", "propagates", "it", "to", "all", "rules", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/DependencyResolver/Solver.php#L260-L279", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/DependencyResolver/Solver.php", "func_name": "Solver.revert", "original_string": "private function revert($level)\n    {\n        while (!$this->decisions->isEmpty()) {\n            $literal = $this->decisions->lastLiteral();\n\n            if ($this->decisions->undecided($literal)) {\n                break;\n            }\n\n            $decisionLevel = $this->decisions->decisionLevel($literal);\n\n            if ($decisionLevel <= $level) {\n                break;\n            }\n\n            $this->decisions->revertLast();\n            $this->propagateIndex = count($this->decisions);\n        }\n\n        while (!empty($this->branches) && $this->branches[count($this->branches) - 1][self::BRANCH_LEVEL] >= $level) {\n            array_pop($this->branches);\n        }\n    }", "language": "php", "code": "private function revert($level)\n    {\n        while (!$this->decisions->isEmpty()) {\n            $literal = $this->decisions->lastLiteral();\n\n            if ($this->decisions->undecided($literal)) {\n                break;\n            }\n\n            $decisionLevel = $this->decisions->decisionLevel($literal);\n\n            if ($decisionLevel <= $level) {\n                break;\n            }\n\n            $this->decisions->revertLast();\n            $this->propagateIndex = count($this->decisions);\n        }\n\n        while (!empty($this->branches) && $this->branches[count($this->branches) - 1][self::BRANCH_LEVEL] >= $level) {\n            array_pop($this->branches);\n        }\n    }", "code_tokens": ["private", "function", "revert", "(", "$", "level", ")", "{", "while", "(", "!", "$", "this", "->", "decisions", "->", "isEmpty", "(", ")", ")", "{", "$", "literal", "=", "$", "this", "->", "decisions", "->", "lastLiteral", "(", ")", ";", "if", "(", "$", "this", "->", "decisions", "->", "undecided", "(", "$", "literal", ")", ")", "{", "break", ";", "}", "$", "decisionLevel", "=", "$", "this", "->", "decisions", "->", "decisionLevel", "(", "$", "literal", ")", ";", "if", "(", "$", "decisionLevel", "<=", "$", "level", ")", "{", "break", ";", "}", "$", "this", "->", "decisions", "->", "revertLast", "(", ")", ";", "$", "this", "->", "propagateIndex", "=", "count", "(", "$", "this", "->", "decisions", ")", ";", "}", "while", "(", "!", "empty", "(", "$", "this", "->", "branches", ")", "&&", "$", "this", "->", "branches", "[", "count", "(", "$", "this", "->", "branches", ")", "-", "1", "]", "[", "self", "::", "BRANCH_LEVEL", "]", ">=", "$", "level", ")", "{", "array_pop", "(", "$", "this", "->", "branches", ")", ";", "}", "}"], "docstring": "Reverts a decision at the given level.\n\n@param int $level", "docstring_tokens": ["Reverts", "a", "decision", "at", "the", "given", "level", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/DependencyResolver/Solver.php#L286-L308", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Repository/ArrayRepository.php", "func_name": "ArrayRepository.addPackage", "original_string": "public function addPackage(PackageInterface $package)\n    {\n        if (null === $this->packages) {\n            $this->initialize();\n        }\n        $package->setRepository($this);\n        $this->packages[] = $package;\n\n        if ($package instanceof AliasPackage) {\n            $aliasedPackage = $package->getAliasOf();\n            if (null === $aliasedPackage->getRepository()) {\n                $this->addPackage($aliasedPackage);\n            }\n        }\n    }", "language": "php", "code": "public function addPackage(PackageInterface $package)\n    {\n        if (null === $this->packages) {\n            $this->initialize();\n        }\n        $package->setRepository($this);\n        $this->packages[] = $package;\n\n        if ($package instanceof AliasPackage) {\n            $aliasedPackage = $package->getAliasOf();\n            if (null === $aliasedPackage->getRepository()) {\n                $this->addPackage($aliasedPackage);\n            }\n        }\n    }", "code_tokens": ["public", "function", "addPackage", "(", "PackageInterface", "$", "package", ")", "{", "if", "(", "null", "===", "$", "this", "->", "packages", ")", "{", "$", "this", "->", "initialize", "(", ")", ";", "}", "$", "package", "->", "setRepository", "(", "$", "this", ")", ";", "$", "this", "->", "packages", "[", "]", "=", "$", "package", ";", "if", "(", "$", "package", "instanceof", "AliasPackage", ")", "{", "$", "aliasedPackage", "=", "$", "package", "->", "getAliasOf", "(", ")", ";", "if", "(", "null", "===", "$", "aliasedPackage", "->", "getRepository", "(", ")", ")", "{", "$", "this", "->", "addPackage", "(", "$", "aliasedPackage", ")", ";", "}", "}", "}"], "docstring": "Adds a new package to the repository\n\n@param PackageInterface $package", "docstring_tokens": ["Adds", "a", "new", "package", "to", "the", "repository"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Repository/ArrayRepository.php#L140-L154", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Repository/ArrayRepository.php", "func_name": "ArrayRepository.removePackage", "original_string": "public function removePackage(PackageInterface $package)\n    {\n        $packageId = $package->getUniqueName();\n\n        foreach ($this->getPackages() as $key => $repoPackage) {\n            if ($packageId === $repoPackage->getUniqueName()) {\n                array_splice($this->packages, $key, 1);\n\n                return;\n            }\n        }\n    }", "language": "php", "code": "public function removePackage(PackageInterface $package)\n    {\n        $packageId = $package->getUniqueName();\n\n        foreach ($this->getPackages() as $key => $repoPackage) {\n            if ($packageId === $repoPackage->getUniqueName()) {\n                array_splice($this->packages, $key, 1);\n\n                return;\n            }\n        }\n    }", "code_tokens": ["public", "function", "removePackage", "(", "PackageInterface", "$", "package", ")", "{", "$", "packageId", "=", "$", "package", "->", "getUniqueName", "(", ")", ";", "foreach", "(", "$", "this", "->", "getPackages", "(", ")", "as", "$", "key", "=>", "$", "repoPackage", ")", "{", "if", "(", "$", "packageId", "===", "$", "repoPackage", "->", "getUniqueName", "(", ")", ")", "{", "array_splice", "(", "$", "this", "->", "packages", ",", "$", "key", ",", "1", ")", ";", "return", ";", "}", "}", "}"], "docstring": "Removes package from repository.\n\n@param PackageInterface $package package instance", "docstring_tokens": ["Removes", "package", "from", "repository", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Repository/ArrayRepository.php#L166-L177", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Util/RemoteFilesystem.php", "func_name": "RemoteFilesystem.copy", "original_string": "public function copy($originUrl, $fileUrl, $fileName, $progress = true, $options = array())\n    {\n        return $this->get($originUrl, $fileUrl, $options, $fileName, $progress);\n    }", "language": "php", "code": "public function copy($originUrl, $fileUrl, $fileName, $progress = true, $options = array())\n    {\n        return $this->get($originUrl, $fileUrl, $options, $fileName, $progress);\n    }", "code_tokens": ["public", "function", "copy", "(", "$", "originUrl", ",", "$", "fileUrl", ",", "$", "fileName", ",", "$", "progress", "=", "true", ",", "$", "options", "=", "array", "(", ")", ")", "{", "return", "$", "this", "->", "get", "(", "$", "originUrl", ",", "$", "fileUrl", ",", "$", "options", ",", "$", "fileName", ",", "$", "progress", ")", ";", "}"], "docstring": "Copy the remote file in local.\n\n@param string $originUrl The origin URL\n@param string $fileUrl   The file URL\n@param string $fileName  the local filename\n@param bool   $progress  Display the progression\n@param array  $options   Additional context options\n\n@return bool true", "docstring_tokens": ["Copy", "the", "remote", "file", "in", "local", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Util/RemoteFilesystem.php#L87-L90", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Util/RemoteFilesystem.php", "func_name": "RemoteFilesystem.getContents", "original_string": "public function getContents($originUrl, $fileUrl, $progress = true, $options = array())\n    {\n        return $this->get($originUrl, $fileUrl, $options, null, $progress);\n    }", "language": "php", "code": "public function getContents($originUrl, $fileUrl, $progress = true, $options = array())\n    {\n        return $this->get($originUrl, $fileUrl, $options, null, $progress);\n    }", "code_tokens": ["public", "function", "getContents", "(", "$", "originUrl", ",", "$", "fileUrl", ",", "$", "progress", "=", "true", ",", "$", "options", "=", "array", "(", ")", ")", "{", "return", "$", "this", "->", "get", "(", "$", "originUrl", ",", "$", "fileUrl", ",", "$", "options", ",", "null", ",", "$", "progress", ")", ";", "}"], "docstring": "Get the content.\n\n@param string $originUrl The origin URL\n@param string $fileUrl   The file URL\n@param bool   $progress  Display the progression\n@param array  $options   Additional context options\n\n@return bool|string The content", "docstring_tokens": ["Get", "the", "content", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Util/RemoteFilesystem.php#L102-L105", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Util/RemoteFilesystem.php", "func_name": "RemoteFilesystem.getRemoteContents", "original_string": "protected function getRemoteContents($originUrl, $fileUrl, $context, array &$responseHeaders = null)\n    {\n        try {\n            $e = null;\n            $result = file_get_contents($fileUrl, false, $context);\n        } catch (\\Throwable $e) {\n        } catch (\\Exception $e) {\n        }\n\n        $responseHeaders = isset($http_response_header) ? $http_response_header : array();\n\n        if (null !== $e) {\n            throw $e;\n        }\n\n        return $result;\n    }", "language": "php", "code": "protected function getRemoteContents($originUrl, $fileUrl, $context, array &$responseHeaders = null)\n    {\n        try {\n            $e = null;\n            $result = file_get_contents($fileUrl, false, $context);\n        } catch (\\Throwable $e) {\n        } catch (\\Exception $e) {\n        }\n\n        $responseHeaders = isset($http_response_header) ? $http_response_header : array();\n\n        if (null !== $e) {\n            throw $e;\n        }\n\n        return $result;\n    }", "code_tokens": ["protected", "function", "getRemoteContents", "(", "$", "originUrl", ",", "$", "fileUrl", ",", "$", "context", ",", "array", "&", "$", "responseHeaders", "=", "null", ")", "{", "try", "{", "$", "e", "=", "null", ";", "$", "result", "=", "file_get_contents", "(", "$", "fileUrl", ",", "false", ",", "$", "context", ")", ";", "}", "catch", "(", "\\", "Throwable", "$", "e", ")", "{", "}", "catch", "(", "\\", "Exception", "$", "e", ")", "{", "}", "$", "responseHeaders", "=", "isset", "(", "$", "http_response_header", ")", "?", "$", "http_response_header", ":", "array", "(", ")", ";", "if", "(", "null", "!==", "$", "e", ")", "{", "throw", "$", "e", ";", "}", "return", "$", "result", ";", "}"], "docstring": "Get contents of remote URL.\n\n@param string   $originUrl The origin URL\n@param string   $fileUrl   The file URL\n@param resource $context   The stream context\n\n@return string|false The response contents or false on failure", "docstring_tokens": ["Get", "contents", "of", "remote", "URL", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Util/RemoteFilesystem.php#L590-L606", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Repository/FilesystemRepository.php", "func_name": "FilesystemRepository.write", "original_string": "public function write()\n    {\n        $data = array();\n        $dumper = new ArrayDumper();\n\n        foreach ($this->getCanonicalPackages() as $package) {\n            $data[] = $dumper->dump($package);\n        }\n\n        usort($data, function ($a, $b) {\n            return strcmp($a['name'], $b['name']);\n        });\n\n        $this->file->write($data);\n    }", "language": "php", "code": "public function write()\n    {\n        $data = array();\n        $dumper = new ArrayDumper();\n\n        foreach ($this->getCanonicalPackages() as $package) {\n            $data[] = $dumper->dump($package);\n        }\n\n        usort($data, function ($a, $b) {\n            return strcmp($a['name'], $b['name']);\n        });\n\n        $this->file->write($data);\n    }", "code_tokens": ["public", "function", "write", "(", ")", "{", "$", "data", "=", "array", "(", ")", ";", "$", "dumper", "=", "new", "ArrayDumper", "(", ")", ";", "foreach", "(", "$", "this", "->", "getCanonicalPackages", "(", ")", "as", "$", "package", ")", "{", "$", "data", "[", "]", "=", "$", "dumper", "->", "dump", "(", "$", "package", ")", ";", "}", "usort", "(", "$", "data", ",", "function", "(", "$", "a", ",", "$", "b", ")", "{", "return", "strcmp", "(", "$", "a", "[", "'name'", "]", ",", "$", "b", "[", "'name'", "]", ")", ";", "}", ")", ";", "$", "this", "->", "file", "->", "write", "(", "$", "data", ")", ";", "}"], "docstring": "Writes writable repository.", "docstring_tokens": ["Writes", "writable", "repository", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Repository/FilesystemRepository.php#L82-L96", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Util/ErrorHandler.php", "func_name": "ErrorHandler.register", "original_string": "public static function register(IOInterface $io = null)\n    {\n        set_error_handler(array(__CLASS__, 'handle'));\n        error_reporting(E_ALL | E_STRICT);\n        self::$io = $io;\n    }", "language": "php", "code": "public static function register(IOInterface $io = null)\n    {\n        set_error_handler(array(__CLASS__, 'handle'));\n        error_reporting(E_ALL | E_STRICT);\n        self::$io = $io;\n    }", "code_tokens": ["public", "static", "function", "register", "(", "IOInterface", "$", "io", "=", "null", ")", "{", "set_error_handler", "(", "array", "(", "__CLASS__", ",", "'handle'", ")", ")", ";", "error_reporting", "(", "E_ALL", "|", "E_STRICT", ")", ";", "self", "::", "$", "io", "=", "$", "io", ";", "}"], "docstring": "Register error handler.\n\n@param IOInterface|null $io", "docstring_tokens": ["Register", "error", "handler", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Util/ErrorHandler.php#L73-L78", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Command/LicensesCommand.php", "func_name": "LicensesCommand.filterRequiredPackages", "original_string": "private function filterRequiredPackages(RepositoryInterface $repo, PackageInterface $package, $bucket = array())\n    {\n        $requires = array_keys($package->getRequires());\n\n        $packageListNames = array_keys($bucket);\n        $packages = array_filter(\n            $repo->getPackages(),\n            function ($package) use ($requires, $packageListNames) {\n                return in_array($package->getName(), $requires) && !in_array($package->getName(), $packageListNames);\n            }\n        );\n\n        $bucket = $this->appendPackages($packages, $bucket);\n\n        foreach ($packages as $package) {\n            $bucket = $this->filterRequiredPackages($repo, $package, $bucket);\n        }\n\n        return $bucket;\n    }", "language": "php", "code": "private function filterRequiredPackages(RepositoryInterface $repo, PackageInterface $package, $bucket = array())\n    {\n        $requires = array_keys($package->getRequires());\n\n        $packageListNames = array_keys($bucket);\n        $packages = array_filter(\n            $repo->getPackages(),\n            function ($package) use ($requires, $packageListNames) {\n                return in_array($package->getName(), $requires) && !in_array($package->getName(), $packageListNames);\n            }\n        );\n\n        $bucket = $this->appendPackages($packages, $bucket);\n\n        foreach ($packages as $package) {\n            $bucket = $this->filterRequiredPackages($repo, $package, $bucket);\n        }\n\n        return $bucket;\n    }", "code_tokens": ["private", "function", "filterRequiredPackages", "(", "RepositoryInterface", "$", "repo", ",", "PackageInterface", "$", "package", ",", "$", "bucket", "=", "array", "(", ")", ")", "{", "$", "requires", "=", "array_keys", "(", "$", "package", "->", "getRequires", "(", ")", ")", ";", "$", "packageListNames", "=", "array_keys", "(", "$", "bucket", ")", ";", "$", "packages", "=", "array_filter", "(", "$", "repo", "->", "getPackages", "(", ")", ",", "function", "(", "$", "package", ")", "use", "(", "$", "requires", ",", "$", "packageListNames", ")", "{", "return", "in_array", "(", "$", "package", "->", "getName", "(", ")", ",", "$", "requires", ")", "&&", "!", "in_array", "(", "$", "package", "->", "getName", "(", ")", ",", "$", "packageListNames", ")", ";", "}", ")", ";", "$", "bucket", "=", "$", "this", "->", "appendPackages", "(", "$", "packages", ",", "$", "bucket", ")", ";", "foreach", "(", "$", "packages", "as", "$", "package", ")", "{", "$", "bucket", "=", "$", "this", "->", "filterRequiredPackages", "(", "$", "repo", ",", "$", "package", ",", "$", "bucket", ")", ";", "}", "return", "$", "bucket", ";", "}"], "docstring": "Find package requires and child requires\n\n@param  RepositoryInterface $repo\n@param  PackageInterface    $package\n@param  array               $bucket\n@return array", "docstring_tokens": ["Find", "package", "requires", "and", "child", "requires"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Command/LicensesCommand.php#L123-L142", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Command/LicensesCommand.php", "func_name": "LicensesCommand.appendPackages", "original_string": "public function appendPackages(array $packages, array $bucket)\n    {\n        foreach ($packages as $package) {\n            $bucket[$package->getName()] = $package;\n        }\n\n        return $bucket;\n    }", "language": "php", "code": "public function appendPackages(array $packages, array $bucket)\n    {\n        foreach ($packages as $package) {\n            $bucket[$package->getName()] = $package;\n        }\n\n        return $bucket;\n    }", "code_tokens": ["public", "function", "appendPackages", "(", "array", "$", "packages", ",", "array", "$", "bucket", ")", "{", "foreach", "(", "$", "packages", "as", "$", "package", ")", "{", "$", "bucket", "[", "$", "package", "->", "getName", "(", ")", "]", "=", "$", "package", ";", "}", "return", "$", "bucket", ";", "}"], "docstring": "Adds packages to the package list\n\n@param  array $packages the list of packages to add\n@param  array $bucket   the list to add packages to\n@return array", "docstring_tokens": ["Adds", "packages", "to", "the", "package", "list"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Command/LicensesCommand.php#L151-L158", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Package/Archiver/HgExcludeFilter.php", "func_name": "HgExcludeFilter.parseHgIgnoreLine", "original_string": "public function parseHgIgnoreLine($line)\n    {\n        if (preg_match('#^syntax\\s*:\\s*(glob|regexp)$#', $line, $matches)) {\n            if ($matches[1] === 'glob') {\n                $this->patternMode = self::HG_IGNORE_GLOB;\n            } else {\n                $this->patternMode = self::HG_IGNORE_REGEX;\n            }\n\n            return null;\n        }\n\n        if ($this->patternMode == self::HG_IGNORE_GLOB) {\n            return $this->patternFromGlob($line);\n        }\n\n        return $this->patternFromRegex($line);\n    }", "language": "php", "code": "public function parseHgIgnoreLine($line)\n    {\n        if (preg_match('#^syntax\\s*:\\s*(glob|regexp)$#', $line, $matches)) {\n            if ($matches[1] === 'glob') {\n                $this->patternMode = self::HG_IGNORE_GLOB;\n            } else {\n                $this->patternMode = self::HG_IGNORE_REGEX;\n            }\n\n            return null;\n        }\n\n        if ($this->patternMode == self::HG_IGNORE_GLOB) {\n            return $this->patternFromGlob($line);\n        }\n\n        return $this->patternFromRegex($line);\n    }", "code_tokens": ["public", "function", "parseHgIgnoreLine", "(", "$", "line", ")", "{", "if", "(", "preg_match", "(", "'#^syntax\\s*:\\s*(glob|regexp)$#'", ",", "$", "line", ",", "$", "matches", ")", ")", "{", "if", "(", "$", "matches", "[", "1", "]", "===", "'glob'", ")", "{", "$", "this", "->", "patternMode", "=", "self", "::", "HG_IGNORE_GLOB", ";", "}", "else", "{", "$", "this", "->", "patternMode", "=", "self", "::", "HG_IGNORE_REGEX", ";", "}", "return", "null", ";", "}", "if", "(", "$", "this", "->", "patternMode", "==", "self", "::", "HG_IGNORE_GLOB", ")", "{", "return", "$", "this", "->", "patternFromGlob", "(", "$", "line", ")", ";", "}", "return", "$", "this", "->", "patternFromRegex", "(", "$", "line", ")", ";", "}"], "docstring": "Callback line parser which process hgignore lines\n\n@param string $line A line from .hgignore\n\n@return array|null An exclude pattern for filter()", "docstring_tokens": ["Callback", "line", "parser", "which", "process", "hgignore", "lines"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Package/Archiver/HgExcludeFilter.php#L59-L76", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/DependencyResolver/Problem.php", "func_name": "Problem.addRule", "original_string": "public function addRule(Rule $rule)\n    {\n        $this->addReason(spl_object_hash($rule), array(\n            'rule' => $rule,\n            'job' => $rule->getJob(),\n        ));\n    }", "language": "php", "code": "public function addRule(Rule $rule)\n    {\n        $this->addReason(spl_object_hash($rule), array(\n            'rule' => $rule,\n            'job' => $rule->getJob(),\n        ));\n    }", "code_tokens": ["public", "function", "addRule", "(", "Rule", "$", "rule", ")", "{", "$", "this", "->", "addReason", "(", "spl_object_hash", "(", "$", "rule", ")", ",", "array", "(", "'rule'", "=>", "$", "rule", ",", "'job'", "=>", "$", "rule", "->", "getJob", "(", ")", ",", ")", ")", ";", "}"], "docstring": "Add a rule as a reason\n\n@param Rule $rule A rule which is a reason for this problem", "docstring_tokens": ["Add", "a", "rule", "as", "a", "reason"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/DependencyResolver/Problem.php#L50-L56", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/DependencyResolver/Problem.php", "func_name": "Problem.addReason", "original_string": "protected function addReason($id, $reason)\n    {\n        if (!isset($this->reasonSeen[$id])) {\n            $this->reasonSeen[$id] = true;\n            $this->reasons[$this->section][] = $reason;\n        }\n    }", "language": "php", "code": "protected function addReason($id, $reason)\n    {\n        if (!isset($this->reasonSeen[$id])) {\n            $this->reasonSeen[$id] = true;\n            $this->reasons[$this->section][] = $reason;\n        }\n    }", "code_tokens": ["protected", "function", "addReason", "(", "$", "id", ",", "$", "reason", ")", "{", "if", "(", "!", "isset", "(", "$", "this", "->", "reasonSeen", "[", "$", "id", "]", ")", ")", "{", "$", "this", "->", "reasonSeen", "[", "$", "id", "]", "=", "true", ";", "$", "this", "->", "reasons", "[", "$", "this", "->", "section", "]", "[", "]", "=", "$", "reason", ";", "}", "}"], "docstring": "Store a reason descriptor but ignore duplicates\n\n@param string $id     A canonical identifier for the reason\n@param string $reason The reason descriptor", "docstring_tokens": ["Store", "a", "reason", "descriptor", "but", "ignore", "duplicates"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/DependencyResolver/Problem.php#L187-L193", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/DependencyResolver/Problem.php", "func_name": "Problem.jobToText", "original_string": "protected function jobToText($job)\n    {\n        $packageName = $job['packageName'];\n        $constraint = $job['constraint'];\n        switch ($job['cmd']) {\n            case 'install':\n                $packages = $this->pool->whatProvides($packageName, $constraint);\n                if (!$packages) {\n                    return 'No package found to satisfy install request for '.$packageName.$this->constraintToText($constraint);\n                }\n\n                return 'Installation request for '.$packageName.$this->constraintToText($constraint).' -> satisfiable by '.$this->getPackageList($packages).'.';\n            case 'update':\n                return 'Update request for '.$packageName.$this->constraintToText($constraint).'.';\n            case 'remove':\n                return 'Removal request for '.$packageName.$this->constraintToText($constraint).'';\n        }\n\n        if (isset($constraint)) {\n            $packages = $this->pool->whatProvides($packageName, $constraint);\n        } else {\n            $packages = array();\n        }\n\n        return 'Job(cmd='.$job['cmd'].', target='.$packageName.', packages=['.$this->getPackageList($packages).'])';\n    }", "language": "php", "code": "protected function jobToText($job)\n    {\n        $packageName = $job['packageName'];\n        $constraint = $job['constraint'];\n        switch ($job['cmd']) {\n            case 'install':\n                $packages = $this->pool->whatProvides($packageName, $constraint);\n                if (!$packages) {\n                    return 'No package found to satisfy install request for '.$packageName.$this->constraintToText($constraint);\n                }\n\n                return 'Installation request for '.$packageName.$this->constraintToText($constraint).' -> satisfiable by '.$this->getPackageList($packages).'.';\n            case 'update':\n                return 'Update request for '.$packageName.$this->constraintToText($constraint).'.';\n            case 'remove':\n                return 'Removal request for '.$packageName.$this->constraintToText($constraint).'';\n        }\n\n        if (isset($constraint)) {\n            $packages = $this->pool->whatProvides($packageName, $constraint);\n        } else {\n            $packages = array();\n        }\n\n        return 'Job(cmd='.$job['cmd'].', target='.$packageName.', packages=['.$this->getPackageList($packages).'])';\n    }", "code_tokens": ["protected", "function", "jobToText", "(", "$", "job", ")", "{", "$", "packageName", "=", "$", "job", "[", "'packageName'", "]", ";", "$", "constraint", "=", "$", "job", "[", "'constraint'", "]", ";", "switch", "(", "$", "job", "[", "'cmd'", "]", ")", "{", "case", "'install'", ":", "$", "packages", "=", "$", "this", "->", "pool", "->", "whatProvides", "(", "$", "packageName", ",", "$", "constraint", ")", ";", "if", "(", "!", "$", "packages", ")", "{", "return", "'No package found to satisfy install request for '", ".", "$", "packageName", ".", "$", "this", "->", "constraintToText", "(", "$", "constraint", ")", ";", "}", "return", "'Installation request for '", ".", "$", "packageName", ".", "$", "this", "->", "constraintToText", "(", "$", "constraint", ")", ".", "' -> satisfiable by '", ".", "$", "this", "->", "getPackageList", "(", "$", "packages", ")", ".", "'.'", ";", "case", "'update'", ":", "return", "'Update request for '", ".", "$", "packageName", ".", "$", "this", "->", "constraintToText", "(", "$", "constraint", ")", ".", "'.'", ";", "case", "'remove'", ":", "return", "'Removal request for '", ".", "$", "packageName", ".", "$", "this", "->", "constraintToText", "(", "$", "constraint", ")", ".", "''", ";", "}", "if", "(", "isset", "(", "$", "constraint", ")", ")", "{", "$", "packages", "=", "$", "this", "->", "pool", "->", "whatProvides", "(", "$", "packageName", ",", "$", "constraint", ")", ";", "}", "else", "{", "$", "packages", "=", "array", "(", ")", ";", "}", "return", "'Job(cmd='", ".", "$", "job", "[", "'cmd'", "]", ".", "', target='", ".", "$", "packageName", ".", "', packages=['", ".", "$", "this", "->", "getPackageList", "(", "$", "packages", ")", ".", "'])'", ";", "}"], "docstring": "Turns a job into a human readable description\n\n@param  array  $job\n@return string", "docstring_tokens": ["Turns", "a", "job", "into", "a", "human", "readable", "description"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/DependencyResolver/Problem.php#L206-L231", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Command/ShowCommand.php", "func_name": "ShowCommand.printVersions", "original_string": "protected function printVersions(CompletePackageInterface $package, array $versions, RepositoryInterface $installedRepo)\n    {\n        uasort($versions, 'version_compare');\n        $versions = array_keys(array_reverse($versions));\n\n        // highlight installed version\n        if ($installedRepo->hasPackage($package)) {\n            $installedVersion = $package->getPrettyVersion();\n            $key = array_search($installedVersion, $versions);\n            if (false !== $key) {\n                $versions[$key] = '<info>* ' . $installedVersion . '</info>';\n            }\n        }\n\n        $versions = implode(', ', $versions);\n\n        $this->getIO()->write('<info>versions</info> : ' . $versions);\n    }", "language": "php", "code": "protected function printVersions(CompletePackageInterface $package, array $versions, RepositoryInterface $installedRepo)\n    {\n        uasort($versions, 'version_compare');\n        $versions = array_keys(array_reverse($versions));\n\n        // highlight installed version\n        if ($installedRepo->hasPackage($package)) {\n            $installedVersion = $package->getPrettyVersion();\n            $key = array_search($installedVersion, $versions);\n            if (false !== $key) {\n                $versions[$key] = '<info>* ' . $installedVersion . '</info>';\n            }\n        }\n\n        $versions = implode(', ', $versions);\n\n        $this->getIO()->write('<info>versions</info> : ' . $versions);\n    }", "code_tokens": ["protected", "function", "printVersions", "(", "CompletePackageInterface", "$", "package", ",", "array", "$", "versions", ",", "RepositoryInterface", "$", "installedRepo", ")", "{", "uasort", "(", "$", "versions", ",", "'version_compare'", ")", ";", "$", "versions", "=", "array_keys", "(", "array_reverse", "(", "$", "versions", ")", ")", ";", "if", "(", "$", "installedRepo", "->", "hasPackage", "(", "$", "package", ")", ")", "{", "$", "installedVersion", "=", "$", "package", "->", "getPrettyVersion", "(", ")", ";", "$", "key", "=", "array_search", "(", "$", "installedVersion", ",", "$", "versions", ")", ";", "if", "(", "false", "!==", "$", "key", ")", "{", "$", "versions", "[", "$", "key", "]", "=", "'<info>* '", ".", "$", "installedVersion", ".", "'</info>'", ";", "}", "}", "$", "versions", "=", "implode", "(", "', '", ",", "$", "versions", ")", ";", "$", "this", "->", "getIO", "(", ")", "->", "write", "(", "'<info>versions</info> : '", ".", "$", "versions", ")", ";", "}"], "docstring": "Prints all available versions of this package and highlights the installed one if any.\n\n@param CompletePackageInterface $package\n@param array                    $versions\n@param RepositoryInterface      $installedRepo", "docstring_tokens": ["Prints", "all", "available", "versions", "of", "this", "package", "and", "highlights", "the", "installed", "one", "if", "any", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Command/ShowCommand.php#L648-L665", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Command/ShowCommand.php", "func_name": "ShowCommand.printLinks", "original_string": "protected function printLinks(CompletePackageInterface $package, $linkType, $title = null)\n    {\n        $title = $title ?: $linkType;\n        $io = $this->getIO();\n        if ($links = $package->{'get'.ucfirst($linkType)}()) {\n            $io->write(\"\\n<info>\" . $title . \"</info>\");\n\n            foreach ($links as $link) {\n                $io->write($link->getTarget() . ' <comment>' . $link->getPrettyConstraint() . '</comment>');\n            }\n        }\n    }", "language": "php", "code": "protected function printLinks(CompletePackageInterface $package, $linkType, $title = null)\n    {\n        $title = $title ?: $linkType;\n        $io = $this->getIO();\n        if ($links = $package->{'get'.ucfirst($linkType)}()) {\n            $io->write(\"\\n<info>\" . $title . \"</info>\");\n\n            foreach ($links as $link) {\n                $io->write($link->getTarget() . ' <comment>' . $link->getPrettyConstraint() . '</comment>');\n            }\n        }\n    }", "code_tokens": ["protected", "function", "printLinks", "(", "CompletePackageInterface", "$", "package", ",", "$", "linkType", ",", "$", "title", "=", "null", ")", "{", "$", "title", "=", "$", "title", "?", ":", "$", "linkType", ";", "$", "io", "=", "$", "this", "->", "getIO", "(", ")", ";", "if", "(", "$", "links", "=", "$", "package", "->", "{", "'get'", ".", "ucfirst", "(", "$", "linkType", ")", "}", "(", ")", ")", "{", "$", "io", "->", "write", "(", "\"\\n<info>\"", ".", "$", "title", ".", "\"</info>\"", ")", ";", "foreach", "(", "$", "links", "as", "$", "link", ")", "{", "$", "io", "->", "write", "(", "$", "link", "->", "getTarget", "(", ")", ".", "' <comment>'", ".", "$", "link", "->", "getPrettyConstraint", "(", ")", ".", "'</comment>'", ")", ";", "}", "}", "}"], "docstring": "print link objects\n\n@param CompletePackageInterface $package\n@param string                   $linkType\n@param string                   $title", "docstring_tokens": ["print", "link", "objects"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Command/ShowCommand.php#L674-L685", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Command/ShowCommand.php", "func_name": "ShowCommand.printLicenses", "original_string": "protected function printLicenses(CompletePackageInterface $package)\n    {\n        $spdxLicenses = new SpdxLicenses();\n\n        $licenses = $package->getLicense();\n        $io = $this->getIO();\n\n        foreach ($licenses as $licenseId) {\n            $license = $spdxLicenses->getLicenseByIdentifier($licenseId); // keys: 0 fullname, 1 osi, 2 url\n\n            if (!$license) {\n                $out = $licenseId;\n            } else {\n                // is license OSI approved?\n                if ($license[1] === true) {\n                    $out = sprintf('%s (%s) (OSI approved) %s', $license[0], $licenseId, $license[2]);\n                } else {\n                    $out = sprintf('%s (%s) %s', $license[0], $licenseId, $license[2]);\n                }\n            }\n\n            $io->write('<info>license</info>  : ' . $out);\n        }\n    }", "language": "php", "code": "protected function printLicenses(CompletePackageInterface $package)\n    {\n        $spdxLicenses = new SpdxLicenses();\n\n        $licenses = $package->getLicense();\n        $io = $this->getIO();\n\n        foreach ($licenses as $licenseId) {\n            $license = $spdxLicenses->getLicenseByIdentifier($licenseId); // keys: 0 fullname, 1 osi, 2 url\n\n            if (!$license) {\n                $out = $licenseId;\n            } else {\n                // is license OSI approved?\n                if ($license[1] === true) {\n                    $out = sprintf('%s (%s) (OSI approved) %s', $license[0], $licenseId, $license[2]);\n                } else {\n                    $out = sprintf('%s (%s) %s', $license[0], $licenseId, $license[2]);\n                }\n            }\n\n            $io->write('<info>license</info>  : ' . $out);\n        }\n    }", "code_tokens": ["protected", "function", "printLicenses", "(", "CompletePackageInterface", "$", "package", ")", "{", "$", "spdxLicenses", "=", "new", "SpdxLicenses", "(", ")", ";", "$", "licenses", "=", "$", "package", "->", "getLicense", "(", ")", ";", "$", "io", "=", "$", "this", "->", "getIO", "(", ")", ";", "foreach", "(", "$", "licenses", "as", "$", "licenseId", ")", "{", "$", "license", "=", "$", "spdxLicenses", "->", "getLicenseByIdentifier", "(", "$", "licenseId", ")", ";", "if", "(", "!", "$", "license", ")", "{", "$", "out", "=", "$", "licenseId", ";", "}", "else", "{", "if", "(", "$", "license", "[", "1", "]", "===", "true", ")", "{", "$", "out", "=", "sprintf", "(", "'%s (%s) (OSI approved) %s'", ",", "$", "license", "[", "0", "]", ",", "$", "licenseId", ",", "$", "license", "[", "2", "]", ")", ";", "}", "else", "{", "$", "out", "=", "sprintf", "(", "'%s (%s) %s'", ",", "$", "license", "[", "0", "]", ",", "$", "licenseId", ",", "$", "license", "[", "2", "]", ")", ";", "}", "}", "$", "io", "->", "write", "(", "'<info>license</info>  : '", ".", "$", "out", ")", ";", "}", "}"], "docstring": "Prints the licenses of a package with metadata\n\n@param CompletePackageInterface $package", "docstring_tokens": ["Prints", "the", "licenses", "of", "a", "package", "with", "metadata"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Command/ShowCommand.php#L692-L715", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Command/ShowCommand.php", "func_name": "ShowCommand.initStyles", "original_string": "protected function initStyles(OutputInterface $output)\n    {\n        $this->colors = array(\n            'green',\n            'yellow',\n            'cyan',\n            'magenta',\n            'blue',\n        );\n\n        foreach ($this->colors as $color) {\n            $style = new OutputFormatterStyle($color);\n            $output->getFormatter()->setStyle($color, $style);\n        }\n    }", "language": "php", "code": "protected function initStyles(OutputInterface $output)\n    {\n        $this->colors = array(\n            'green',\n            'yellow',\n            'cyan',\n            'magenta',\n            'blue',\n        );\n\n        foreach ($this->colors as $color) {\n            $style = new OutputFormatterStyle($color);\n            $output->getFormatter()->setStyle($color, $style);\n        }\n    }", "code_tokens": ["protected", "function", "initStyles", "(", "OutputInterface", "$", "output", ")", "{", "$", "this", "->", "colors", "=", "array", "(", "'green'", ",", "'yellow'", ",", "'cyan'", ",", "'magenta'", ",", "'blue'", ",", ")", ";", "foreach", "(", "$", "this", "->", "colors", "as", "$", "color", ")", "{", "$", "style", "=", "new", "OutputFormatterStyle", "(", "$", "color", ")", ";", "$", "output", "->", "getFormatter", "(", ")", "->", "setStyle", "(", "$", "color", ",", "$", "style", ")", ";", "}", "}"], "docstring": "Init styles for tree\n\n@param OutputInterface $output", "docstring_tokens": ["Init", "styles", "for", "tree"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Command/ShowCommand.php#L722-L736", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Command/ShowCommand.php", "func_name": "ShowCommand.generatePackageTree", "original_string": "protected function generatePackageTree(\n        PackageInterface $package,\n        RepositoryInterface $installedRepo,\n        RepositoryInterface $distantRepos\n    ) {\n        $requires = $package->getRequires();\n        ksort($requires);\n        $children = array();\n        foreach ($requires as $requireName => $require) {\n            $packagesInTree = array($package->getName(), $requireName);\n\n            $treeChildDesc = array(\n                'name' => $requireName,\n                'version' => $require->getPrettyConstraint(),\n            );\n\n            $deepChildren = $this->addTree($requireName, $require, $installedRepo, $distantRepos, $packagesInTree);\n\n            if ($deepChildren) {\n                $treeChildDesc['requires'] = $deepChildren;\n            }\n\n            $children[] = $treeChildDesc;\n        }\n        $tree = array(\n            'name' => $package->getPrettyName(),\n            'version' => $package->getPrettyVersion(),\n            'description' => $package->getDescription(),\n        );\n\n        if ($children) {\n            $tree['requires'] = $children;\n        }\n\n        return $tree;\n    }", "language": "php", "code": "protected function generatePackageTree(\n        PackageInterface $package,\n        RepositoryInterface $installedRepo,\n        RepositoryInterface $distantRepos\n    ) {\n        $requires = $package->getRequires();\n        ksort($requires);\n        $children = array();\n        foreach ($requires as $requireName => $require) {\n            $packagesInTree = array($package->getName(), $requireName);\n\n            $treeChildDesc = array(\n                'name' => $requireName,\n                'version' => $require->getPrettyConstraint(),\n            );\n\n            $deepChildren = $this->addTree($requireName, $require, $installedRepo, $distantRepos, $packagesInTree);\n\n            if ($deepChildren) {\n                $treeChildDesc['requires'] = $deepChildren;\n            }\n\n            $children[] = $treeChildDesc;\n        }\n        $tree = array(\n            'name' => $package->getPrettyName(),\n            'version' => $package->getPrettyVersion(),\n            'description' => $package->getDescription(),\n        );\n\n        if ($children) {\n            $tree['requires'] = $children;\n        }\n\n        return $tree;\n    }", "code_tokens": ["protected", "function", "generatePackageTree", "(", "PackageInterface", "$", "package", ",", "RepositoryInterface", "$", "installedRepo", ",", "RepositoryInterface", "$", "distantRepos", ")", "{", "$", "requires", "=", "$", "package", "->", "getRequires", "(", ")", ";", "ksort", "(", "$", "requires", ")", ";", "$", "children", "=", "array", "(", ")", ";", "foreach", "(", "$", "requires", "as", "$", "requireName", "=>", "$", "require", ")", "{", "$", "packagesInTree", "=", "array", "(", "$", "package", "->", "getName", "(", ")", ",", "$", "requireName", ")", ";", "$", "treeChildDesc", "=", "array", "(", "'name'", "=>", "$", "requireName", ",", "'version'", "=>", "$", "require", "->", "getPrettyConstraint", "(", ")", ",", ")", ";", "$", "deepChildren", "=", "$", "this", "->", "addTree", "(", "$", "requireName", ",", "$", "require", ",", "$", "installedRepo", ",", "$", "distantRepos", ",", "$", "packagesInTree", ")", ";", "if", "(", "$", "deepChildren", ")", "{", "$", "treeChildDesc", "[", "'requires'", "]", "=", "$", "deepChildren", ";", "}", "$", "children", "[", "]", "=", "$", "treeChildDesc", ";", "}", "$", "tree", "=", "array", "(", "'name'", "=>", "$", "package", "->", "getPrettyName", "(", ")", ",", "'version'", "=>", "$", "package", "->", "getPrettyVersion", "(", ")", ",", "'description'", "=>", "$", "package", "->", "getDescription", "(", ")", ",", ")", ";", "if", "(", "$", "children", ")", "{", "$", "tree", "[", "'requires'", "]", "=", "$", "children", ";", "}", "return", "$", "tree", ";", "}"], "docstring": "Generate the package tree\n\n@param  PackageInterface $package\n@param  RepositoryInterface     $installedRepo\n@param  RepositoryInterface     $distantRepos\n@return array", "docstring_tokens": ["Generate", "the", "package", "tree"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Command/ShowCommand.php#L791-L826", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Repository/Vcs/GitHubDriver.php", "func_name": "GitHubDriver.fetchRootIdentifier", "original_string": "protected function fetchRootIdentifier()\n    {\n        if ($this->repoData) {\n            return;\n        }\n\n        $repoDataUrl = $this->getApiUrl() . '/repos/'.$this->owner.'/'.$this->repository;\n\n        $this->repoData = JsonFile::parseJson($this->getContents($repoDataUrl, true), $repoDataUrl);\n        if (null === $this->repoData && null !== $this->gitDriver) {\n            return;\n        }\n\n        $this->owner = $this->repoData['owner']['login'];\n        $this->repository = $this->repoData['name'];\n\n        $this->isPrivate = !empty($this->repoData['private']);\n        if (isset($this->repoData['default_branch'])) {\n            $this->rootIdentifier = $this->repoData['default_branch'];\n        } elseif (isset($this->repoData['master_branch'])) {\n            $this->rootIdentifier = $this->repoData['master_branch'];\n        } else {\n            $this->rootIdentifier = 'master';\n        }\n        $this->hasIssues = !empty($this->repoData['has_issues']);\n    }", "language": "php", "code": "protected function fetchRootIdentifier()\n    {\n        if ($this->repoData) {\n            return;\n        }\n\n        $repoDataUrl = $this->getApiUrl() . '/repos/'.$this->owner.'/'.$this->repository;\n\n        $this->repoData = JsonFile::parseJson($this->getContents($repoDataUrl, true), $repoDataUrl);\n        if (null === $this->repoData && null !== $this->gitDriver) {\n            return;\n        }\n\n        $this->owner = $this->repoData['owner']['login'];\n        $this->repository = $this->repoData['name'];\n\n        $this->isPrivate = !empty($this->repoData['private']);\n        if (isset($this->repoData['default_branch'])) {\n            $this->rootIdentifier = $this->repoData['default_branch'];\n        } elseif (isset($this->repoData['master_branch'])) {\n            $this->rootIdentifier = $this->repoData['master_branch'];\n        } else {\n            $this->rootIdentifier = 'master';\n        }\n        $this->hasIssues = !empty($this->repoData['has_issues']);\n    }", "code_tokens": ["protected", "function", "fetchRootIdentifier", "(", ")", "{", "if", "(", "$", "this", "->", "repoData", ")", "{", "return", ";", "}", "$", "repoDataUrl", "=", "$", "this", "->", "getApiUrl", "(", ")", ".", "'/repos/'", ".", "$", "this", "->", "owner", ".", "'/'", ".", "$", "this", "->", "repository", ";", "$", "this", "->", "repoData", "=", "JsonFile", "::", "parseJson", "(", "$", "this", "->", "getContents", "(", "$", "repoDataUrl", ",", "true", ")", ",", "$", "repoDataUrl", ")", ";", "if", "(", "null", "===", "$", "this", "->", "repoData", "&&", "null", "!==", "$", "this", "->", "gitDriver", ")", "{", "return", ";", "}", "$", "this", "->", "owner", "=", "$", "this", "->", "repoData", "[", "'owner'", "]", "[", "'login'", "]", ";", "$", "this", "->", "repository", "=", "$", "this", "->", "repoData", "[", "'name'", "]", ";", "$", "this", "->", "isPrivate", "=", "!", "empty", "(", "$", "this", "->", "repoData", "[", "'private'", "]", ")", ";", "if", "(", "isset", "(", "$", "this", "->", "repoData", "[", "'default_branch'", "]", ")", ")", "{", "$", "this", "->", "rootIdentifier", "=", "$", "this", "->", "repoData", "[", "'default_branch'", "]", ";", "}", "elseif", "(", "isset", "(", "$", "this", "->", "repoData", "[", "'master_branch'", "]", ")", ")", "{", "$", "this", "->", "rootIdentifier", "=", "$", "this", "->", "repoData", "[", "'master_branch'", "]", ";", "}", "else", "{", "$", "this", "->", "rootIdentifier", "=", "'master'", ";", "}", "$", "this", "->", "hasIssues", "=", "!", "empty", "(", "$", "this", "->", "repoData", "[", "'has_issues'", "]", ")", ";", "}"], "docstring": "Fetch root identifier from GitHub\n\n@throws TransportException", "docstring_tokens": ["Fetch", "root", "identifier", "from", "GitHub"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Repository/Vcs/GitHubDriver.php#L399-L424", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Util/TlsHelper.php", "func_name": "TlsHelper.checkCertificateHost", "original_string": "public static function checkCertificateHost($certificate, $hostname, &$cn = null)\n    {\n        $names = self::getCertificateNames($certificate);\n\n        if (empty($names)) {\n            return false;\n        }\n\n        $combinedNames = array_merge($names['san'], array($names['cn']));\n        $hostname = strtolower($hostname);\n\n        foreach ($combinedNames as $certName) {\n            $matcher = self::certNameMatcher($certName);\n\n            if ($matcher && $matcher($hostname)) {\n                $cn = $names['cn'];\n\n                return true;\n            }\n        }\n\n        return false;\n    }", "language": "php", "code": "public static function checkCertificateHost($certificate, $hostname, &$cn = null)\n    {\n        $names = self::getCertificateNames($certificate);\n\n        if (empty($names)) {\n            return false;\n        }\n\n        $combinedNames = array_merge($names['san'], array($names['cn']));\n        $hostname = strtolower($hostname);\n\n        foreach ($combinedNames as $certName) {\n            $matcher = self::certNameMatcher($certName);\n\n            if ($matcher && $matcher($hostname)) {\n                $cn = $names['cn'];\n\n                return true;\n            }\n        }\n\n        return false;\n    }", "code_tokens": ["public", "static", "function", "checkCertificateHost", "(", "$", "certificate", ",", "$", "hostname", ",", "&", "$", "cn", "=", "null", ")", "{", "$", "names", "=", "self", "::", "getCertificateNames", "(", "$", "certificate", ")", ";", "if", "(", "empty", "(", "$", "names", ")", ")", "{", "return", "false", ";", "}", "$", "combinedNames", "=", "array_merge", "(", "$", "names", "[", "'san'", "]", ",", "array", "(", "$", "names", "[", "'cn'", "]", ")", ")", ";", "$", "hostname", "=", "strtolower", "(", "$", "hostname", ")", ";", "foreach", "(", "$", "combinedNames", "as", "$", "certName", ")", "{", "$", "matcher", "=", "self", "::", "certNameMatcher", "(", "$", "certName", ")", ";", "if", "(", "$", "matcher", "&&", "$", "matcher", "(", "$", "hostname", ")", ")", "{", "$", "cn", "=", "$", "names", "[", "'cn'", "]", ";", "return", "true", ";", "}", "}", "return", "false", ";", "}"], "docstring": "Match hostname against a certificate.\n\n@param mixed  $certificate X.509 certificate\n@param string $hostname    Hostname in the URL\n@param string $cn          Set to the common name of the certificate iff match found\n\n@return bool", "docstring_tokens": ["Match", "hostname", "against", "a", "certificate", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Util/TlsHelper.php#L33-L55", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Util/TlsHelper.php", "func_name": "TlsHelper.getCertificateNames", "original_string": "public static function getCertificateNames($certificate)\n    {\n        if (is_array($certificate)) {\n            $info = $certificate;\n        } elseif (CaBundle::isOpensslParseSafe()) {\n            $info = openssl_x509_parse($certificate, false);\n        }\n\n        if (!isset($info['subject']['commonName'])) {\n            return null;\n        }\n\n        $commonName = strtolower($info['subject']['commonName']);\n        $subjectAltNames = array();\n\n        if (isset($info['extensions']['subjectAltName'])) {\n            $subjectAltNames = preg_split('{\\s*,\\s*}', $info['extensions']['subjectAltName']);\n            $subjectAltNames = array_filter(array_map(function ($name) {\n                if (0 === strpos($name, 'DNS:')) {\n                    return strtolower(ltrim(substr($name, 4)));\n                }\n\n                return null;\n            }, $subjectAltNames));\n            $subjectAltNames = array_values($subjectAltNames);\n        }\n\n        return array(\n            'cn' => $commonName,\n            'san' => $subjectAltNames,\n        );\n    }", "language": "php", "code": "public static function getCertificateNames($certificate)\n    {\n        if (is_array($certificate)) {\n            $info = $certificate;\n        } elseif (CaBundle::isOpensslParseSafe()) {\n            $info = openssl_x509_parse($certificate, false);\n        }\n\n        if (!isset($info['subject']['commonName'])) {\n            return null;\n        }\n\n        $commonName = strtolower($info['subject']['commonName']);\n        $subjectAltNames = array();\n\n        if (isset($info['extensions']['subjectAltName'])) {\n            $subjectAltNames = preg_split('{\\s*,\\s*}', $info['extensions']['subjectAltName']);\n            $subjectAltNames = array_filter(array_map(function ($name) {\n                if (0 === strpos($name, 'DNS:')) {\n                    return strtolower(ltrim(substr($name, 4)));\n                }\n\n                return null;\n            }, $subjectAltNames));\n            $subjectAltNames = array_values($subjectAltNames);\n        }\n\n        return array(\n            'cn' => $commonName,\n            'san' => $subjectAltNames,\n        );\n    }", "code_tokens": ["public", "static", "function", "getCertificateNames", "(", "$", "certificate", ")", "{", "if", "(", "is_array", "(", "$", "certificate", ")", ")", "{", "$", "info", "=", "$", "certificate", ";", "}", "elseif", "(", "CaBundle", "::", "isOpensslParseSafe", "(", ")", ")", "{", "$", "info", "=", "openssl_x509_parse", "(", "$", "certificate", ",", "false", ")", ";", "}", "if", "(", "!", "isset", "(", "$", "info", "[", "'subject'", "]", "[", "'commonName'", "]", ")", ")", "{", "return", "null", ";", "}", "$", "commonName", "=", "strtolower", "(", "$", "info", "[", "'subject'", "]", "[", "'commonName'", "]", ")", ";", "$", "subjectAltNames", "=", "array", "(", ")", ";", "if", "(", "isset", "(", "$", "info", "[", "'extensions'", "]", "[", "'subjectAltName'", "]", ")", ")", "{", "$", "subjectAltNames", "=", "preg_split", "(", "'{\\s*,\\s*}'", ",", "$", "info", "[", "'extensions'", "]", "[", "'subjectAltName'", "]", ")", ";", "$", "subjectAltNames", "=", "array_filter", "(", "array_map", "(", "function", "(", "$", "name", ")", "{", "if", "(", "0", "===", "strpos", "(", "$", "name", ",", "'DNS:'", ")", ")", "{", "return", "strtolower", "(", "ltrim", "(", "substr", "(", "$", "name", ",", "4", ")", ")", ")", ";", "}", "return", "null", ";", "}", ",", "$", "subjectAltNames", ")", ")", ";", "$", "subjectAltNames", "=", "array_values", "(", "$", "subjectAltNames", ")", ";", "}", "return", "array", "(", "'cn'", "=>", "$", "commonName", ",", "'san'", "=>", "$", "subjectAltNames", ",", ")", ";", "}"], "docstring": "Extract DNS names out of an X.509 certificate.\n\n@param mixed $certificate X.509 certificate\n\n@return array|null", "docstring_tokens": ["Extract", "DNS", "names", "out", "of", "an", "X", ".", "509", "certificate", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Util/TlsHelper.php#L64-L95", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/Repository/Pear/ChannelRest11Reader.php", "func_name": "ChannelRest11Reader.parsePackage", "original_string": "private function parsePackage($packageInfo)\n    {\n        $packageInfo->registerXPathNamespace('ns', self::CATEGORY_PACKAGES_INFO_NS);\n        $channelName = (string) $packageInfo->p->c;\n        $packageName = (string) $packageInfo->p->n;\n        $license = (string) $packageInfo->p->l;\n        $shortDescription = (string) $packageInfo->p->s;\n        $description = (string) $packageInfo->p->d;\n\n        $dependencies = array();\n        foreach ($packageInfo->xpath('ns:deps') as $node) {\n            $dependencyVersion = (string) $node->v;\n            $dependencyArray = unserialize((string) $node->d);\n\n            $dependencyInfo = $this->dependencyReader->buildDependencyInfo($dependencyArray);\n\n            $dependencies[$dependencyVersion] = $dependencyInfo;\n        }\n\n        $releases = array();\n        $releasesInfo = $packageInfo->xpath('ns:a/ns:r');\n        if ($releasesInfo) {\n            foreach ($releasesInfo as $node) {\n                $releaseVersion = (string) $node->v;\n                $releaseStability = (string) $node->s;\n                $releases[$releaseVersion] = new ReleaseInfo(\n                    $releaseStability,\n                    isset($dependencies[$releaseVersion]) ? $dependencies[$releaseVersion] : new DependencyInfo(array(), array())\n                );\n            }\n        }\n\n        return new PackageInfo(\n            $channelName,\n            $packageName,\n            $license,\n            $shortDescription,\n            $description,\n            $releases\n        );\n    }", "language": "php", "code": "private function parsePackage($packageInfo)\n    {\n        $packageInfo->registerXPathNamespace('ns', self::CATEGORY_PACKAGES_INFO_NS);\n        $channelName = (string) $packageInfo->p->c;\n        $packageName = (string) $packageInfo->p->n;\n        $license = (string) $packageInfo->p->l;\n        $shortDescription = (string) $packageInfo->p->s;\n        $description = (string) $packageInfo->p->d;\n\n        $dependencies = array();\n        foreach ($packageInfo->xpath('ns:deps') as $node) {\n            $dependencyVersion = (string) $node->v;\n            $dependencyArray = unserialize((string) $node->d);\n\n            $dependencyInfo = $this->dependencyReader->buildDependencyInfo($dependencyArray);\n\n            $dependencies[$dependencyVersion] = $dependencyInfo;\n        }\n\n        $releases = array();\n        $releasesInfo = $packageInfo->xpath('ns:a/ns:r');\n        if ($releasesInfo) {\n            foreach ($releasesInfo as $node) {\n                $releaseVersion = (string) $node->v;\n                $releaseStability = (string) $node->s;\n                $releases[$releaseVersion] = new ReleaseInfo(\n                    $releaseStability,\n                    isset($dependencies[$releaseVersion]) ? $dependencies[$releaseVersion] : new DependencyInfo(array(), array())\n                );\n            }\n        }\n\n        return new PackageInfo(\n            $channelName,\n            $packageName,\n            $license,\n            $shortDescription,\n            $description,\n            $releases\n        );\n    }", "code_tokens": ["private", "function", "parsePackage", "(", "$", "packageInfo", ")", "{", "$", "packageInfo", "->", "registerXPathNamespace", "(", "'ns'", ",", "self", "::", "CATEGORY_PACKAGES_INFO_NS", ")", ";", "$", "channelName", "=", "(", "string", ")", "$", "packageInfo", "->", "p", "->", "c", ";", "$", "packageName", "=", "(", "string", ")", "$", "packageInfo", "->", "p", "->", "n", ";", "$", "license", "=", "(", "string", ")", "$", "packageInfo", "->", "p", "->", "l", ";", "$", "shortDescription", "=", "(", "string", ")", "$", "packageInfo", "->", "p", "->", "s", ";", "$", "description", "=", "(", "string", ")", "$", "packageInfo", "->", "p", "->", "d", ";", "$", "dependencies", "=", "array", "(", ")", ";", "foreach", "(", "$", "packageInfo", "->", "xpath", "(", "'ns:deps'", ")", "as", "$", "node", ")", "{", "$", "dependencyVersion", "=", "(", "string", ")", "$", "node", "->", "v", ";", "$", "dependencyArray", "=", "unserialize", "(", "(", "string", ")", "$", "node", "->", "d", ")", ";", "$", "dependencyInfo", "=", "$", "this", "->", "dependencyReader", "->", "buildDependencyInfo", "(", "$", "dependencyArray", ")", ";", "$", "dependencies", "[", "$", "dependencyVersion", "]", "=", "$", "dependencyInfo", ";", "}", "$", "releases", "=", "array", "(", ")", ";", "$", "releasesInfo", "=", "$", "packageInfo", "->", "xpath", "(", "'ns:a/ns:r'", ")", ";", "if", "(", "$", "releasesInfo", ")", "{", "foreach", "(", "$", "releasesInfo", "as", "$", "node", ")", "{", "$", "releaseVersion", "=", "(", "string", ")", "$", "node", "->", "v", ";", "$", "releaseStability", "=", "(", "string", ")", "$", "node", "->", "s", ";", "$", "releases", "[", "$", "releaseVersion", "]", "=", "new", "ReleaseInfo", "(", "$", "releaseStability", ",", "isset", "(", "$", "dependencies", "[", "$", "releaseVersion", "]", ")", "?", "$", "dependencies", "[", "$", "releaseVersion", "]", ":", "new", "DependencyInfo", "(", "array", "(", ")", ",", "array", "(", ")", ")", ")", ";", "}", "}", "return", "new", "PackageInfo", "(", "$", "channelName", ",", "$", "packageName", ",", "$", "license", ",", "$", "shortDescription", ",", "$", "description", ",", "$", "releases", ")", ";", "}"], "docstring": "Parses package node.\n\n@param \\SimpleXMLElement $packageInfo  xml element describing package\n@return PackageInfo", "docstring_tokens": ["Parses", "package", "node", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/Repository/Pear/ChannelRest11Reader.php#L98-L138", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/EventDispatcher/EventDispatcher.php", "func_name": "EventDispatcher.dispatchScript", "original_string": "public function dispatchScript($eventName, $devMode = false, $additionalArgs = array(), $flags = array())\n    {\n        return $this->doDispatch(new Script\\Event($eventName, $this->composer, $this->io, $devMode, $additionalArgs, $flags));\n    }", "language": "php", "code": "public function dispatchScript($eventName, $devMode = false, $additionalArgs = array(), $flags = array())\n    {\n        return $this->doDispatch(new Script\\Event($eventName, $this->composer, $this->io, $devMode, $additionalArgs, $flags));\n    }", "code_tokens": ["public", "function", "dispatchScript", "(", "$", "eventName", ",", "$", "devMode", "=", "false", ",", "$", "additionalArgs", "=", "array", "(", ")", ",", "$", "flags", "=", "array", "(", ")", ")", "{", "return", "$", "this", "->", "doDispatch", "(", "new", "Script", "\\", "Event", "(", "$", "eventName", ",", "$", "this", "->", "composer", ",", "$", "this", "->", "io", ",", "$", "devMode", ",", "$", "additionalArgs", ",", "$", "flags", ")", ")", ";", "}"], "docstring": "Dispatch a script event.\n\n@param  string $eventName      The constant in ScriptEvents\n@param  bool   $devMode\n@param  array  $additionalArgs Arguments passed by the user\n@param  array  $flags          Optional flags to pass data not as argument\n@return int    return code of the executed script if any, for php scripts a false return\nvalue is changed to 1, anything else to 0", "docstring_tokens": ["Dispatch", "a", "script", "event", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/EventDispatcher/EventDispatcher.php#L94-L97", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/EventDispatcher/EventDispatcher.php", "func_name": "EventDispatcher.dispatchPackageEvent", "original_string": "public function dispatchPackageEvent($eventName, $devMode, PolicyInterface $policy, Pool $pool, CompositeRepository $installedRepo, Request $request, array $operations, OperationInterface $operation)\n    {\n        return $this->doDispatch(new PackageEvent($eventName, $this->composer, $this->io, $devMode, $policy, $pool, $installedRepo, $request, $operations, $operation));\n    }", "language": "php", "code": "public function dispatchPackageEvent($eventName, $devMode, PolicyInterface $policy, Pool $pool, CompositeRepository $installedRepo, Request $request, array $operations, OperationInterface $operation)\n    {\n        return $this->doDispatch(new PackageEvent($eventName, $this->composer, $this->io, $devMode, $policy, $pool, $installedRepo, $request, $operations, $operation));\n    }", "code_tokens": ["public", "function", "dispatchPackageEvent", "(", "$", "eventName", ",", "$", "devMode", ",", "PolicyInterface", "$", "policy", ",", "Pool", "$", "pool", ",", "CompositeRepository", "$", "installedRepo", ",", "Request", "$", "request", ",", "array", "$", "operations", ",", "OperationInterface", "$", "operation", ")", "{", "return", "$", "this", "->", "doDispatch", "(", "new", "PackageEvent", "(", "$", "eventName", ",", "$", "this", "->", "composer", ",", "$", "this", "->", "io", ",", "$", "devMode", ",", "$", "policy", ",", "$", "pool", ",", "$", "installedRepo", ",", "$", "request", ",", "$", "operations", ",", "$", "operation", ")", ")", ";", "}"], "docstring": "Dispatch a package event.\n\n@param string              $eventName     The constant in PackageEvents\n@param bool                $devMode       Whether or not we are in dev mode\n@param PolicyInterface     $policy        The policy\n@param Pool                $pool          The pool\n@param CompositeRepository $installedRepo The installed repository\n@param Request             $request       The request\n@param array               $operations    The list of operations\n@param OperationInterface  $operation     The package being installed/updated/removed\n\n@return int return code of the executed script if any, for php scripts a false return\nvalue is changed to 1, anything else to 0", "docstring_tokens": ["Dispatch", "a", "package", "event", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/EventDispatcher/EventDispatcher.php#L114-L117", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/EventDispatcher/EventDispatcher.php", "func_name": "EventDispatcher.dispatchInstallerEvent", "original_string": "public function dispatchInstallerEvent($eventName, $devMode, PolicyInterface $policy, Pool $pool, CompositeRepository $installedRepo, Request $request, array $operations = array())\n    {\n        return $this->doDispatch(new InstallerEvent($eventName, $this->composer, $this->io, $devMode, $policy, $pool, $installedRepo, $request, $operations));\n    }", "language": "php", "code": "public function dispatchInstallerEvent($eventName, $devMode, PolicyInterface $policy, Pool $pool, CompositeRepository $installedRepo, Request $request, array $operations = array())\n    {\n        return $this->doDispatch(new InstallerEvent($eventName, $this->composer, $this->io, $devMode, $policy, $pool, $installedRepo, $request, $operations));\n    }", "code_tokens": ["public", "function", "dispatchInstallerEvent", "(", "$", "eventName", ",", "$", "devMode", ",", "PolicyInterface", "$", "policy", ",", "Pool", "$", "pool", ",", "CompositeRepository", "$", "installedRepo", ",", "Request", "$", "request", ",", "array", "$", "operations", "=", "array", "(", ")", ")", "{", "return", "$", "this", "->", "doDispatch", "(", "new", "InstallerEvent", "(", "$", "eventName", ",", "$", "this", "->", "composer", ",", "$", "this", "->", "io", ",", "$", "devMode", ",", "$", "policy", ",", "$", "pool", ",", "$", "installedRepo", ",", "$", "request", ",", "$", "operations", ")", ")", ";", "}"], "docstring": "Dispatch a installer event.\n\n@param string              $eventName     The constant in InstallerEvents\n@param bool                $devMode       Whether or not we are in dev mode\n@param PolicyInterface     $policy        The policy\n@param Pool                $pool          The pool\n@param CompositeRepository $installedRepo The installed repository\n@param Request             $request       The request\n@param array               $operations    The list of operations\n\n@return int return code of the executed script if any, for php scripts a false return\nvalue is changed to 1, anything else to 0", "docstring_tokens": ["Dispatch", "a", "installer", "event", "."], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/EventDispatcher/EventDispatcher.php#L133-L136", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/EventDispatcher/EventDispatcher.php", "func_name": "EventDispatcher.addSubscriber", "original_string": "public function addSubscriber(EventSubscriberInterface $subscriber)\n    {\n        foreach ($subscriber->getSubscribedEvents() as $eventName => $params) {\n            if (is_string($params)) {\n                $this->addListener($eventName, array($subscriber, $params));\n            } elseif (is_string($params[0])) {\n                $this->addListener($eventName, array($subscriber, $params[0]), isset($params[1]) ? $params[1] : 0);\n            } else {\n                foreach ($params as $listener) {\n                    $this->addListener($eventName, array($subscriber, $listener[0]), isset($listener[1]) ? $listener[1] : 0);\n                }\n            }\n        }\n    }", "language": "php", "code": "public function addSubscriber(EventSubscriberInterface $subscriber)\n    {\n        foreach ($subscriber->getSubscribedEvents() as $eventName => $params) {\n            if (is_string($params)) {\n                $this->addListener($eventName, array($subscriber, $params));\n            } elseif (is_string($params[0])) {\n                $this->addListener($eventName, array($subscriber, $params[0]), isset($params[1]) ? $params[1] : 0);\n            } else {\n                foreach ($params as $listener) {\n                    $this->addListener($eventName, array($subscriber, $listener[0]), isset($listener[1]) ? $listener[1] : 0);\n                }\n            }\n        }\n    }", "code_tokens": ["public", "function", "addSubscriber", "(", "EventSubscriberInterface", "$", "subscriber", ")", "{", "foreach", "(", "$", "subscriber", "->", "getSubscribedEvents", "(", ")", "as", "$", "eventName", "=>", "$", "params", ")", "{", "if", "(", "is_string", "(", "$", "params", ")", ")", "{", "$", "this", "->", "addListener", "(", "$", "eventName", ",", "array", "(", "$", "subscriber", ",", "$", "params", ")", ")", ";", "}", "elseif", "(", "is_string", "(", "$", "params", "[", "0", "]", ")", ")", "{", "$", "this", "->", "addListener", "(", "$", "eventName", ",", "array", "(", "$", "subscriber", ",", "$", "params", "[", "0", "]", ")", ",", "isset", "(", "$", "params", "[", "1", "]", ")", "?", "$", "params", "[", "1", "]", ":", "0", ")", ";", "}", "else", "{", "foreach", "(", "$", "params", "as", "$", "listener", ")", "{", "$", "this", "->", "addListener", "(", "$", "eventName", ",", "array", "(", "$", "subscriber", ",", "$", "listener", "[", "0", "]", ")", ",", "isset", "(", "$", "listener", "[", "1", "]", ")", "?", "$", "listener", "[", "1", "]", ":", "0", ")", ";", "}", "}", "}", "}"], "docstring": "Adds object methods as listeners for the events in getSubscribedEvents\n\n@see EventSubscriberInterface\n\n@param EventSubscriberInterface $subscriber", "docstring_tokens": ["Adds", "object", "methods", "as", "listeners", "for", "the", "events", "in", "getSubscribedEvents"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/EventDispatcher/EventDispatcher.php#L412-L425", "partition": "valid"}
{"repo": "composer/composer", "path": "src/Composer/EventDispatcher/EventDispatcher.php", "func_name": "EventDispatcher.getListeners", "original_string": "protected function getListeners(Event $event)\n    {\n        $scriptListeners = $this->getScriptListeners($event);\n\n        if (!isset($this->listeners[$event->getName()][0])) {\n            $this->listeners[$event->getName()][0] = array();\n        }\n        krsort($this->listeners[$event->getName()]);\n\n        $listeners = $this->listeners;\n        $listeners[$event->getName()][0] = array_merge($listeners[$event->getName()][0], $scriptListeners);\n\n        return call_user_func_array('array_merge', $listeners[$event->getName()]);\n    }", "language": "php", "code": "protected function getListeners(Event $event)\n    {\n        $scriptListeners = $this->getScriptListeners($event);\n\n        if (!isset($this->listeners[$event->getName()][0])) {\n            $this->listeners[$event->getName()][0] = array();\n        }\n        krsort($this->listeners[$event->getName()]);\n\n        $listeners = $this->listeners;\n        $listeners[$event->getName()][0] = array_merge($listeners[$event->getName()][0], $scriptListeners);\n\n        return call_user_func_array('array_merge', $listeners[$event->getName()]);\n    }", "code_tokens": ["protected", "function", "getListeners", "(", "Event", "$", "event", ")", "{", "$", "scriptListeners", "=", "$", "this", "->", "getScriptListeners", "(", "$", "event", ")", ";", "if", "(", "!", "isset", "(", "$", "this", "->", "listeners", "[", "$", "event", "->", "getName", "(", ")", "]", "[", "0", "]", ")", ")", "{", "$", "this", "->", "listeners", "[", "$", "event", "->", "getName", "(", ")", "]", "[", "0", "]", "=", "array", "(", ")", ";", "}", "krsort", "(", "$", "this", "->", "listeners", "[", "$", "event", "->", "getName", "(", ")", "]", ")", ";", "$", "listeners", "=", "$", "this", "->", "listeners", ";", "$", "listeners", "[", "$", "event", "->", "getName", "(", ")", "]", "[", "0", "]", "=", "array_merge", "(", "$", "listeners", "[", "$", "event", "->", "getName", "(", ")", "]", "[", "0", "]", ",", "$", "scriptListeners", ")", ";", "return", "call_user_func_array", "(", "'array_merge'", ",", "$", "listeners", "[", "$", "event", "->", "getName", "(", ")", "]", ")", ";", "}"], "docstring": "Retrieves all listeners for a given event\n\n@param  Event $event\n@return array All listeners: callables and scripts", "docstring_tokens": ["Retrieves", "all", "listeners", "for", "a", "given", "event"], "sha": "5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b", "url": "https://github.com/composer/composer/blob/5d615a16d175fcbdb67a536ef9d6fc4e8a1f6f2b/src/Composer/EventDispatcher/EventDispatcher.php#L433-L446", "partition": "valid"}